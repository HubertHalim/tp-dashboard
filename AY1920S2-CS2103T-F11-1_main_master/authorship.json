[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "mainClassName \u003d \u0027life.calgo.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    archiveName \u003d \u0027calgo_v1.3.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "ray-97": 2,
      "jeremylow97": 1,
      "-": 151
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "git config user.fat \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/life/calgo/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/life/calgo/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * By having a separate main class (Main) that does not extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/life/calgo/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.ConsumptionRecordStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.FoodRecordStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.GoalStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.JsonConsumptionRecordStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.JsonFoodRecordStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.JsonGoalStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Calgo ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FoodRecordStorage foodRecordStorage \u003d new JsonFoodRecordStorage(userPrefs.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecordStorage consumptionRecordStorage \u003d new JsonConsumptionRecordStorage("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefs.getConsumptionRecordFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        GoalStorage goalStorage \u003d new JsonGoalStorage(userPrefs.getGoalFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        storage \u003d new StorageManager(foodRecordStorage, consumptionRecordStorage, userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s food record and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The data from the sample food record will be used instead if {@code storage}\u0027s food record is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * or an empty food record will be used instead if errors occur when reading {@code storage}\u0027s food record."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Optional\u003cReadOnlyFoodRecord\u003e foodRecordOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ReadOnlyFoodRecord initialData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cReadOnlyConsumptionRecord\u003e consumptionRecordOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ReadOnlyConsumptionRecord consumptionData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Optional\u003cReadOnlyGoal\u003e goalOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ReadOnlyGoal goal;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            foodRecordOptional \u003d storage.readFoodRecord();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (!foodRecordOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FoodRecord\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            initialData \u003d foodRecordOptional.orElseGet(SampleDataUtil::getSampleFoodRecord);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FoodRecord\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            initialData \u003d new FoodRecord();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodRecord\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            initialData \u003d new FoodRecord();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionRecordOptional \u003d storage.readConsumptionRecord();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (!consumptionRecordOptional.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with no consumption data.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionData \u003d consumptionRecordOptional.orElse(new ConsumptionRecord());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with no consumption data.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionData \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.warning(\"Problem while reading from file. Will be starting with no consumption data.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionData \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goalOptional \u003d storage.readGoal();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (!goalOptional.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with no goal set.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal \u003d goalOptional.orElse(new DailyGoal(DailyGoal.DUMMY_VALUE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with no goal set.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal \u003d new DailyGoal(DailyGoal.DUMMY_VALUE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Problem while reading from the goal file. Will be starting with no goal set.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal \u003d new DailyGoal(DailyGoal.DUMMY_VALUE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new ModelManager(initialData, consumptionData, userPrefs, goal);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodRecord\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        logger.info(\"Starting Calgo \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Calgo ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 3,
      "buddhavineeth": 47,
      "ray-97": 18,
      "eugenetyc": 15,
      "-": 145
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String LOG_FILE \u003d \"calgo.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD \u003d \"This food does not exist in the Food Records\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_FOODS_LISTED_OVERVIEW \u003d \"%1$d foods listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_EXCESS_FIND_FILTERS \u003d \"Please specify 1 and only 1 parameter for \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"filtering using the find command.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "jeremylow97": 1,
      "eugenetyc": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.core.JsonGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.databind.JsonSerializer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.databind.KeyDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.databind.SerializerProvider;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.JsonAdaptedFood;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    .addKeySerializer(JsonAdaptedFood.class, new JsonAdaptedFoodKeySerializer())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    .addKeyDeserializer(JsonAdaptedFood.class, new JsonAdaptedFoodKeyDeserializer()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * A serializer for to help Jackson deal with HashMap keys that are AdaptedFood."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static class JsonAdaptedFoodKeySerializer extends JsonSerializer\u003cJsonAdaptedFood\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public void serialize(JsonAdaptedFood value, JsonGenerator gen, SerializerProvider serializers)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                throws IOException, JsonProcessingException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            // StringWriter writer \u003d new StringWriter();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            // objectMapper.writeValue(writer, value);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            //gen.writeFieldName(writer.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            gen.writeFieldName(toJsonString(value));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * A deserializer for to help Jackson deal with HashMap keys that are AdaptedFood."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static class JsonAdaptedFoodKeyDeserializer extends KeyDeserializer {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public JsonAdaptedFood deserializeKey(String key, DeserializationContext context)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                throws IOException, JsonProcessingException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return fromJsonString(key, JsonAdaptedFood.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "ray-97": 33,
      "-": 139
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Used in find command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *   Ignores case, and a non-full word match also returns true."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // we want to compare this processed word"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // we want to compare with the words in this sentence"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // only return true if either they are the exact equivalent ignoring casing,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // or the word is contained as a substring in any of the sentence\u0027s words"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || containsSubstringWord(wordsInPreppedSentence, preppedWord);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the String array contains at least one String containing the substring."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param words the String array to search in."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param substringWord the substring to find in the Strings from the String array."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the String array contains at least one String containing the substring."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static boolean containsSubstringWord(String[] words, String substringWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (String word: words) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (word.toLowerCase().contains(substringWord.toLowerCase())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Used in find command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns if the Food has the stated nutritional value."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param origin the Food\u0027s nutritional value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param query the stated nutritional value of the same type."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the Food has the stated nutritional value."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean containsNutritionalValueEqualTo(String origin, String query) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(origin);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(query);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String preppedQueryString \u003d query.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(!preppedQueryString.isEmpty(), \"Query parameter cannot be empty\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(preppedQueryString.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \"Your nutritional value query should be a single value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        int preppedQueryValue \u003d Integer.parseInt(preppedQueryString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        int preppedOriginValue \u003d Integer.parseInt(origin);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return (preppedOriginValue \u003d\u003d preppedQueryValue);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 49,
      "-": 61
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Updates the Food List to display real-time filter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @param text The input from user which may contain a name of a Food item in FoodRecord"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    List\u003cFood\u003e getSimilarFood(String text);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns the daily calorie goal of the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    DailyGoal getDailyGoal();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns remaining number of calories of the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    double getRemainingCalories();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the FoodRecord."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see Model#getFoodRecord()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ReadOnlyFoodRecord getFoodRecord();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of foods */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodRecord();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ObservableList\u003cConsumedFood\u003e getFilteredDailyList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs\u0027 food record file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 21,
      "ray-97": 2,
      "jeremylow97": 7,
      "eugenetyc": 7,
      "-": 36
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.FoodRecordParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.predicates.FoodRecordContainsFoodNamePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final FoodRecordParser foodRecordParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodRecordParser \u003d new FoodRecordParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public List\u003cFood\u003e getSimilarFood(String foodName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e filteredFood \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        filteredFood \u003d model.getFoodRecord()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .getFoodList().filtered(new FoodRecordContainsFoodNamePredicate(foodName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return filteredFood;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Command command \u003d foodRecordParser.parseCommand(commandText, model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            storage.saveFoodRecord(model.getFoodRecord());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            storage.saveConsumptionRecord(model.getConsumptionRecord());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            storage.saveGoal(model.getDailyGoal());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal getDailyGoal() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return model.getDailyGoal();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public double getRemainingCalories() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return model.getRemainingCalories(LocalDate.now());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return model.getFoodRecord();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodRecord() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return model.getFilteredFoodRecord();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cConsumedFood\u003e getFilteredDailyList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return model.getCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return model.getFoodRecordFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 27,
      "ray-97": 7,
      "jeremylow97": 10,
      "eugenetyc": 9,
      "-": 56
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Clears the food record."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food record has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.setFoodRecord(new FoodRecord());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Deletes a food identified using its displayed index from the food record."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \": Deletes the food identified by the name of the food in the displayed food record.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \"Parameters: \" + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/pizza\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted food: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD \u003d \"This food does not exist in the Food Records\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final Food toDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public DeleteCommand(Food food) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        toDelete \u003d food;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        if (!model.hasFood(toDelete)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new CommandException(MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d model.getExistingFood(toDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 toDelete.equals(((DeleteCommand) other).toDelete)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 4,
      "jeremylow97": 14,
      "-": 30
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Calgo as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "eugenetyc": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ExportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.storage.ExportGenerator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Generates a FoodRecord.txt file in the documents folder showing Food Record entries."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Name, Nutritional Values and Tags are all shown, with Food items in alphabetical order."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully generated FoodRecord.txt in the data/exports folder.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Did not manage to generate FoodRecord.txt.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ReadOnlyFoodRecord foodRecord \u003d model.getFoodRecord();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ExportGenerator exportGenerator \u003d new ExportGenerator(foodRecord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean isSuccessfullyExported \u003d exportGenerator.generateExport();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!isSuccessfullyExported) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 33
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Finds and lists all food in food record whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all entries containing any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"the specified keywords in the Name or one of their Tags, or match the  specified nutritional value.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"Choose 1 of the following parameters: [n/NAME] [cal/CALORIES] [p/PROTEIN] [c/CARBOHYDRATES] [f/FATS] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"[t/TAG]. NAME and TAG are case-insensitive. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cal/150\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Predicate\u003cFood\u003e predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FindCommand(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.updateFilteredFoodRecord(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                String.format(Messages.MESSAGE_FOODS_LISTED_OVERVIEW, model.getFilteredFoodRecord().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof FindCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 16,
      "-": 26
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/GoalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Updates daily caloric goal of user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates your goal of how many calories to consume\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"daily.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Parameters: goal GOAL\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2800\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully updated your daily caloric goal to %1$d.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_FAILURE_TYPE \u003d \"Please key in a non-zero whole number for your \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"daily caloric goal.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_FAILURE_NEGATIVE \u003d \"Please key in a positive whole number for your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"daily caloric goal.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_WARNING \u003d \"That is a really low goal to set. Warning: You may suffer from\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" malnutrition.\" + \"\\n\" + \"Don\u0027t worry! Calgo is here to help you build healthier eating habits.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private final int numCaloriesDaily;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public GoalCommand(int numberCaloriesDaily) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.numCaloriesDaily \u003d numberCaloriesDaily;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        model.updateDailyGoal(this.numCaloriesDaily);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (this.numCaloriesDaily \u003c\u003d 1000) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new CommandResult(MESSAGE_WARNING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, numCaloriesDaily));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                || (other instanceof GoalCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 numCaloriesDaily \u003d\u003d ((GoalCommand) other).numCaloriesDaily); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 53
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_CLEAR_MESSAGE \u003d \"clear:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Clears all entries from the Food Record.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: clear\\n\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_DELETE_MESSAGE \u003d \"delete:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Deletes the specified Food Item from the Food Record.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: delete n/NAME\\n\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_EXIT_MESSAGE \u003d \"exit:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Exits the program.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: exit\\n\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_EXPORT_MESSAGE \u003d \"export:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Saves a human-readable text file (FoodRecords.txt) in the target folder\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"(default: same folder as the Calgo application), containing all Food item records including\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"All Calgo data is also automatically saved after each command.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: export [location/LOCATION]\\n\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_FIND_MESSAGE \u003d \"find:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Finds all Food items whose names contain any of the keyword(s)\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Alternatively, Food items can also be found by entering a specific value of its attributes,\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"i.e. Calories, Proteins, Carbohydrates, or Fats.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: find [cal/CALORIES] [p/PROTEINS] [c/CARBS] [f/FATS]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Alt format: find KEYWORD [MORE_KEYWORDS]\\n\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_GOAL_MESSAGE \u003d \"goal:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Sets a numerical goal for the desired number of calories to be consumed in a day.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"This goal will be used to provide helpful insights for users in the Report.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: goal GOAL\\n\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_LIST_MESSAGE \u003d \"list:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Shows a list of all Food items in the Food Records,\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"with their respective nutritional values of calories, proteins, carbohydrates, and fats.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: list\\n\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_NOM_MESSAGE \u003d \"nom:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Adds a food item into the log which keeps track of what the user has eaten on that day.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: nom [n/NAME] [d/DATE] [portion/PORTION]\\n\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_REPORT_MESSAGE \u003d \"report:\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Given a date, the command generates a document (in pdf format) of relevant insights about\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"the user’s food consumption pattern of the same date.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"report dd-mm-yyyy\\n\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_STOMACH_MESSAGE \u003d \"stomach: \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Displays a list of food items along side how many portions have been consumed on that day.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"For a more detailed statistical report with nutritional values of food consumed, see report command.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: stomach [d/DATE]\\n\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_UPDATE_MESSAGE \u003d \"update:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Updates a Food Item in the Food Record, or creates a new Food Item if one isn\u0027t already present.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: update n/NAME cal/CALORIES p/PROTEINS c/CARBS f/FATS\\n\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_VOMIT_MESSAGE \u003d \"vomit:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Deletes a food item that a user has previously added to the log tracking consumption on that day.\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: vomit [num/INDEX_OF_FOOD] [d/DATE] [portion/PORTION]\\n\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String DEFAULT_HELP_MESSAGE \u003d HELP_CLEAR_MESSAGE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_DELETE_MESSAGE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_EXIT_MESSAGE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_EXPORT_MESSAGE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_FIND_MESSAGE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_GOAL_MESSAGE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_LIST_MESSAGE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_NOM_MESSAGE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_REPORT_MESSAGE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_UPDATE_MESSAGE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_VOMIT_MESSAGE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static final ObservableMap\u003cString, String\u003e internalMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static Set\u003cString\u003e internalSet;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static String filteredGuide;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        //dummy for test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public HelpCommand(String keyword) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        addMessagesToMap();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalSet \u003d setKeySet();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static String getFilteredGuide() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return filteredGuide;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Add all help messages to the internal hashmap."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void addMessagesToMap() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"clear\", HELP_CLEAR_MESSAGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"delete\", HELP_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"exit\", HELP_EXIT_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"export\", HELP_EXPORT_MESSAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"find\", HELP_FIND_MESSAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"goal\", HELP_GOAL_MESSAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"list\", HELP_LIST_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"nom\", HELP_NOM_MESSAGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"report\", HELP_REPORT_MESSAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"stomach\", HELP_STOMACH_MESSAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"update\", HELP_UPDATE_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"vomit\", HELP_VOMIT_MESSAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Sets a given set to the keyset of the internalMap."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * @return Set of the keys."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private Set\u003cString\u003e setKeySet() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return internalMap.keySet();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Obtains a String for the help guide of all commands with the keyword as a substring."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * @return String containing all found commands."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private String printIfSubstring(String keyword) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        requireNonNull(internalSet);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        for (String commandName : internalSet) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            if (!commandName.contains(keyword)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            result \u003d result + internalMap.get(commandName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        if (keyword \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            filteredGuide \u003d DEFAULT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            filteredGuide \u003d printIfSubstring(keyword);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 143,
      "buddhavineeth": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Lists all foods in the food record to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all foods\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.updateFilteredFoodRecord(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 21
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/NomCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Updates the food consumed on a given day."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class NomCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nom\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to your consumption record. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_PORTION + \"PORTION\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Kiwi \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2020-03-14 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_PORTION + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully consumed %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final DailyFoodLog foodlog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Food foodConsumed;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public NomCommand(DailyFoodLog foodLog, Food foodConsumed) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        CollectionUtil.requireAllNonNull(foodLog, foodConsumed);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodlog \u003d foodLog;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodConsumed \u003d foodConsumed;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!model.hasLogWithSameDate(foodlog)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            model.addLog(foodlog);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            model.updateLog(foodlog);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                foodlog.getLocalDate()); // updates display"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, foodConsumed));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        // , dayConsumed.getPortion(foodConsumed), dayConsumed.getLocalDate()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                || (other instanceof NomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 foodConsumed.equals(((NomCommand) other).foodConsumed)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 foodlog.equals(((NomCommand) other).foodlog));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 7,
      "ray-97": 54
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ReportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.ReportGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Generates a report of all the food consumed by User on any given date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Date is in YYYY-MM-DD format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates a report containing statistics of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"all foods consumed on any given date and saves the report in a .txt file in the same folder as\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" jar file.\\n \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2020-05-27\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_REPORT_SUCCESS \u003d \"Successfully generated a report in the data/reports folder \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"for the following date: %tF\" + \".\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_REPORT_FAILURE \u003d \"Did not manage to generate report.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private LocalDate queryDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ReportCommand(LocalDate queryDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.queryDate \u003d queryDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!model.hasLogWithSameDate(queryDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new CommandException(MESSAGE_REPORT_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        DailyGoal dailyGoal \u003d model.getDailyGoal();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ReadOnlyConsumptionRecord consumptionRecord \u003d model.getConsumptionRecord();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ReportGenerator reportGenerator \u003d new ReportGenerator(queryDate, dailyGoal, consumptionRecord);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        boolean isGenerated \u003d reportGenerator.generateReport();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!isGenerated) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new CommandException(MESSAGE_REPORT_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REPORT_SUCCESS, this.queryDate));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                || (other instanceof ReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 queryDate.equals(((ReportCommand) other).queryDate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 58,
      "ray-97": 5
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/StomachCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Displays all food consumed on a given day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class StomachCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stomach\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Display all food consumed\"; // on %s"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Display food items consumed on selected date. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2020-14-03 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public StomachCommand(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "ray-97": 33
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Updates Food Record with a given food object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the food entered into the Food Record.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \" If the food entered already exists, it will be overwritten by input values .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CALORIES + \"CALORIES \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_PROTEIN + \"PROTEIN \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CARBOHYDRATE + \"CARBOHYDRATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_FAT + \"FAT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Kiwi \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CALORIES + \"150 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_PROTEIN + \"2 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CARBOHYDRATE + \"25 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_FAT + \"3 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Green \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Sweet\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Updated all foods into Food Records:\\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            \"Updated existing food item in Food Record:\\n%1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_UPDATE_EXISTING_FOOD_SAME_VALUES_FAILED \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        \"The nutritional value that you have entered is exactly the same as %1$s in the FoodRecord!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Creates an UpdateCommand to update the specified {@code Food}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public UpdateCommand(Food food) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (model.hasFood(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            Food existingFood \u003d model.getExistingFood(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (existingFood.equals(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        MESSAGE_UPDATE_EXISTING_FOOD_SAME_VALUES_FAILED, existingFood.getName().fullName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            model.setFood(existingFood, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            model.updateConsumedLists(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            model.updateFilteredFoodRecord(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            model.addFood(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || (other instanceof UpdateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((UpdateCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 8,
      "ray-97": 2,
      "eugenetyc": 39,
      "jeremylow97": 28
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/VomitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Command to decrement quantity of consumption of a food item from a given day."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class VomitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"vomit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a certain amount of food consumed. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_POSITION + \"POSITION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_PORTION + \"PORTION\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_POSITION + \"1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2019-01-03 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_PORTION + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully throw up %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final DailyFoodLog foodLog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Food foodVomited;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public VomitCommand(DailyFoodLog foodLog, Food foodVomited) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        CollectionUtil.requireAllNonNull(foodLog, foodVomited);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodLog \u003d foodLog;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodVomited \u003d foodVomited;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateLog(foodLog);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                foodLog.getLocalDate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, foodVomited));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 7,
      "ray-97": 41
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final int INITIAL_SIZE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the argument multimap contains only 1 user input field, of 1 Prefix."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the argument multimap contains only 1 user input field, of 1 Prefix."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean containsSingleUserInputField() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // the argument multimap begins with initial size 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // therefore, the actual size is not 1, but 2 for a single user input field for 1 Prefix."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (this.argMultimap.size() !\u003d INITIAL_SIZE + 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (List\u003cString\u003e stringList : this.argMultimap.values()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (stringList.size() \u003e 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                // single input, single field entry"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 22,
      "jeremylow97": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"cal/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_PROTEIN \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_CARBOHYDRATE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_FAT \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_POSITION \u003d new Prefix(\"num/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_PORTION \u003d new Prefix(\"portion/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 4,
      "eugenetyc": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        if (!isNamePrefixPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Calorie calorie \u003d new Calorie(\"0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Protein protein \u003d new Protein(\"0\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Carbohydrate carbohydrate \u003d new Carbohydrate(\"0\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Fat fat \u003d new Fat(\"0\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new Food(name, calorie, protein, carbohydrate, fat, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new DeleteCommand(food);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns true if the name prefix is present {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static boolean isNamePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 15,
      "jeremylow97": 28,
      "-": 16
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CalorieContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CarbohydrateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.FatContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.ProteinContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_CALORIES,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                        CliSyntax.PREFIX_PROTEIN, CliSyntax.PREFIX_CARBOHYDRATE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                        CliSyntax.PREFIX_FAT, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assert (argMultimap !\u003d null) : \"The current ArgumentMultimap is null.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // argMultimap should contain only 1 prefix at this point"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Predicate\u003cFood\u003e pred \u003d generateFindCommandPredicate(argMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new FindCommand(pred);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the corresponding type of Predicate based on the single prefix entered by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param am the Argument Multimap we search through to produce the Predicate."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the corresponding type of Predicate based on the single prefix entered by the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException is thrown when there is more than 1 Prefix used."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Predicate\u003cFood\u003e generateFindCommandPredicate(ArgumentMultimap am) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!am.containsSingleUserInputField()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_EXCESS_FIND_FILTERS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // below are the specific checks for the single Prefix of the Argument Multimap am"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return generateSpecificPredicate(am);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Creates the Prefix-specific Predicate that produces a particular find command result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param am the ArgumentMultimap we search through for the Prefix."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the Prefix-specific Predicate that produces a particular find command result."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException when no allowed Prefix is present."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Predicate\u003cFood\u003e generateSpecificPredicate(ArgumentMultimap am) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // each specific Prefix produces a specific class of Predicate\u003cFood\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_NAME)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Name name \u003d ParserUtil.parseName(am.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new NameContainsKeywordsPredicate(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_CALORIES)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Calorie calorie \u003d ParserUtil.parseCalorie(am.getValue(CliSyntax.PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new CalorieContainsKeywordsPredicate(calorie);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_PROTEIN)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Protein protein \u003d ParserUtil.parseProtein(am.getValue(CliSyntax.PREFIX_PROTEIN).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new ProteinContainsKeywordsPredicate(protein);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_CARBOHYDRATE)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Carbohydrate carbohydrate \u003d ParserUtil.parseCarbohydrate(am.getValue(CliSyntax.PREFIX_CARBOHYDRATE).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new CarbohydrateContainsKeywordsPredicate(carbohydrate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_FAT)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Fat fat \u003d ParserUtil.parseFat(am.getValue(CliSyntax.PREFIX_FAT).get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new FatContainsKeywordsPredicate(fat);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_TAG)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e(ParserUtil.parseTags(am.getAllValues(CliSyntax.PREFIX_TAG)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new TagContainsKeywordsPredicate(tagList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // should never arrive here"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        throw new ParseException(\"Please try again, with a different input following the correct format.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 94,
      "-": 20
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/FoodRecordParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.NomCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.StomachCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.VomitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodRecordParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Command parseCommand(String userInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        case StomachCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return new StomachCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        case NomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return new NomCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        case VomitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return new VomitCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new ReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new ExportCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 1,
      "buddhavineeth": 25,
      "ray-97": 10,
      "eugenetyc": 5,
      "jeremylow97": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/GoalCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Parses input arguments and creates a new GoalCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class GoalCommandParser implements Parser\u003cGoalCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoalCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * and returns a GoalCommand object for execution"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or is less than or equal to 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public GoalCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String[] splitArgs \u003d args.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (trimmedArgs.isEmpty() || splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int targetCalories \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            targetCalories \u003d Integer.parseInt(splitArgs[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(GoalCommand.MESSAGE_FAILURE_TYPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (targetCalories \u003c\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(GoalCommand.MESSAGE_FAILURE_NEGATIVE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new GoalCommand(targetCalories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 37
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/NomCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PORTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.NomCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Parses input arguments in order to create a new NomCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class NomCommandParser implements Parser\u003cNomCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_EMPTY_NAME \u003d \"You can\u0027t eat that because it does not exist in food record.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_NON_POSITIVE_PORTION \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \"Portion should be a positive number.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public NomCommandParser(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NomCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param args a String of arguments provided by user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a NomCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException if user does not conform to expected format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public NomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_PORTION, PREFIX_RATING,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_CALORIES, PREFIX_PROTEIN, PREFIX_CARBOHYDRATE, PREFIX_FAT, PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, NomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d new DailyFoodLog();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d foodLog.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (model.hasLogWithSameDate(foodLog)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d model.getLogByDate(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        double portion \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PORTION).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            portion \u003d ParserUtil.parsePortion(argMultimap.getValue(PREFIX_PORTION).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (portion \u003c\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_NON_POSITIVE_PORTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cFood\u003e optionalFood \u003d model.getFoodByName("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!optionalFood.isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assert (!optionalFood.get().equals(Optional.empty()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foodLog \u003d foodLog.consume(optionalFood.get(), portion);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            int rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d foodLog.addRating(optionalFood.get(), rating);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new NomCommand(foodLog, optionalFood.get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 21,
      "ray-97": 67
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Position should be a positive number.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String MESSAGE_INVALID_DATE \u003d String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \"Invalid date entered. Give an actual date and follow the format of %s\" , DATE_PATTERN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String MESSAGE_INVALID_PORTION \u003d \"Portion is either a number or left empty.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String MESSAGE_INVALID_POSITION \u003d \"Position should be an integer!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String MESSAGE_INVALID_RATING \u003d \"Rating should a an integer between 0 to 10.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Instantiate LocalDate object from date represented in String"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param date date in String representation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return LocalDate object with date equivalent to that expressed in argument"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException if given String date is in invalid format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (trimmedDate.equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return LocalDate.parse(trimmedDate, formatter);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns true if given String can be parsed as a number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param strNum a String argument to be parsed as a number"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return true if the input can be parsed as a number"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static boolean isNumeric(String strNum) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (strNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            double d \u003d Double.parseDouble(strNum);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns true if given String can be parsed as an Integer"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param strNum a String argument to be parsed as a Integer"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return true if the input can be parsed as a Integer"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static boolean isInteger(String strNum) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (strNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            int d \u003d Integer.parseInt(strNum);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses String portion as a double"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param portion a String representation of portion argument"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return double representation of portion argument"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException if given argument cannot be parsed as a number"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static double parsePortion(String portion) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(portion);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String trimmedPortion \u003d portion.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        boolean isInvalidPortion \u003d !isNumeric(trimmedPortion) \u0026\u0026 trimmedPortion.length() \u003e 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (isInvalidPortion) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PORTION);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return isNumeric(trimmedPortion) ? Double.parseDouble(trimmedPortion) : 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses a String rating as an int."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param rating a String representation of rating argument"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return double representation of rating argument"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException if given argument cannot be parsed as an int"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static int parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        boolean withinRange \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        int parsedInt \u003d -1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (isInteger(trimmedRating)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            parsedInt \u003d Integer.parseInt(trimmedRating);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            withinRange \u003d parsedInt \u003e\u003d 0 \u0026\u0026 parsedInt \u003c\u003d 10;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!withinRange) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_RATING);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return parsedInt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Parses given String representation of position into an OptionalInt"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Position refers to index the food object has in food record display"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param position String representation of position"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return OptionalInt representation of position"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static int parsePosition(String position) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(position);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String trimmedPosition \u003d position.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        // We do not check range of position here because only foods in DailyFoodLog knows."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!isInteger(trimmedPosition)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_POSITION);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Integer.parseInt(trimmedPosition);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String calorie} into a {@code Calorie}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException if the given {@code calorie} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Calorie parseCalorie(String calorie) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedCalorie \u003d calorie.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Calorie.isValidCalorie(trimmedCalorie)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Calorie(trimmedCalorie);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String protein} into an {@code Protein}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException if the given {@code protein} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Protein parseProtein(String protein) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(protein);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedProtein \u003d protein.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Protein.isValidProtein(trimmedProtein)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Protein(trimmedProtein);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String carbohydrate} into an {@code Carbohydrate}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException if the given {@code carbohydrate} is invalid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Carbohydrate parseCarbohydrate(String carbohydrate) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(carbohydrate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedCarbohydrate \u003d carbohydrate.trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Fat.isValidFat(trimmedCarbohydrate)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Carbohydrate(trimmedCarbohydrate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String fat} into a {@code Fat}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException if the given {@code fat} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Fat parseFat(String fat) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(fat);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedFat \u003d fat.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Fat.isValidFat(trimmedFat)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Fat(trimmedFat);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns whether all Prefixes appear in the Argument Multimap."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param argumentMultimap the Argument Multimap we search each Prefix through."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param prefixes Each Prefix we need to search for matches."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether every Prefix appears in the Argument Multimap."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 33,
      "ray-97": 101,
      "eugenetyc": 46,
      "-": 89
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ReportCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Parses input arguments in order to create a new ReportCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ReportCommandParser implements Parser\u003cReportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReportCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param args a String of arguments provided by user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return a ReportCommand object for execution"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException if user does not conform to expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    ReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // at this breakpoint, PREFIX_DATE is present in args"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        LocalDate queryDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new ReportCommand(queryDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 48
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/StomachCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PORTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.StomachCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Parses input arguments and creates a new StomachCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class StomachCommandParser implements Parser\u003cStomachCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StomachCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param args a String of arguments provided by user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a StomachCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public StomachCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_PORTION, PREFIX_RATING,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_CALORIES, PREFIX_PROTEIN, PREFIX_CARBOHYDRATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_FAT, PREFIX_POSITION, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new StomachCommand(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 24,
      "ray-97": 20
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/UpdateCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " *  Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_CALORIES,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        CliSyntax.PREFIX_PROTEIN, CliSyntax.PREFIX_CARBOHYDRATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        CliSyntax.PREFIX_FAT, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_CALORIES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                CliSyntax.PREFIX_PROTEIN, CliSyntax.PREFIX_FAT, CliSyntax.PREFIX_CARBOHYDRATE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            // if not all prefixes are present then throw error"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String nameInTitleCase \u003d convertToTitleCase(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name name \u003d ParserUtil.parseName(nameInTitleCase);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorie(argMultimap.getValue(CliSyntax.PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Protein protein \u003d ParserUtil.parseProtein(argMultimap.getValue(CliSyntax.PREFIX_PROTEIN).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Carbohydrate carbohydrate \u003d ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                .parseCarbohydrate(argMultimap.getValue(CliSyntax.PREFIX_CARBOHYDRATE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Fat fat \u003d ParserUtil.parseFat(argMultimap.getValue(CliSyntax.PREFIX_FAT).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new Food(name, calorie, protein, carbohydrate, fat, tagList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new UpdateCommand(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses the foodName and returns it back in Title Case."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @param foodName the foodName in non-titled case"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @return the foodName back in Title Case"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static String convertToTitleCase(String foodName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .stream(foodName.split(\" \"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .map(word -\u003e word.isEmpty()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        ? word"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        : Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 27,
      "jeremylow97": 52
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/VomitCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PORTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.VomitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Parses input arguments and creates a new VomitCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class VomitCommandParser implements Parser\u003cVomitCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_FOOD_NOT_IN_LOG \u003d \"You cannot vomit something that\u0027s not in your stomach!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_LOG \u003d \"You have not eaten on %s yet!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_POSITION \u003d \"Position required an integer within range of list!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public VomitCommandParser(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the VomitCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param args given String of arguments."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a VomitCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public VomitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_PORTION, PREFIX_RATING,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_CALORIES, PREFIX_PROTEIN, PREFIX_CARBOHYDRATE, PREFIX_FAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_POSITION, PREFIX_TAG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_POSITION)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, VomitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d new DailyFoodLog();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d foodLog.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        OptionalDouble portion \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PORTION).isPresent()) { // we need to check if \"\" is present"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            double parsedValue \u003d ParserUtil.parsePortion(argMultimap.getValue(PREFIX_PORTION).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            portion \u003d OptionalDouble.of(parsedValue);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        int indexOfFood \u003d ParserUtil.parsePosition(argMultimap.getValue(PREFIX_POSITION).get()) - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cFood\u003e optionalFood;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!model.hasLogWithSameDate(foodLog)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NONEXISTENT_LOG, foodLog.getLocalDate()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foodLog \u003d model.getLogByDate(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            optionalFood \u003d foodLog.getFoodByIndex(indexOfFood);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d foodLog.vomit(optionalFood.get(), portion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_FOOD_NOT_IN_LOG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_POSITION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assert (!optionalFood.get().equals(Optional.empty()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new VomitCommand(foodLog, optionalFood.get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 20,
      "ray-97": 74
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ConsumptionRecord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.UniqueDateToLogMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Wraps all data at the consumption record level."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class ConsumptionRecord implements ReadOnlyConsumptionRecord {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final UniqueDateToLogMap dateToLogMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap \u003d new UniqueDateToLogMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Creates a ConsumptionRecord using the DailyFoodLog objects in the {@code toBeCopied}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord(ReadOnlyConsumptionRecord toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Resets the existing data of this {@code ConsumptionRecord} with {@code newData}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void resetData(ReadOnlyConsumptionRecord newData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.setDateToLogMap(newData.getDateToLogMap());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public HashMap\u003cLocalDate, DailyFoodLog\u003e getDateToLogMap() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.getDateToLogMap();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.addLog(foodLog);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.hasLogWithSameDate(foodLog);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog getLogByDate(LocalDate date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.getLogByDate(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates a log in {@code dateToLogMap}, replacing it with {@code logAfterConsumption}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param logAfterConsumption a DailyFoodLog object reflecting the food recently consumed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateLog(DailyFoodLog logAfterConsumption) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.updateLog(logAfterConsumption);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateConsumedLists(Food food) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.updateMapWithFood(food);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setDailyListDate(LocalDate date) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.setDailyListDate(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cConsumedFood\u003e getDailyList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.asUnmodifiableDailyList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public List\u003cDailyFoodLog\u003e getDailyFoodLogs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.getDailyFoodLogs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                || (other instanceof ConsumptionRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 dateToLogMap.equals(((ConsumptionRecord) other).dateToLogMap));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 99
    }
  },
  {
    "path": "src/main/java/life/calgo/model/FoodRecord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Wraps all data at the food record level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodRecord implements ReadOnlyFoodRecord {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final UniqueFoodList foodList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodRecord() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Creates a FoodRecord using the Food objects in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodRecord(ReadOnlyFoodRecord toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the contents of the food list with {@code foods}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodList(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodList.setFoods(foods);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Resets the existing data of this {@code FoodRecord} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void resetData(ReadOnlyFoodRecord newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        setFoodList(newData.getFoodList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    //// food-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the food record."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodList.contains(food);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Adds a food to the food record."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food must not already exist in the food record."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void addFood(Food p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the given food {@code target} in the FoodRecord\u0027s foodList with {@code editedFood}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code target} must exist in the food record."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food record."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList.setFood(target, editedFood);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Removes {@code key} from this {@code FoodRecord}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code key} must exist in the food record."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void removeFood(Food key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the existing Food object in Food Record."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Food getExistingFood(Food toGet) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return foodList.getExistingFood(toGet);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByName(Name name) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodList.getFoodByName(name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a line-by-line representation of the FoodRecord, displaying all its details."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the line-by-line representation of the FoodRecord."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Food f: foodList.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            result +\u003d f + \"\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof FoodRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 foodList.equals(((FoodRecord) other).foodList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "ray-97": 6,
      "eugenetyc": 124,
      "jeremylow97": 7
    }
  },
  {
    "path": "src/main/java/life/calgo/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Predicate\u003cConsumedFood\u003e PREDICATE_SHOW_ALL_CONSUMED_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs\u0027 food record file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the user prefs\u0027 food record file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setFoodRecordFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ReadOnlyConsumptionRecord getConsumptionRecord();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces food record data with the data in {@code foodRecord}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setFoodRecord(ReadOnlyFoodRecord foodRecord);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /** Returns the FoodRecord */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ReadOnlyFoodRecord getFoodRecord();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /** Returns the existing Food item in FoodRecord */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    Food getExistingFood(Food toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Deletes the given food."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The person must exist in the food record."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void deleteFood(Food target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Adds the given food."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code food} must not already exist in the food record."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code target} must exist in the food record."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food record."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setFood(Food target, Food editedFood);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Optional\u003cFood\u003e getFoodByName(Name parseName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    boolean hasLogWithSameDate(DailyFoodLog foodLog);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    boolean hasLogWithSameDate(LocalDate date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void addLog(DailyFoodLog foodLog);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void updateLog(DailyFoodLog logAfterConsumption);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    DailyFoodLog getLogByDate(LocalDate localDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public double getRemainingCalories(LocalDate date);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food record. */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodRecord();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Updates the filter of the filtered food record to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void updateFilteredFoodRecord(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ObservableList\u003cConsumedFood\u003e getCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void updateCurrentFilteredDailyList(Predicate\u003cConsumedFood\u003e predicate, LocalDate date) throws CommandException;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void updateConsumedLists(Food food);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    DailyGoal updateDailyGoal(int targetDailyCalories);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    boolean isGoalMade();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    DailyGoal getDailyGoal();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 8,
      "ray-97": 32,
      "eugenetyc": 84,
      "jeremylow97": 3
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.ReportGenerator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents the in-memory model of the food record data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final FoodRecord foodRecord;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final ConsumptionRecord consumptionRecord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final FilteredList\u003cConsumedFood\u003e currentFilteredDailyList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private DailyGoal targetDailyCalories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Initializes a ModelManager with the given foodRecord and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ModelManager(ReadOnlyFoodRecord readOnlyFoodRecord, ReadOnlyConsumptionRecord readOnlyConsumptionRecord,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs, ReadOnlyGoal readOnlyGoal) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireAllNonNull(readOnlyFoodRecord, readOnlyConsumptionRecord, userPrefs, readOnlyGoal);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        logger.fine(\"Initializing with food record: \" + readOnlyFoodRecord + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                + \" and goal \" + readOnlyGoal);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecord \u003d new FoodRecord(readOnlyFoodRecord);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.consumptionRecord \u003d new ConsumptionRecord(readOnlyConsumptionRecord);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d new DailyGoal(readOnlyGoal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.foodRecord.getFoodList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        currentFilteredDailyList \u003d new FilteredList\u003c\u003e(this.consumptionRecord.getDailyList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        refreshCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this(new FoodRecord(), new ConsumptionRecord(), new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefs.getFoodRecordFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodRecordFilePath(Path foodRecordFilePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(foodRecordFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        userPrefs.setFoodRecordFilePath(foodRecordFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodRecord \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ReadOnlyConsumptionRecord getConsumptionRecord() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodRecord(ReadOnlyFoodRecord foodRecord) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecord.resetData(foodRecord);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord.hasFood(food);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Food getExistingFood(Food toGet) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return foodRecord.getExistingFood(toGet);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodRecord.removeFood(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodRecord.addFood(food);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        updateFilteredFoodRecord(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodRecord.setFood(target, editedFood);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Day Model classes\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByName(Name name) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodRecord.getFoodByName(name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord.hasLogWithSameDate(foodLog);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord.hasLogWithSameDate(new DailyFoodLog().setDate(date));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.addLog(foodLog);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateLog(DailyFoodLog logToUpdate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.updateLog(logToUpdate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog getLogByDate(LocalDate localDate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord.getLogByDate(localDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public double getRemainingCalories(LocalDate date) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyGoal goal \u003d getDailyGoal();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog todayFoodLog \u003d getLogByDate(date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (goal \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        // user did not consume anything today"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (todayFoodLog \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return goal.getTargetDailyCalories();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ReportGenerator reportGenerator \u003d new ReportGenerator(date, goal, getConsumptionRecord());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        reportGenerator.generateReport();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return reportGenerator.calculateRemainingCalories();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Updates ModelManager\u0027s DailyGoal to the new targetDailyCalories"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param targetDailyCalories the new targeted number of calories to consume each day by user"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return the updated DailyGoal object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal updateDailyGoal(int targetDailyCalories) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (isGoalMade()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            this.targetDailyCalories \u003d this.targetDailyCalories.updateDailyGoal(targetDailyCalories);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            this.targetDailyCalories \u003d new DailyGoal(targetDailyCalories);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.targetDailyCalories;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Checks if goal already exists"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return true if there is already some goal"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean isGoalMade() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.targetDailyCalories !\u003d null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal getDailyGoal() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.targetDailyCalories;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Consumption Record Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ConsumedFood}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cConsumedFood\u003e getCurrentFilteredDailyList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return currentFilteredDailyList;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateCurrentFilteredDailyList(Predicate\u003cConsumedFood\u003e predicate, LocalDate date)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.setDailyListDate(date);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        currentFilteredDailyList.setPredicate(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates existing ConsumedFood items having same name as {@code food} in consumption record for display."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food food that has been updated."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateConsumedLists(Food food) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.updateConsumedLists(food);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        refreshCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Causes FilteredList to be updated to reflect latest changes."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private void refreshCurrentFilteredDailyList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS, LocalDate.now());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.warning(\"Error refreshing filtered list.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food Record Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * {@code versionedFoodRecord}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodRecord() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateFilteredFoodRecord(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord.equals(other.foodRecord)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 filteredFoods.equals(other.filteredFoods);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 38,
      "ray-97": 119,
      "eugenetyc": 36,
      "jeremylow97": 5,
      "-": 94
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyConsumptionRecord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Unmodifiable view of a consumption record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public interface ReadOnlyConsumptionRecord {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns an unmodifiable view of consumedFood in consumption record."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * This list will not contain any duplicate foods."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ObservableList\u003cConsumedFood\u003e getDailyList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a collection of LocalDate to DailyFoodLog key-value pairs in consumption record."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * This HashMap will not contain any duplicate dates."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    HashMap\u003cLocalDate, DailyFoodLog\u003e getDateToLogMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    List\u003cDailyFoodLog\u003e getDailyFoodLogs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 29
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyFoodRecord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Unmodifiable view of a food record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public interface ReadOnlyFoodRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns an unmodifiable view of the food record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This list will not contain any duplicate foods."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 15
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyGoal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Unmodifiable view of a daily caloric goal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public interface ReadOnlyGoal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns an unmodifiable view of the daily caloric goal."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Integer getGoal();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 12
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/life/calgo/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Path foodRecordFilePath \u003d Paths.get(\"data\" , \"foodrecord.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Path consumptionRecordFilePath \u003d Paths.get(\"data\", \"consumptionrecord.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private Path goalFilePath \u003d Paths.get(\"data\", \"goal.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        setFoodRecordFilePath(newUserPrefs.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecordFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Path getConsumptionRecordFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecordFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Path getGoalFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goalFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodRecordFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecordFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 foodRecordFilePath.equals(o.foodRecordFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return Objects.hash(guiSettings, foodRecordFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + foodRecordFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 7,
      "ray-97": 3,
      "eugenetyc": 9,
      "-": 78
    }
  },
  {
    "path": "src/main/java/life/calgo/model/day/DailyFoodLog.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A data structure that stores a map of Food to portion and Food to rating for a certain date where food is consumed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class DailyFoodLog {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private final LinkedHashMap\u003cFood, Double\u003e foods;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog(LinkedHashMap\u003cFood, Double\u003e foods,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings, LocalDate localDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireAllNonNull(foods, ratings, localDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foods \u003d foods;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.ratings \u003d ratings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a new DailyFoodLog with same data fields, but different date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param date date you wish to set the log to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a replica of this DailyFoodLog, with different date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog setDate(LocalDate date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(copyFoods(), copyRatings(), date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Adds food into foods LinkedHashMap."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food food that has been consumed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param quantity number of portions of food that has been consumed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return an updated DailyFoodLog object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog consume(Food food, double quantity) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(this.add(food, quantity), copyRatings(), localDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method for consume."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, Double\u003e add(Food foodToAdd, double quantity) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d copyFoods();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (foods.containsKey(foodToAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(foodToAdd, quantity + foods.get(foodToAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(foodToAdd, quantity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(foodToAdd, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Decreases portion of food consumed in the key value pair, or totally remove the entry."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food food that is to be removed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param quantity number of portions of food that should be removed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return an updated DailyFoodLog object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog vomit(Food food, OptionalDouble quantity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(this.remove(food, quantity), copyRatings(), localDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method for vomit."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, Double\u003e remove(Food foodToRemove, OptionalDouble quantity) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d copyFoods();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        boolean shouldRemoveCompletely \u003d quantity.isEmpty() || quantity.getAsDouble() \u003e\u003d foods.get(foodToRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!foods.containsKey(foodToRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else if (shouldRemoveCompletely) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.remove(foodToRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(foodToRemove, new ArrayList\u003c\u003e()); // Reset ratings when vomit all."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(foodToRemove, foods.get(foodToRemove) - quantity.getAsDouble());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Replaces food in current DailyFoodLog with updated food."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param newFood food with updated attribute(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return an updated DailyFoodLog object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog updateFoodWithSameName(Food newFood) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d copyFoods();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d copyRatings();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        OptionalDouble portion \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArrayList\u003cInteger\u003e rating \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.foods.keySet()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (food.isSameFood(newFood)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                portion \u003d OptionalDouble.of(foods.remove(food));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                rating \u003d new ArrayList\u003c\u003e(this.ratings.get(food));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ratings.remove(food);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (portion.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(newFood, portion.getAsDouble());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(newFood, rating);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(foods, ratings, localDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * An accessor method to get the set of food objects in the data structure."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return set of food objects"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Set\u003cFood\u003e getFoods() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.foods.keySet()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(food, this.foods.get(food));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return foods.keySet();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Retrieves a Food object by its position in the LinkedHashMap."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param index zero based index of the food object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a food object within an optional wrapper."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByIndex(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cFood\u003e temp \u003d new ArrayList\u003c\u003e(foods.keySet());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Food food \u003d (Food) temp.get(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Optional.of(food);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * An accessor method to get the portion consumed of a given food object."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param food food consumed"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return portion of food consumed in DailyFoodLog"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public double getPortion(Food food) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!foods.containsKey(food)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods.get(food);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Adds an Integer into the list of ratings related to a Food object."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food food that receives rating."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param rating rating given to the food."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return DailyFoodLog object with rating added."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog addRating(Food food, int rating) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d copyRatings();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.get(food).add(rating);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(copyFoods(), ratings, localDate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * An accessor method to get rating that is to be displayed for a given food object."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food food that rating is for."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a double representing the rating to display."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public double getRating(Food food) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return getMeanRating(food);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method that returns a rating representing the list of ratings."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private double getMeanRating(Food food) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        OptionalDouble average \u003d ratings.get(food).stream().mapToInt(i -\u003e i).average();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (average.isEmpty()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return average.getAsDouble();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a copy of this DailyFoodLog\u0027s ratings."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e copyRatings() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.ratings.keySet()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(food.copy(), new ArrayList\u003c\u003e(this.ratings.get(food)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return ratings;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a copy of this DailyFoodLog\u0027s foods."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LinkedHashMap\u003cFood, Double\u003e copyFoods() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.foods.keySet()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(food.copy(), this.foods.get(food));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a copy of this DailyFoodLog."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog copy() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(copyFoods(), copyRatings(), localDate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns true if both DailyFoodLog have the same name and data fields."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!(other instanceof DailyFoodLog)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog otherFoodLog \u003d (DailyFoodLog) other;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return otherFoodLog.getLocalDate().equals(getLocalDate())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 otherFoodLog.copyFoods().equals(copyFoods())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 otherFoodLog.copyRatings().equals(copyRatings());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 28,
      "ray-97": 219
    }
  },
  {
    "path": "src/main/java/life/calgo/model/day/DailyGoal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Represents the daily number of calories the user is aiming to consume."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class DailyGoal implements ReadOnlyGoal {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int DUMMY_VALUE \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Daily caloric goals should be positive integers. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"The general rule of thumb is 2000 calories for females and 2500 calories for males.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private int targetDailyCalories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal(int numCalories) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d numCalories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal(ReadOnlyGoal readOnlyGoal) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d readOnlyGoal.getGoal();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d DUMMY_VALUE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Changes \u003ccode\u003etargetDailyCalories\u003c/code\u003e  to \u003ccode\u003enewTarget\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param newTarget the new desired number of calories to consume each day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return update on successful change of daily goal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal updateDailyGoal(int newTarget) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new DailyGoal(newTarget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static boolean isValidGoal(int targetDailyCalories) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return targetDailyCalories \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public int getTargetDailyCalories() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.targetDailyCalories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return \"Calorie goal: \" + String.valueOf(this.targetDailyCalories);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Integer getGoal() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return targetDailyCalories;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 1,
      "buddhavineeth": 52
    }
  },
  {
    "path": "src/main/java/life/calgo/model/day/UniqueDateToLogMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A data structure to hold date keys which have corresponding food consumed as their values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class UniqueDateToLogMap {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final HashMap\u003cLocalDate, DailyFoodLog\u003e internalMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final ObservableList\u003cConsumedFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final ObservableList\u003cConsumedFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog getLogByDate(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalMap.get(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public List\u003cDailyFoodLog\u003e getDailyFoodLogs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new ArrayList\u003c\u003e(internalMap.values());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns true if internalMap contains a DailyFoodLog with same date as foodLog."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalMap.containsKey(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Populates internalMap with LocalDate and DailyFoodLog key value pairs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param dateToLogMap the HashMap containing data to populate internalMap."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setDateToLogMap(HashMap\u003cLocalDate, DailyFoodLog\u003e dateToLogMap) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (DailyFoodLog dailyFoodLog : dateToLogMap.values()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            internalMap.put(dailyFoodLog.getLocalDate() , dailyFoodLog.copy());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns key value pairs inside internalMap as a HashMap."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public HashMap\u003cLocalDate, DailyFoodLog\u003e getDateToLogMap() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        HashMap\u003cLocalDate, DailyFoodLog\u003e copy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (DailyFoodLog dailyFoodLog : internalMap.values()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            copy.put(dailyFoodLog.getLocalDate(), dailyFoodLog.copy());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates every DailyFoodLog in internalMap with respective food item that is updated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateMapWithFood(Food food) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (DailyFoodLog log: internalMap.values()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            internalMap.put(log.getLocalDate(), log.updateFoodWithSameName(food));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalMap.put(foodLog.getLocalDate(), foodLog);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * updates internal key-value pair by updating the value of the given date key"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param logAfterConsumption the updated day object after consuming a certain food"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateLog(DailyFoodLog logAfterConsumption) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireAllNonNull(logAfterConsumption);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalMap.put(logAfterConsumption.getLocalDate(), logAfterConsumption);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Sets internalList to reflect a DailyFoodLog with ConsumedFood items."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param date date of DailyFoodLog be reflected."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws CommandException if user requests to display an empty DailyFoodLog."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setDailyListDate(LocalDate date) throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!internalMap.containsKey(date)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new CommandException(String.format(\"You have not consumed anything on %s yet\", date));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Set\u003cFood\u003e foods \u003d internalMap.get(date).getFoods();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!foods.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            for (Food food : foods) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                DailyFoodLog foodLog \u003d internalMap.get(date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                double portion \u003d foodLog.getPortion(food);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                double rating \u003d foodLog.getRating(food);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                internalList.add(new ConsumedFood(food, portion, rating, date));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cConsumedFood\u003e asUnmodifiableDailyList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                || (other instanceof UniqueDateToLogMap // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 internalMap.equals(((UniqueDateToLogMap) other).internalMap));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalMap.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 125
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Calorie.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Foods\u0027s caloric content in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalorie(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \"Calorie should only contain numbers and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code Calorie}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param caloricValue A valid calorie amount."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Calorie(String caloricValue) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(caloricValue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidCalorie(caloricValue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d caloricValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Calorie."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidCalorie(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Calorie // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Calorie) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 14,
      "-": 34
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Carbohydrate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s carbohydrate content in grams in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCarbohydrate(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Carbohydrate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \"Carbohydrate should only contain numbers and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code Carbohydrate}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param carbohydrateGrams A valid carbohydrate amount in grams."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Carbohydrate(String carbohydrateGrams) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(carbohydrateGrams);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(isValidCarbohydrate(carbohydrateGrams), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d carbohydrateGrams;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Carbohydrate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidCarbohydrate(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Carbohydrate // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Carbohydrate) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 51
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/ConsumedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * To represent food objects that have been consumed by the user"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class ConsumedFood extends Food {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final double portion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final double rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumedFood(Food food, double portion, double rating, LocalDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        super(food.getName(), food.getCalorie(), food.getProtein(), food.getCarbohydrate(),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                food.getFat(), food.getTags());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.portion \u003d portion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public double getPortion() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return this.portion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public String getRating() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return rating \u003d\u003d -1 ? \"Not available yet\" : String.format(\"%.2f\", rating) + \"/10\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public int compareTo(Food other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ConsumedFood otherConsumedFood \u003d (ConsumedFood) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return Double.compare(this.rating, otherConsumedFood.rating);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 11,
      "ray-97": 28
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Fat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s fat content in grams in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFat(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Fat {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \"Fat should only contain numbers and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code Fat}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param fatGrams A valid fat amount in grams."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Fat(String fatGrams) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(fatGrams);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidFat(fatGrams), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d fatGrams;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Fat."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidFat(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Fat // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Fat) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 14,
      "-": 35
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Food.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food in the food record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Food implements Comparable\u003cFood\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Calorie calorie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Protein protein;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Carbohydrate carbohydrate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Fat fat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Fields that can be left empty by user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Food(Name name, Calorie calorie, Protein protein, Carbohydrate carbohydrate, Fat fat, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Calorie getCalorie() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Protein getProtein() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Carbohydrate getCarbohydrate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return carbohydrate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Fat getFat() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return fat;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Food copy() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new Food(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if both foods of the same name have the same name and calorie field."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This defines a weaker notion of equality between two foods."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the current Food object has the same Name as the argument."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name the name we want to check against the current Food object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether or not the current Food object has the same Name as the given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasName(Name name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return name.equals(getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if both foods have the same name and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This defines a stronger notion of equality between two foods."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getCalorie().equals(getCalorie())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getProtein().equals(getProtein())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getCarbohydrate().equals(getCarbohydrate())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getFat().equals(getFat())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return Objects.hash(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(getCalorie())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Proteins (g): \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(getProtein())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Carbohydrates (g): \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(getCarbohydrate())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Fats (g): \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(getFat())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Overloaded toString method for report purposes."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param isCalledforReport whether or not current Food is involved in a Report."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return String representation of the Food\u0027s Name."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public String toString(boolean isCalledforReport) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.getName().toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Compares names of Food objects for lexicographic order."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Food."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return a value representing the lexicopgraphic order."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int compareTo(Food other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String currentName \u003d this.getName().toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String otherName \u003d other.getName().toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return currentName.compareTo(otherName);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 8,
      "ray-97": 8,
      "eugenetyc": 149,
      "jeremylow97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s name in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The first character of the food must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "eugenetyc": 2,
      "jeremylow97": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Protein.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s protein content in grams in the food record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidProtein(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Protein {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \"Proteins can take any integer values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The first character of the Protein must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs an {@code Protein}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param proteinGrams A valid protein amount in grams."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Protein(String proteinGrams) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(proteinGrams);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidProtein(proteinGrams), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d proteinGrams;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Protein."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidProtein(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Protein // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Protein) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 54
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/UniqueFoodList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * A list of food that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * A food is considered unique by comparing using {@code Food#isSameFood(Food)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * foods uses Food#isSameFood(Food) for equality so as to ensure that the food being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * unique in terms of identity in the UniqueFoodList. However, the removal of a food uses Food#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Adds a food to the UniqueFoodList\u0027s internalList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food must currently exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code foods} must not contain duplicate persons."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CollectionUtil.requireAllNonNull(foods);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByName(Name name) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food:internalList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (food.hasName(name)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                return Optional.of(food);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the existing Food in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * The food must currently exist in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Food getExistingFood(Food toGet) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return internalList.stream().filter(toGet::isSameFood).findFirst().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 7,
      "ray-97": 10,
      "eugenetyc": 49,
      "jeremylow97": 8,
      "-": 88
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Signals that the operation will result in duplicate Food objects (they are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        super(\"Operation would result in duplicate food entries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 10
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 5
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/CalorieContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Calorie} matches the {@code Calorie} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class CalorieContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CalorieContainsKeywordsPredicate(Calorie calorie) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d calorie.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getCalorie().value, keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof CalorieContainsKeywordsPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((CalorieContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 31
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/CarbohydrateContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Carbohydrate} matches the {@code Carbohydrate} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class CarbohydrateContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CarbohydrateContainsKeywordsPredicate(Carbohydrate carbohydrate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d carbohydrate.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getCarbohydrate().value, keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof CarbohydrateContainsKeywordsPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((CarbohydrateContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 31
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/FatContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Fat} matches the {@code Fat} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FatContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FatContainsKeywordsPredicate(Fat fat) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d fat.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getFat().value, keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof FatContainsKeywordsPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((FatContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 31
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/FoodRecordContainsFoodNamePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Calorie} matches the {@code Calorie} keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodRecordContainsFoodNamePredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final String foodName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordContainsFoodNamePredicate(String foodName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return food.getName().fullName.toLowerCase().startsWith(foodName.toLowerCase().trim())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || foodName.toLowerCase().trim().startsWith(food.getName().fullName.toLowerCase());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || (other instanceof FoodRecordContainsFoodNamePredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 foodName.equals(((FoodRecordContainsFoodNamePredicate) other).foodName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 30
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public NameContainsKeywordsPredicate(Name name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String[] nameKeywords \u003d name.fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ArrayList\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getName().fullName, keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 15,
      "-": 21
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/ProteinContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Protein} matches the {@code Protein} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class ProteinContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ProteinContainsKeywordsPredicate(Protein protein) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d protein.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getProtein().value, keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof ProteinContainsKeywordsPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((ProteinContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 31
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/TagContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that any of a {@code Food}\u0027s {@code Tag} matches any of the {@code Tag} keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Tag t : tagList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            this.keywords.add(t.tagName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the keywords mentioned appear as part of any Tag of the Food."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check for Tags."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return true if the keywords mentioned appear as part of any Tag of the Food."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            food.getTags().stream().anyMatch(singleTag -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                StringUtil.containsWordIgnoreCase(singleTag.tagName, keyword)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            )"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 46
    }
  },
  {
    "path": "src/main/java/life/calgo/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Tag in the food record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be single-worded and alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Tag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "eugenetyc": 5,
      "-": 46
    }
  },
  {
    "path": "src/main/java/life/calgo/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Contains utility methods for populating {@code FoodRecord} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Hainanese Chicken Rice\"), new Calorie(\"389\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new Protein(\"11\"), new Carbohydrate(\"38\"), new Fat(\"21\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                getTagSet(\"Meat\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Laksa\"), new Calorie(\"499\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"25\"), new Carbohydrate(\"58\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Fat(\"18\"), getTagSet(\"Spicy\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Char Kuay Teow\"), new Calorie(\"742\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"23\"), new Carbohydrate(\"76\"), new Fat(\"38\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    getTagSet(\"GuiltFood\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Roti Prata\"), new Calorie(\"212\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"0\"), new Carbohydrate(\"26\"), new Fat(\"10\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Breakfast\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Mee Rebus\"), new Calorie(\"571\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"23\"), new Carbohydrate(\"82\"), new Fat(\"17\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    getTagSet(\"Kampung\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Bandung\"), new Calorie(\"150\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"4\"), new Carbohydrate(\"17\"), new Fat(\"9\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Pink\", \"Sweet\", \"Favourite\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Black Forest Cake Slice\"), new Calorie(\"340\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"4\"), new Carbohydrate(\"22\"), new Fat(\"8\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Amy\", \"Birthday\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Cheeseburger\"), new Calorie(\"450\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"22\"), new Carbohydrate(\"27\"), new Fat(\"16\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Restaurant\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Chicken Cutlet Meal\"), new Calorie(\"650\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"30\"), new Carbohydrate(\"33\"), new Fat(\"19\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Whampoa\", \"Hawker\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Fried Chicken Wing\"), new Calorie(\"175\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"8\"), new Carbohydrate(\"4\"), new Fat(\"4\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Delicious\", \"Jumbo\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Pineapple Chicken Rice\"), new Calorie(\"589\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"7\"), new Carbohydrate(\"35\"), new Fat(\"8\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Sweet\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Strawberry Milk\"), new Calorie(\"200\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"6\"), new Carbohydrate(\"17\"), new Fat(\"3\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Sweet\", \"Pink\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Sambal Chilli\"), new Calorie(\"100\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"1\"), new Carbohydrate(\"6\"), new Fat(\"3\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Sauce\", \"sweet\", \"Best\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Hot Dog Bun\"), new Calorie(\"150\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"4\"), new Carbohydrate(\"12\"), new Fat(\"2\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Bread\", \"Processed\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Cheesy Bites\"), new Calorie(\"300\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"8\"), new Carbohydrate(\"12\"), new Fat(\"5\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Midnight\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Fried Bee Hoon\"), new Calorie(\"300\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"2\"), new Carbohydrate(\"17\"), new Fat(\"3\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Grandma\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Irish Whiskey\"), new Calorie(\"50\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"0\"), new Carbohydrate(\"3\"), new Fat(\"1\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Bros\", \"Fuel4Code\", \"getYourGameON\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Chocolate Biscuits\"), new Calorie(\"170\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"1\"), new Carbohydrate(\"13\"), new Fat(\"2\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Favourite\", \"Chocolatey\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Salmon Creamy Linguine\"), new Calorie(\"500\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"10\"), new Carbohydrate(\"27\"), new Fat(\"9\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Italian\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Stirfried Kai Lan in Oyster Sauce\"), new Calorie(\"200\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"0\"), new Carbohydrate(\"12\"), new Fat(\"0\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Chinese\"))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static ReadOnlyFoodRecord getSampleFoodRecord() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FoodRecord sampleAb \u003d new FoodRecord();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            sampleAb.addFood(sampleFood);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 10,
      "eugenetyc": 51,
      "jeremylow97": 16,
      "-": 26
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/ConsumptionRecordStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Represents a storage for {@link ReadOnlyConsumptionRecord}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public interface ConsumptionRecordStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Path getConsumptionRecordFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns ConsumptionRecord data as a {@link ReadOnlyConsumptionRecord}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @see #getConsumptionRecordFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Saves the given {@link ReadOnlyConsumptionRecord} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param consumptionRecord cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @see #saveConsumptionRecord(ReadOnlyConsumptionRecord, Path)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 46
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/DocumentGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * An abstract class containing functionality that ReportGenerator and ExportGenerator share"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public abstract class DocumentGenerator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int WIDTH_OF_DOCUMENT \u003d 120;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected PrintWriter printWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected File file;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected final Logger logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DocumentGenerator(String pathName, Logger logger) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.file \u003d new File(pathName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.logger \u003d logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            this.printWriter \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // happens when there is an error in opening or creating the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Not able to generate document because file was unable to be created.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Check your system security settings and enable rights to create a new file.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes a line for neatness in formatting."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printSeparator() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(\"--------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                + \"---------------------------------------\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Wraps a String into lines of n characters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public String stringWrap(String s, int n) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (i !\u003d 0 \u0026\u0026 i % (n - 1) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                result +\u003d \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            result +\u003d s.charAt(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int numExceeded \u003d result.length() % n;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (numExceeded !\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            int remainderTrailingWhiteSpace \u003d n - numExceeded;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            for (int i \u003d 0; i \u003c remainderTrailingWhiteSpace; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                result +\u003d \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes an empty line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printEmptyLine() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Centralises text"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public String centraliseText(String text) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int lengthOfText \u003d text.length();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int numWhitespace \u003d (WIDTH_OF_DOCUMENT - lengthOfText) / 2;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        while (numWhitespace \u003e\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            numWhitespace--;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        sb.append(text);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the meta-information of the document"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public abstract void printHeader();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the concluding remarks in the document"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public abstract void printFooter();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 94
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/ExportGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Responsible for generating a user-friendly copy of the current FoodRecord."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * All Food entries will have all their details written into the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ExportGenerator extends DocumentGenerator {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String PATH_NAME \u003d \"data/exports/FoodRecord.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private ReadOnlyFoodRecord foodRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ExportGenerator(ReadOnlyFoodRecord foodRecord) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(PATH_NAME, LogsCenter.getLogger(ExportGenerator.class));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecord \u003d foodRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Driver method for generation of the Food Record."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return a boolean value that is true only if FoodRecord.txt is successfully generated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean generateExport() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printHeader();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printFoodRecordEntirely();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return file.exists() \u0026\u0026 (file.length() !\u003d 0); // success check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the header of the document."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void printHeader() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String title \u003d \"Your Food Record: A Collection of Your Past Entries\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.println(title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the concluding statement of the document."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printFooter() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(\"This marks the end of the exported document.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the entire current Food Record into the FoodRecord.txt."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void printFoodRecordEntirely() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printCategories();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ObservableList\u003cFood\u003e sourceFoodRecord \u003d foodRecord.getFoodList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Food food : sourceFoodRecord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Name name \u003d food.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Calorie calories \u003d food.getCalorie();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Protein protein \u003d food.getProtein();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Carbohydrate carbohydrate \u003d food.getCarbohydrate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Fat fat \u003d food.getFat();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Set\u003cTag\u003e tags \u003d food.getTags();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            printWriter.println(String.format(\"%-45s %-20s %-20s %-20s %-20s %-20s\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    name, calories, protein, carbohydrate, fat, accumulatedTagsString(tags)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Accumulates all the Tags into a space-separated String and returns this String."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param tags the tags to be converted into String representation."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the space-separated String of all the tags given."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private String accumulatedTagsString(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            result +\u003d tag + \" \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the categories of details of each Food in the Food Record."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private void printCategories() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.println(String.format(\"%-45s %-20s %-20s %-20s %-20s %-20s\", \"Name\", \"Calories\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \"Protein(g)\", \"Carbohydrates(g)\", \"Fat(g)\", \"Tags: \"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 12,
      "eugenetyc": 91
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/FoodRecordStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a storage for {@link FoodRecord}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public interface FoodRecordStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns FoodRecord data as a {@link ReadOnlyFoodRecord}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see #getFoodRecordFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodRecord} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param foodRecord cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see #saveFoodRecord(ReadOnlyFoodRecord)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void saveFoodRecord(ReadOnlyFoodRecord foodRecord, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 41
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/GoalStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Represents a storage for {@link DailyGoal}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public interface GoalStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Path getGoalFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns goal data as a {@link ReadOnlyGoal}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Optional\u003cReadOnlyGoal\u003e readGoal() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @see #getGoalFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Optional\u003cReadOnlyGoal\u003e readGoal(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Saves the given {@link ReadOnlyGoal} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param goal cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void saveGoal(ReadOnlyGoal goal) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @see #saveGoal(ReadOnlyGoal)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void saveGoal(ReadOnlyGoal goal, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 44
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedDailyFoodLog.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Jackson-friendly version of {@link DailyFoodLog}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonAdaptedDailyFoodLog {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DailyFoodLog\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LinkedHashMap\u003cJsonAdaptedFood, Double\u003e foods;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e ratings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Constructs a {@code JsonDailyFoodLog} with the given details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonAdaptedDailyFoodLog("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @JsonProperty(\"foods\") LinkedHashMap\u003cJsonAdaptedFood, Double\u003e foods,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @JsonProperty(\"ratings\") LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e ratings,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @JsonProperty(\"localDate\") LocalDate localDate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foods \u003d foods;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.ratings \u003d ratings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts a given {@code JsonDailyFoodLog} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonAdaptedDailyFoodLog(DailyFoodLog source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods \u003d adaptFoods(source.copyFoods());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings \u003d adaptRatings(source.copyRatings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        localDate \u003d source.getLocalDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to convert Food into adaptedFood."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cJsonAdaptedFood, Double\u003e adaptFoods(LinkedHashMap\u003cFood, Double\u003e foods) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cJsonAdaptedFood, Double\u003e adaptedFoods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food : foods.keySet()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            adaptedFoods.put(new JsonAdaptedFood(food), foods.get(food));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return adaptedFoods;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to convert Food into adaptedFood."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e adaptRatings("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e adaptedRatings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food : ratings.keySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            adaptedRatings.put(new JsonAdaptedFood(food), new ArrayList\u003c\u003e(ratings.get(food)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return adaptedRatings;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to convert adaptedFood into food."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, Double\u003e unAdaptFoods(LinkedHashMap\u003cJsonAdaptedFood, Double\u003e adaptedFoods)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (JsonAdaptedFood adaptedFood : adaptedFoods.keySet()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(adaptedFood.toModelType(), adaptedFoods.get(adaptedFood));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to convert adaptedFood into food."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e unAdaptRatings("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e adaptedRatings)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (JsonAdaptedFood adaptedFood : adaptedRatings.keySet()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(adaptedFood.toModelType(), new ArrayList\u003c\u003e(adaptedRatings.get(adaptedFood)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return ratings;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts this Jackson-friendly adapted DailyFoodLog object into the model\u0027s {@code DailyFoodLog} object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a DailyFoodLog equivalent of this adaptedDailyFoodLog object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adaptedDailyFoodLog."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(unAdaptFoods(foods), unAdaptRatings(ratings), localDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 104
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonAdaptedFood {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String calorie;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String protein;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String carbohydrate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String fat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Constructing JsonAdaptedFood objects"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"calorie\") String calorie,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"protein\") String protein,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"carbohydrate\") String carbohydrate,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"fat\") String fat,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        calorie \u003d source.getCalorie().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        protein \u003d source.getProtein().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        carbohydrate \u003d source.getCarbohydrate().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        fat \u003d source.getFat().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Converting from JsonAdaptedFood objects to Model-friendly objects"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (calorie \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Calorie.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Calorie.isValidCalorie(calorie)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Calorie modelCalorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (protein \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Protein.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Protein.isValidProtein(protein)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Protein modelProtein \u003d new Protein(protein);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (carbohydrate \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    Carbohydrate.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Carbohydrate.isValidCarbohydrate(carbohydrate)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Carbohydrate modelCarbohydrate \u003d new Carbohydrate(carbohydrate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (fat \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Fat.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Fat.isValidFat(fat)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Fat modelFat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Food(modelName, modelCalorie, modelProtein, modelCarbohydrate, modelFat, modelTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 11,
      "ray-97": 4,
      "eugenetyc": 117
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedGoal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Jackson-friendly version of {@link DailyGoal}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "class JsonAdaptedGoal {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private final int dailyGoal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Constructs a {@code JsonAdaptedGoal} with the given {@code dailyGoal}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonAdaptedGoal(int dailyGoal) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.dailyGoal \u003d dailyGoal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Dummy constructor for JsonAdaptedTag class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonAdaptedGoal() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.dailyGoal \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Converts this Jackson-friendly adapted dailyGoal object into the model\u0027s {@code DailyGoal} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!DailyGoal.isValidGoal(dailyGoal)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new IllegalValueException(DailyGoal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new DailyGoal(dailyGoal);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 41
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Dummy constructor for JsonAdaptedTag class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonAdaptedTag() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        tagName \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 5,
      "-": 41
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonConsumptionRecordStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A class to access ConsumptionRecord data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonConsumptionRecordStorage implements ConsumptionRecordStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ConsumptionRecordStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonConsumptionRecordStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Path getConsumptionRecordFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return readConsumptionRecord(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Works similarly as {@link #readConsumptionRecord()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a {@code ReadOnlyConsumptionRecord} object that was read from file path,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * wrapped within an {@code Optional}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord(Path filePath)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cJsonSerializableConsumptionRecord\u003e jsonConsumptionRecord \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                filePath, JsonSerializableConsumptionRecord.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!jsonConsumptionRecord.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return Optional.of(jsonConsumptionRecord.get().toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        saveConsumptionRecord(consumptionRecord, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Works similarly as {@link #saveConsumptionRecord(ReadOnlyConsumptionRecord)}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param consumptionRecord the consumptionRecord to be saved."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException if there\u0027s any error when writing to the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(consumptionRecord);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableConsumptionRecord(consumptionRecord), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 87
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonFoodRecordStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * A class to access FoodRecord data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class JsonFoodRecordStorage implements FoodRecordStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodRecordStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonFoodRecordStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return readFoodRecord(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readFoodRecord()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Optional\u003cJsonSerializableFoodRecord\u003e jsonFoodRecord \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                filePath, JsonSerializableFoodRecord.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!jsonFoodRecord.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return Optional.of(jsonFoodRecord.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        saveFoodRecord(foodRecord, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveFoodRecord(ReadOnlyFoodRecord)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(foodRecord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFoodRecord(foodRecord), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 14,
      "eugenetyc": 66
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonGoalStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * A class to access Daily Goal data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class JsonGoalStorage implements GoalStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGoalStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonGoalStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Path getGoalFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return readGoal(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Similar to {@link #readGoal()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Optional\u003cJsonSerializableGoal\u003e jsonGoal \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                filePath, JsonSerializableGoal.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!jsonGoal.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return Optional.of(jsonGoal.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        saveGoal(goal, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Similar to {@link #saveGoal(ReadOnlyGoal)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGoal(goal), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 79
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonSerializableConsumptionRecord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * An Immutable ConsumptionRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "@JsonRootName(value \u003d \"consumptionrecord\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonSerializableConsumptionRecord {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DAILYFOODLOG \u003d \"Consumption Record contains duplicate log(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final List\u003cJsonAdaptedDailyFoodLog\u003e logs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Constructs a {@code JsonSerializableConsumptionRecord} with the given logs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonSerializableConsumptionRecord(@JsonProperty(\"logs\") List\u003cJsonAdaptedDailyFoodLog\u003e logs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.logs.addAll(logs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts a given {@code ReadOnlyConsumptionRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableConsumptionRecord}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonSerializableConsumptionRecord(ReadOnlyConsumptionRecord source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        logs.addAll(source.getDailyFoodLogs().stream().map(JsonAdaptedDailyFoodLog::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts this consumption record into the model\u0027s {@code ConsumptionRecord} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecord consumptionRecord \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (JsonAdaptedDailyFoodLog jsonAdaptedDailyFoodLog : logs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            DailyFoodLog dailyFoodLog \u003d jsonAdaptedDailyFoodLog.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (consumptionRecord.hasLogWithSameDate(dailyFoodLog)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DAILYFOODLOG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionRecord.addLog(dailyFoodLog);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 59
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonSerializableFoodRecord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * An Immutable FoodRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "@JsonRootName(value \u003d \"foodrecord\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "class JsonSerializableFoodRecord {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food Record contains duplicate Food(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code JsonSerializableFoodRecord} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonSerializableFoodRecord(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFoodRecord}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonSerializableFoodRecord(ReadOnlyFoodRecord source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts this food record into the model\u0027s {@code FoodRecord} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FoodRecord foodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (foodRecord.hasFood(food)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            foodRecord.addFood(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 55
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonSerializableGoal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * An Immutable Goal that is serializable to JSON format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "@JsonRootName(value \u003d \"goal\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "class JsonSerializableGoal {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private JsonAdaptedGoal goal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Constructs a {@code JsonSerializableGoal} with the given persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonSerializableGoal(@JsonProperty(\"goal\") JsonAdaptedGoal goal) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Converts a given {@code ReadOnlyGoal} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableGoal}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonSerializableGoal(ReadOnlyGoal source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.goal \u003d new JsonAdaptedGoal(source.getGoal());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Converts this goal into the model\u0027s {@code DailyGoal} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goal.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 44
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/ReportGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Responsible for generating statistics of the user\u0027s consumption patterns on a given day."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ReportGenerator extends DocumentGenerator {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Header"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String HEADER_MESSAGE \u003d \"Report of Consumption Pattern on %tF\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Goal Information section"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_HEADER_MESSAGE \u003d \"Your Goal Information\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String NO_GOAL_MESSAGE \u003d \"You did not set any goal for daily caloric intake yet.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" If you want to generate personalised insights, please set one!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_MESSAGE \u003d \"You have set a goal to consume at most %d calories in a day.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Foodwise Statistics"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FOODWISE_HEADER_MESSAGE \u003d \"Food-wise Statistics\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Aggregrate Statistics"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String AGGREGRATE_HEADER_MESSAGE \u003d \"Aggregrate Statistics\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Insights"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String INSIGHTS_HEADER_MESSAGE \u003d \"Insights for You\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_ACHIEVED_MESSAGE \u003d \"You have achieved your goal! Congratulations. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Keep up the great work and you will definitely make tremendous \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"improvements in your health and fitness.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_FAILED_MESSAGE \u003d \"You did not manage to achieve your goal today. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"You may want to re-design your diet plan so that\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"you can make improvements in your health and fitness!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_SURPLUS_MESSAGE \u003d \"You have consumed %.0f fewer calories than your target. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Great job!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_DEFICIT_MESSAGE \u003d \"You have consumed %.0f more calories than your target. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Don\u0027t lose heart. You can do better!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Footer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FOOTER_MESSAGE \u003d \"This marks the end of your report. Personalised insights coming up\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" in v1.4.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final int FOOD_NAME_WIDTH \u003d 25;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final int NUMERICAL_VALUE_WIDTH \u003d 10;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private LocalDate queryDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private DailyFoodLog queryLog;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private HashMap\u003cLocalDate, DailyFoodLog\u003e dateToLogMap;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalCalories \u003d 0.0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalProteins \u003d 0.0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalCarbs \u003d 0.0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalFats \u003d 0.0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private DailyGoal userGoal;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ReportGenerator(LocalDate queryDate, DailyGoal userGoal, ReadOnlyConsumptionRecord consumptionRecord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(\"data/reports/\" + queryDate.toString() + \"_report.txt\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                LogsCenter.getLogger(ReportGenerator.class));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.dateToLogMap \u003d consumptionRecord.getDateToLogMap();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.queryLog \u003d this.dateToLogMap.get(queryDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.queryDate \u003d queryDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.userGoal \u003d userGoal;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Driver method for generation of comprehensive report of consumption patterns"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return a boolean value that is true only if report has been successfully generated"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean generateReport() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printHeader();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printGoalInformation();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printFoodwiseStatistics();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printAggregateStatistics();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printInsights();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // printSuggestions();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printFooter();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return file.exists() \u0026\u0026 (file.length() !\u003d 0); // success check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the meta-information of the report."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printHeader() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(String.format(HEADER_MESSAGE, this.queryLog.getLocalDate())));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Prints information on what the goal is."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printGoalInformation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(GOAL_HEADER_MESSAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String goalInformation;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (userGoal.getTargetDailyCalories() \u003d\u003d DailyGoal.DUMMY_VALUE) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goalInformation \u003d NO_GOAL_MESSAGE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goalInformation \u003d String.format(GOAL_MESSAGE, this.userGoal.getTargetDailyCalories());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(goalInformation);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes relevant statistics related to each food quantity consumed in the given day."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printFoodwiseStatistics() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(FOODWISE_HEADER_MESSAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(String.format(\"%-25s %-20s %-20s\", \"Food\", \"Quantity\", \"Calories\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        DailyFoodLog foodLog \u003d queryLog;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (Food food : foodLog.getFoods()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double portion \u003d foodLog.getPortion(food);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double currCalories \u003d portion * (double) Integer.parseInt(food.getCalorie().value);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalCalories +\u003d currCalories;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalProteins +\u003d portion * (double) Integer.parseInt(food.getProtein().value);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalCarbs +\u003d portion * (double) Integer.parseInt(food.getCarbohydrate().value);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalFats +\u003d portion * (double) Integer.parseInt(food.getFat().value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String foodName \u003d stringWrap(food.toString(true), FOOD_NAME_WIDTH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String portionString \u003d stringWrap(String.format(\"%.0f\", portion), NUMERICAL_VALUE_WIDTH);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String currCaloriesString \u003d stringWrap(String.format(\"%.0f\", currCalories), NUMERICAL_VALUE_WIDTH);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(String.format(\"%-25s %-20s %-20s\", foodName,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    portionString, currCaloriesString));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes aggregated statistics of all food items consumed in the given day."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printAggregateStatistics() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(AGGREGRATE_HEADER_MESSAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(String.format(\"%s %-20s %-20s %-20s\", \"Total Calories in kcal\", \"| Total Protein in grams\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \"| Total Carbohydrates in grams\", \"| Total Fats in grams\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(String.format(\"     %-25.0f %-26.0f %-28.0f %.0f\", totalCalories, totalProteins,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                totalCarbs, totalFats));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the actionable insights a user can take based on user consumption patterns for the given day."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printInsights() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // compare method returns -1 if left argument \u003c right argument and 0 if left argument \u003d\u003d right argument"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (userGoal.getTargetDailyCalories() !\u003d DailyGoal.DUMMY_VALUE) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            boolean isGoalAchieved \u003d (int) calculateRemainingCalories() \u003e\u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(centraliseText(INSIGHTS_HEADER_MESSAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printEmptyLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (isGoalAchieved) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                printWriter.println(GOAL_ACHIEVED_MESSAGE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                printEmptyLine();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                printWriter.println(String.format(GOAL_SURPLUS_MESSAGE, calculateRemainingCalories()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                printWriter.println(GOAL_FAILED_MESSAGE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                printEmptyLine();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                printWriter.println(String.format(GOAL_DEFICIT_MESSAGE, Math.abs(calculateRemainingCalories())));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printSeparator();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Creates a list of recommended food items to eat that will match goal of user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printSuggestions() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // instantiate a list with past 7 days of consumed food data"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cDailyFoodLog\u003e dailyFoodLogs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        LocalDate currentDate \u003d this.queryDate;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (dateToLogMap.containsKey(currentDate)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                dailyFoodLogs.add(this.dateToLogMap.get(currentDate));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            currentDate \u003d currentDate.minus(Period.ofDays(1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // flatten list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cFood\u003e foodInPastWeek \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (DailyFoodLog foodLog : dailyFoodLogs) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            foodInPastWeek.addAll(foodLog.getFoods());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        HashMap\u003cFood, Integer\u003e frequencyMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (Food food : foodInPastWeek) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (frequencyMap.containsKey(food)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                frequencyMap.put(food, frequencyMap.get(food) + 1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                frequencyMap.put(food, 1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Collections.sort(foodInPastWeek, Comparator.comparingInt(frequencyMap::get));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // ensure sum up to goal calories"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(\"Suggestions\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double goal \u003d userGoal.getTargetDailyCalories();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        while (goal \u003e\u003d 0 \u0026\u0026 !foodInPastWeek.isEmpty()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            Food consumedFood \u003d foodInPastWeek.remove(0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(consumedFood);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal -\u003d Double.parseDouble(consumedFood.getCalorie().toString());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the concluding remarks in the report."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void printFooter() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(FOOTER_MESSAGE));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Calculates number of calories remaining for user to meet goal."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return the number of calories remaining for user to meet goal"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public double calculateRemainingCalories() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return userGoal.getTargetDailyCalories() - totalCalories;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 223,
      "ray-97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public interface Storage extends FoodRecordStorage, ConsumptionRecordStorage, UserPrefsStorage, GoalStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "ray-97": 1,
      "eugenetyc": 26
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Manages storage of FoodRecord data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private FoodRecordStorage foodRecordStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private ConsumptionRecordStorage consumptionRecordStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private GoalStorage goalStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public StorageManager(FoodRecordStorage foodRecordStorage, ConsumptionRecordStorage consumptionRecordStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, GoalStorage goalStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecordStorage \u003d foodRecordStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.consumptionRecordStorage \u003d consumptionRecordStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.goalStorage \u003d goalStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodRecord methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecordStorage.getFoodRecordFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return readFoodRecord(foodRecordStorage.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecordStorage.readFoodRecord(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        saveFoodRecord(foodRecord, foodRecordStorage.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        foodRecordStorage.saveFoodRecord(foodRecord, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ConsumptionRecord methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Path getConsumptionRecordFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecordStorage.getConsumptionRecordFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return readConsumptionRecord(consumptionRecordStorage.getConsumptionRecordFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord(Path filePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        logger.fine(\"Attempting to read from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecordStorage.readConsumptionRecord(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        saveConsumptionRecord(consumptionRecord, consumptionRecordStorage.getConsumptionRecordFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecordStorage.saveConsumptionRecord(consumptionRecord, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Goal methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Path getGoalFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goalStorage.getGoalFilePath();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return readGoal(goalStorage.getGoalFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        logger.fine(\"Attempting to read from file: \" + filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goalStorage.readGoal(filePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal) throws IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        saveGoal(goal, goalStorage.getGoalFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        logger.fine(\"Attempting to write data to file: \" + filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalStorage.saveGoal(goal, filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 39,
      "ray-97": 36,
      "eugenetyc": 67
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "eugenetyc": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final CommandListener commandListener;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, CommandListener commandListener) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.commandListener \u003d commandListener;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        commandTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (newValue.contains(\"n/\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    \u0026\u0026 (newValue.startsWith(\"update\") || newValue.startsWith(\"delete\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        || newValue.startsWith(\"nom\"))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String foodName \u003d newValue.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                commandListener.getSuggestions(foodName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            setStyleToDefault();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public interface CommandListener {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "         * Listens into the command and filters the FoodListPanel accordingly"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "         * @see Logic#getSimilarFood(String)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        void getSuggestions(String foodName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "jeremylow97": 27,
      "eugenetyc": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/ConsumedFoodCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Responsible for displaying each consumed food item."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class ConsumedFoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String FXML \u003d \"DailyListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"E, dd-MMM-yyyy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public final ConsumedFood consumedFood;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Label portion;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Label totalCalorie;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Label averageRating;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumedFoodCard(ConsumedFood consumedFood, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        super((FXML));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.consumedFood \u003d consumedFood;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        name.setText(consumedFood.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        portion.setText(\"Portions consumed: \" + consumedFood.getPortion());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        double calorieFromPortions \u003d consumedFood.getPortion() * Double.parseDouble(consumedFood.getCalorie().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        averageRating.setText(\"Average rating: \" + consumedFood.getRating());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        totalCalorie.setText(\"Total calories: \" + calorieFromPortions);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        date.setText(\"Date: \" + formatter.format(consumedFood.getDate()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!(other instanceof ConsumedFoodCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumedFoodCard card \u003d (ConsumedFoodCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 consumedFood.equals(card.consumedFood);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "ray-97": 63
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/DailyListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Responsible for displaying food consumed in a given day."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class DailyListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String FXML \u003d \"DailyListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DailyListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private ListView\u003cConsumedFood\u003e dailyListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyListPanel(ObservableList\u003cConsumedFood\u003e dailyList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dailyListView.setItems(dailyList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dailyListView.setCellFactory(listView -\u003e new DailyListPanel.DailyListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Responsible for containing the display of each food item consumed in the given day."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    class DailyListViewCell extends ListCell\u003cConsumedFood\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        protected void updateItem(ConsumedFood food, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                setGraphic(new ConsumedFoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 11,
      "ray-97": 37
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/FoodCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label protein;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label carbohydrate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label fat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        calorie.setText(\"Calories: \" + food.getCalorie().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        protein.setText(\"Protein (g): \" + food.getProtein().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        carbohydrate.setText(\"Carbohydrates (g): \" + food.getCarbohydrate().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        fat.setText(\"Fat (g): \" + food.getFat().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 19,
      "-": 56
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/FoodListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private ListView\u003cFood\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        personListView.setItems(foodList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 11,
      "-": 32
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/GoalDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * A ui for the status bar that displays the daily calorie goal of the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class GoalDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FXML \u003d \"GoalDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private TextArea goalDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public GoalDisplay() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void setGoalOfUser(String goalOfUser) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(goalOfUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplay.setText(goalOfUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 26
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f11-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    //public static final String COMMAND_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static String commandGuide \u003d HelpCommand.DEFAULT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private TextArea commandMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        commandMessage.setText(commandGuide);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void setGuide(String commandGuide) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        requireNonNull(commandGuide);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        commandMessage.setText(commandGuide);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 15,
      "buddhavineeth": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static final String GREETING_MESSAGE \u003d \"Welcome to Calgo! Since this is your first time,\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"do remember to set a daily calorie goal using the goal command!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static final String POSITIVE_CALORIES_MESSAGE \u003d \"%s more calories today.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static final String NEGATIVE_CALORIES_MESSAGE \u003d \"Over by %s calories today.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private ContextMenu contextMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private DailyListPanel dailyListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private GoalDisplay goalDisplay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private RemainingCaloriesDisplay remainingCaloriesDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private StackPane foodListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private StackPane dailyListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private StackPane goalDisplayPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private StackPane caloriesDisplayPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private StackPane graphDisplayPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dailyListPanel \u003d new DailyListPanel(logic.getFilteredDailyList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dailyListPanelPlaceholder.getChildren().add(dailyListPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplay \u003d new GoalDisplay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplayPlaceholder.getChildren().add(goalDisplay.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        remainingCaloriesDisplay \u003d new RemainingCaloriesDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        caloriesDisplayPlaceholder.getChildren().add(remainingCaloriesDisplay.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        resultDisplay.setFeedbackToUser(GREETING_MESSAGE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        fillGoal();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        fillRemainingCalories();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this::getSuggestions);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Fills Goal stack pane with daily goal data."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void fillGoal() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplay.setGoalOfUser(logic.getDailyGoal().toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Fills remaining calories pane with number of remaining calories for the day."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void fillRemainingCalories() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double remainingCalories \u003d logic.getRemainingCalories();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (remainingCalories \u003c 0.0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            remainingCaloriesDisplay.setCaloriesOfUser(String.format(NEGATIVE_CALORIES_MESSAGE,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    (int) (remainingCalories * -1)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            remainingCaloriesDisplay.setCaloriesOfUser(String.format(POSITIVE_CALORIES_MESSAGE,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    (int) remainingCalories));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Handles the MainWindow in event of the Help command being used."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void handleHelpHelper(String commandGuide) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        // Check if HelpWindow content is required content"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        helpWindow.setGuide(HelpCommand.getFilteredGuide());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodListPanel getFoodListPanel() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodListPanel;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            fillGoal();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            fillRemainingCalories();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                handleHelpHelper(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Presents similar food suggestions to user depending on their input"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @see Logic#getSimilarFood(String)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private void getSuggestions(String text) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String foodName \u003d text.substring(text.indexOf(\"n/\") + 2);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        if (!foodName.isEmpty()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            List\u003cFood\u003e similarFood \u003d logic.getSimilarFood(foodName);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            String s \u003d similarFood.stream()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .map(Food::getName)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .map(Name::toString)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .sorted(Comparator.naturalOrder())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (!similarFood.isEmpty()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"Here are some Food items with similar names in your Food Record: \\n\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + s);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"It seems like there is no similar Food item in your Food Record\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 24,
      "buddhavineeth": 51,
      "ray-97": 5,
      "jeremylow97": 35,
      "eugenetyc": 6,
      "-": 179
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/RemainingCaloriesDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * A ui for the status bar that displays the remaining calories to be consumed by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class RemainingCaloriesDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FXML \u003d \"RemainingCaloriesDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private TextArea remainingCaloriesDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public RemainingCaloriesDisplay() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void setCaloriesOfUser(String userRemainingCalories) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(userRemainingCalories);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        remainingCaloriesDisplay.setText(userRemainingCalories);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 27
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/resources/view/DailyListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cLabel fx:id\u003d\"portion\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$portion\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cLabel fx:id\u003d\"totalCalorie\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalCalorie\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cLabel fx:id\u003d\"averageRating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$averageRating\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ray-97": 39
    }
  },
  {
    "path": "src/main/resources/view/DailyListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    \u003cListView fx:id\u003d\"dailyListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ray-97": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"calorie\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calorie\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"carbohydrate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$carbohydrate\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fat\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 12,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/GoalDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"goal-    stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cTextArea fx:id\u003d\"goalDisplay\" editable\u003d\"false\" styleClass\u003d\"goal-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 2,
      "buddhavineeth": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cfx:root height\u003d\"500.0\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cTextArea fx:id\u003d\"commandMessage\" layoutX\u003d\"-1.0\" layoutY\u003d\"43.0\" text\u003d\"\\$commandGuide\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"43.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 12,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow_OLD.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 39
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Calgo App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                    \u003cVBox fx:id\u003d\"foodList\" minWidth\u003d\"222.0\" prefHeight\u003d\"322.0\" prefWidth\u003d\"222.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"goalDisplayPlaceholder\" styleClass\u003d\"goal-stack-pane\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"caloriesDisplayPlaceholder\" styleClass\u003d\"remaining-calories-display\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Daily List\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"dailyListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c!--                  \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Weekly Graph\" /\u003e--\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c!--                        \u003cStackPane fx:id\u003d\"graphDisplayPlaceholder\" /\u003e--\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                    \u003cVBox fx:id\u003d\"dailyList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Food Record\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"foodListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cHBox /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 25,
      "buddhavineeth": 12,
      "ray-97": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/RemainingCaloriesDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cTextArea fx:id\u003d\"remainingCaloriesDisplay\" editable\u003d\"false\" styleClass\u003d\"remaining-calories-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 2,
      "buddhavineeth": 7
    }
  },
  {
    "path": "src/test/java/life/calgo/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 5,
      "-": 56
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 7,
      "-": 31
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 6,
      "-": 103
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 9,
      "-": 108
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Word is more than any similar words in sentence"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 12,
      "-": 135
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CALORIE_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CARBOHYDRATE_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.FAT_DESC_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PROTEIN_DESC_APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.APPLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.JsonConsumptionRecordStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.JsonFoodRecordStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.JsonGoalStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage foodRecordStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new JsonFoodRecordStorage(temporaryFolder.resolve(\"foodrecord.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonConsumptionRecordStorage consumptionRecordStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new JsonConsumptionRecordStorage(temporaryFolder.resolve(\"consumptionrecord.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonGoalStorage goalStorage \u003d new JsonGoalStorage(temporaryFolder.resolve(\"goal.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(foodRecordStorage, consumptionRecordStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new JsonFoodRecordIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonConsumptionRecordStorage consumptionRecordStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new JsonConsumptionRecordStorage(temporaryFolder.resolve(\"ioExceptionConsumptionRecord.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonGoalStorage goalStorage \u003d new JsonGoalStorage(temporaryFolder.resolve(\"ioExceptionGoal.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, consumptionRecordStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String updateCommand \u003d UpdateCommand.COMMAND_WORD + NAME_DESC_APPLE + CALORIE_DESC_APPLE + PROTEIN_DESC_APPLE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_APPLE + FAT_DESC_APPLE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(APPLE).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandFailure(updateCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodRecord().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static class JsonFoodRecordIoExceptionThrowingStub extends JsonFoodRecordStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        private JsonFoodRecordIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void saveFoodRecord(ReadOnlyFoodRecord addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 12,
      "jeremylow97": 42,
      "-": 118
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.setFoodRecord(new FoodRecord());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 4,
      "jeremylow97": 32
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_NAME_APPLE \u003d \"Apple\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CALORIE_APPLE \u003d \"100\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CALORIE_BANANA \u003d \"200\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_PROTEIN_APPLE \u003d \"3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_PROTEIN_BANANA \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CARBOHYDRATE_APPLE \u003d \"40\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CARBOHYDRATE_BANANA \u003d \"50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_FAT_APPLE \u003d \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_FAT_BANANA \u003d \"12\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_TAG_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_TAG_SOFT \u003d \"soft\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String NAME_DESC_APPLE \u003d \" \" + PREFIX_NAME + VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String NAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CALORIE_DESC_APPLE \u003d \" \" + PREFIX_CALORIES + VALID_CALORIE_APPLE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CALORIE_DESC_BANANA \u003d \" \" + PREFIX_CALORIES + VALID_CALORIE_BANANA;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CARBOHYDRATE_DESC_APPLE \u003d \" \" + PREFIX_CARBOHYDRATE + VALID_CARBOHYDRATE_APPLE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CARBOHYDRATE_DESC_BANANA \u003d \" \" + PREFIX_CARBOHYDRATE + VALID_CARBOHYDRATE_BANANA;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PROTEIN_DESC_APPLE \u003d \" \" + PREFIX_PROTEIN + VALID_PROTEIN_APPLE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PROTEIN_DESC_BANANA \u003d \" \" + PREFIX_PROTEIN + VALID_PROTEIN_BANANA;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String FAT_DESC_APPLE \u003d \" \" + PREFIX_FAT + VALID_FAT_APPLE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String FAT_DESC_BANANA \u003d \" \" + PREFIX_FAT + VALID_FAT_BANANA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String TAG_DESC_HARD \u003d \" \" + PREFIX_TAG + VALID_TAG_HARD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String TAG_DESC_SOFT \u003d \" \" + PREFIX_TAG + VALID_TAG_SOFT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Choco\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_CALORIE_DESC \u003d \" \" + PREFIX_CALORIES + \"1a\"; // \u0027a\u0027 not allowed in calorie"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_PROTEIN_DESC \u003d \" \" + PREFIX_PROTEIN; // empty string not allowed for protein"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_CARBOHYDRATE_DESC \u003d \" \" + PREFIX_CARBOHYDRATE + \"bob\"; // only integers allowed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_FAT_DESC \u003d \" \" + PREFIX_FAT; // empty string not allowed for fat"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"#^#^#*#*\"; // symbols not allowed in tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord expectedFoodRecord \u003d new FoodRecord(actualModel.getFoodRecord());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFoodRecord, actualModel.getFoodRecord());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code model}\u0027s Food Record."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodRecord().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d model.getFilteredFoodRecord().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.updateFilteredFoodRecord(new NameContainsKeywordsPredicate(food.getName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(1, model.getFilteredFoodRecord().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 117,
      "eugenetyc": 3
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFoodDelete_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(foodToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFoodRecord(), model.getConsumptionRecord(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_nonExistingFoodDelete_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().withName(\"Definitely does not exists\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(food);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(foodToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food secondFood \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_SECOND_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(firstFood);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(secondFood);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(firstFood);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.updateFilteredFoodRecord(p -\u003e false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(model.getFilteredFoodRecord().isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 7,
      "jeremylow97": 96
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_FOODS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            TypicalFoodItems.getTypicalFoodRecord(), model.getConsumptionRecord(), new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new NameContainsKeywordsPredicate(new Name(\"Roti John\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new NameContainsKeywordsPredicate(new Name(\"Strawberry Jam Sandwich\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_zeroKeywords_nameExceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \"Names should only contain alphanumeric characters and spaces, \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                        + \"and it should not be blank\", () -\u003e preparePredicate(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_multipleKeywords_multipleFoodItemsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Banana Milkshake Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.updateFilteredFoodRecord(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFoodItems.BANANA_MILKSHAKE), model.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new NameContainsKeywordsPredicate(new Name(userInput));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 4,
      "jeremylow97": 68,
      "eugenetyc": 11
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static life.calgo.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 1,
      "jeremylow97": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodRecord(), model.getConsumptionRecord(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 5,
      "jeremylow97": 37
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/NomCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class NomCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 4
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/StomachCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for StomachCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class StomachCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodRecord(), model.getConsumptionRecord(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 28
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/UpdateCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code UpdateCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_newFood_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new UpdateCommand(validFood), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_SUCCESS, validFood), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFood_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withName(\"Almond\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food existingFood \u003d model.getFoodRecord().getFoodList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), model.getConsumptionRecord(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.setFood(existingFood, validFood);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new UpdateCommand(validFood), model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS, validFood), expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 7,
      "jeremylow97": 48
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/UpdateCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.getTypicalFoodRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.ConsumedFood;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new UpdateCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_foodAcceptedByModel_updateSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandResult commandResult \u003d new UpdateCommand(validFood).execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(String.format(UpdateCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(model.hasFood(validFood));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFood_updateSuccessful() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedFood \u003d new FoodBuilder().withProtein(\"222222\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(editedFood);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.addFood(validFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandResult commandResult \u003d updateCommand.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(String.format(UpdateCommand.MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS, editedFood),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(model.hasFood(editedFood));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFoodSameValues_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food existingFoodSameValues \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(existingFoodSameValues);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.addFood(validFood);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandFailure(updateCommand, model,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_UPDATE_EXISTING_FOOD_SAME_VALUES_FAILED,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                existingFoodSameValues.getName().fullName));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food apple \u003d new FoodBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food banana \u003d new FoodBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand addAppleCommand \u003d new UpdateCommand(apple);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand addBananaCommand \u003d new UpdateCommand(banana);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand addAppleCommandCopy \u003d new UpdateCommand(apple);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setFoodRecordFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public ReadOnlyConsumptionRecord getConsumptionRecord() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setFoodRecord(ReadOnlyFoodRecord newData) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public Food getExistingFood(Food toAdd) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodRecord() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void updateFilteredFoodRecord(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ObservableList\u003cConsumedFood\u003e getCurrentFilteredDailyList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void updateCurrentFilteredDailyList(Predicate\u003cConsumedFood\u003e predicate, LocalDate date) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public void updateConsumedLists(Food food) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public Optional\u003cFood\u003e getFoodByName(Name parseName) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasLogWithSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void updateLog(DailyFoodLog logAfterConsumption) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public DailyFoodLog getLogByDate(LocalDate localDate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public DailyGoal updateDailyGoal(int targetDailyCalories) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean isGoalMade() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public DailyGoal getDailyGoal() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        public double getRemainingCalories(LocalDate date) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private class ModelStubWithFood extends ModelStub {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ModelStubWithFood(Food food) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        final ArrayList\u003cFood\u003e foodItemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return foodItemsAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            foodItemsAdded.add(food);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return new FoodRecord();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "ray-97": 14,
      "jeremylow97": 283
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/VomitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class VomitCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 4
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCalorie(\"0\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(\"0\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(\"0\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withFat(\"0\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" n/Apple\", new DeleteCommand(food));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 37
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(new Name(\"Strawberry Jam\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find n/Strawberry Jam\", expectedFindCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find n/  Strawberry   Jam  \", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 27,
      "eugenetyc": 5
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/FoodRecordParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodRecordParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final FoodRecordParser parser \u003d new FoodRecordParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_update() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(FoodUtil.getUpdateCommand(food), model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(new UpdateCommand(food), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, model) instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", model) instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String foodName \u003d \"Apple\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d new FoodBuilder().withName(foodName)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCalorie(\"0\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(\"0\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(\"0\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(\"0\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withFat(\"0\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" n/\" + foodName, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(new DeleteCommand(foodToDelete), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String keywords \u003d \"Hamburger and Fries\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                FindCommand.COMMAND_WORD + \" n/\" + keywords, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(new Name(keywords))), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, model) instanceof ListCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", model) instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\", model));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                ParseException.class, Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        parser.parseCommand(\"unknownCommand\", model));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 93,
      "eugenetyc": 5
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@APPLE!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CALORIE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CARBOHYDRATE \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"ABC!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_FAT \u003d \"IAMNOTFAT?!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_TAG \u003d \"# u a dum\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_NAME \u003d \"Apple\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CALORIE \u003d \"100\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_PROTEIN \u003d \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CARBOHYDRATE \u003d \"5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_FAT \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"hard\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"healthy\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCalorie((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalorie(INVALID_CALORIE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_validValueWithoutWhitespace_returnsCalorie() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Calorie expectedCalorie \u003d new Calorie(VALID_CALORIE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCalorie, ParserUtil.parseCalorie(VALID_CALORIE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_validValueWithWhitespace_returnsTrimmedCalorie() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String calorieWithWhitespace \u003d WHITESPACE + VALID_CALORIE + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Calorie expectedCalorie \u003d new Calorie(VALID_CALORIE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCalorie, ParserUtil.parseCalorie(calorieWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseProtein((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseProtein(INVALID_PROTEIN));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_validValueWithoutWhitespace_returnsProtein() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Protein expectedProtein \u003d new Protein(VALID_PROTEIN);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(VALID_PROTEIN));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_validValueWithWhitespace_returnsTrimmedProtein() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String proteinWithWhitespace \u003d WHITESPACE + VALID_PROTEIN + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Protein expectedProtein \u003d new Protein(VALID_PROTEIN);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(proteinWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCarbohydrate((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarbohydrate(INVALID_CARBOHYDRATE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_validValueWithoutWhitespace_returnsCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(VALID_CARBOHYDRATE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCarbohydrate, ParserUtil.parseCarbohydrate(VALID_CARBOHYDRATE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_validValueWithWhitespace_returnsTrimmedCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String carbohydrateWithWhitespace \u003d WHITESPACE + VALID_CARBOHYDRATE + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(VALID_CARBOHYDRATE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCarbohydrate, ParserUtil.parseCarbohydrate(carbohydrateWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFat((String) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFat(INVALID_FAT));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_validValueWithoutWhitespace_returnsFat() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Fat expectedFat \u003d new Fat(VALID_FAT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(VALID_FAT));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_validValueWithWhitespace_returnsTrimmedFat() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String fatWithWhitespace \u003d WHITESPACE + VALID_FAT + WHITESPACE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Fat expectedFat \u003d new Fat(VALID_FAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(fatWithWhitespace));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 227
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/UpdateCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CALORIE_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CALORIE_DESC_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CARBOHYDRATE_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CARBOHYDRATE_DESC_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.FAT_DESC_APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.FAT_DESC_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_CALORIE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_CARBOHYDRATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_FAT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_PROTEIN_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PROTEIN_DESC_APPLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PROTEIN_DESC_BANANA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.TAG_DESC_HARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.TAG_DESC_SOFT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_CALORIE_BANANA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_CARBOHYDRATE_BANANA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_PROTEIN_BANANA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_TAG_SOFT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(TypicalFoodItems.BANANA).withTags(VALID_TAG_SOFT).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BANANA"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_APPLE + NAME_DESC_BANANA"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple calorie - last calorie accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_APPLE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple protein - last protein accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_APPLE + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple carbohydrate - last carbohydrate accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_APPLE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple fat - last fat accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_APPLE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_APPLE + FAT_DESC_BANANA"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFoodMultipleTags \u003d new FoodBuilder(TypicalFoodItems.BANANA)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withTags(VALID_TAG_SOFT, VALID_TAG_HARD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, new UpdateCommand(expectedFoodMultipleTags));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(TypicalFoodItems.APPLE).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_APPLE + CALORIE_DESC_APPLE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_APPLE + CARBOHYDRATE_DESC_APPLE + FAT_DESC_APPLE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + VALID_CALORIE_BANANA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + VALID_PROTEIN_BANANA + CARBOHYDRATE_DESC_BANANA,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + VALID_CARBOHYDRATE_BANANA,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_BANANA + VALID_CALORIE_BANANA"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + VALID_PROTEIN_BANANA + VALID_CARBOHYDRATE_BANANA,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_NAME_DESC + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid calorie"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + INVALID_CALORIE_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid protein"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + INVALID_PROTEIN_DESC + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid carbohydrate"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + INVALID_CARBOHYDRATE_DESC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid fat"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + INVALID_CARBOHYDRATE_DESC"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + INVALID_FAT_DESC + TAG_DESC_HARD + TAG_DESC_SOFT, Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + INVALID_TAG_DESC + VALID_TAG_SOFT, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_NAME_DESC + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + INVALID_CARBOHYDRATE_DESC + FAT_DESC_BANANA,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 177
    }
  },
  {
    "path": "src/test/java/life/calgo/model/FoodRecordTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodRecordTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final FoodRecord foodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(Collections.emptyList(), foodRecord.getFoodList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e foodRecord.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void resetData_withValidReadOnlyFoodRecord_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord newData \u003d TypicalFoodItems.getTypicalFoodRecord();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(newData, foodRecord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void resetData_withDuplicateFoodItems_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e newFoods \u003d Arrays.asList(TypicalFoodItems.APPLE, editedApple);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecordStub newData \u003d new FoodRecordStub(newFoods);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e foodRecord.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_nullFoodItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e foodRecord.hasFood(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodNoteInFoodRecord_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(foodRecord.hasFood(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodInFoodRecord_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.addFood(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(foodRecord.hasFood(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInFoodRecord_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.addFood(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(foodRecord.hasFood(editedApple));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e foodRecord.getFoodList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static class FoodRecordStub implements ReadOnlyFoodRecord {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecordStub(Collection\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 102
    }
  },
  {
    "path": "src/test/java/life/calgo/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.BANANA_MILKSHAKE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodRecordBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(new FoodRecord(), new FoodRecord(modelManager.getFoodRecord()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        userPrefs.setFoodRecordFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        userPrefs.setFoodRecordFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodRecordFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFoodRecordFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodRecordFilePath_validPath_setsFoodRecordFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Path path \u003d Paths.get(\"food/record/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        modelManager.setFoodRecordFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(path, modelManager.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodNotInFoodRecord_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(modelManager.hasFood(APPLE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_personInFoodRecord_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        modelManager.addFood(APPLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(modelManager.hasFood(APPLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodRecord().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord foodRecord \u003d new FoodRecordBuilder().withFood(APPLE).withFood(BANANA_MILKSHAKE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord differentFoodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecord consumptionRecord \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DailyGoal dailyGoal \u003d new DailyGoal();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        modelManager \u003d new ModelManager(foodRecord, consumptionRecord, userPrefs, dailyGoal);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(foodRecord, consumptionRecord, userPrefs, dailyGoal);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFoodRecord, consumptionRecord,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefs, dailyGoal)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Name keywords \u003d APPLE.getName();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        modelManager.updateFilteredFoodRecord(new NameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodRecord, consumptionRecord, userPrefs, dailyGoal)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        modelManager.updateFilteredFoodRecord(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        differentUserPrefs.setFoodRecordFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodRecord, consumptionRecord,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                differentUserPrefs, dailyGoal)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 8,
      "jeremylow97": 32,
      "eugenetyc": 4,
      "-": 94
    }
  },
  {
    "path": "src/test/java/life/calgo/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodRecordFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFoodRecordFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/life/calgo/model/day/DailyFoodLogTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.TypicalDailyFoodLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class DailyFoodLogTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void copy_typicalDailyFoodLog_returnsTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                .equals(TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY.copy()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void getRating_ratingOf_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertEquals(TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY.getRating(TypicalFoodItems.BANANA),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                (double) (6 + 9) / 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void getFoodByIndex_typicalDailyFoodLog_returnsTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertEquals(TypicalFoodItems.ALMOND, TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY.getFoodByIndex(0).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 30
    }
  },
  {
    "path": "src/test/java/life/calgo/model/day/UniqueDateToLogMapTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class UniqueDateToLogMapTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final UniqueDateToLogMap uniqueDateToLogMap \u003d new UniqueDateToLogMap();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 9
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/CalorieTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class CalorieTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Calorie(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidCalorie_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidCalorie \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Calorie(invalidCalorie));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidCalorie() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null calorie"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Calorie.isValidCalorie(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid calorie"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid calorie"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(\"122\")); // normal calorie number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(\"124293842033123\")); // long calorie numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 40
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/CarbohydrateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class CarbohydrateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Carbohydrate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidCarbohydrate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidCarbohydrate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Carbohydrate(invalidCarbohydrate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidCarbohydrate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null carbohydrate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Carbohydrate.isValidCarbohydrate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid carbohydrate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid carbohydrate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Carbohydrate.isValidCarbohydrate(\"122\")); // normal carbohydrate number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Carbohydrate.isValidCarbohydrate(\"124293842033123\")); // long carbohydrate numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 39
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/FatTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FatTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Fat(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidFat_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidFat \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Fat(invalidFat));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidFat() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null fat"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Fat.isValidFat(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid fat"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid fat"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Fat.isValidFat(\"122\")); // normal fat number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Fat.isValidFat(\"124293842033123\")); // long fat numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 39
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/FoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isSameFood() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.isSameFood(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.isSameFood(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCalorie(CommandTestUtil.VALID_CALORIE_BANANA)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withFat(CommandTestUtil.VALID_PROTEIN_BANANA).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.isSameFood(editedApple));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withName(CommandTestUtil.VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.isSameFood(editedApple));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food aliceCopy \u003d new FoodBuilder(TypicalFoodItems.APPLE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.equals(aliceCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.equals(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(TypicalFoodItems.BANANA_MILKSHAKE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withName(CommandTestUtil.VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different calorie -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withCalorie(CommandTestUtil.VALID_CALORIE_BANANA).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different fat -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withFat(CommandTestUtil.VALID_FAT_BANANA).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different protein -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withProtein(CommandTestUtil.VALID_PROTEIN_BANANA).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different carbohydrate -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(CommandTestUtil.VALID_CARBOHYDRATE_BANANA).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different tags -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withTags(CommandTestUtil.VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 84
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Name firstPredicateKeywordsName \u003d new Name(\"Kiwi\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Name secondPredicateKeywordsName \u003d new Name(\"Kiwi Jam\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordsName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordsName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordsName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Apple\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Apple Banana\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Banana Chocolate\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Chocolate\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(new Name(\"aPPle bANANA\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \"Names should only contain alphanumeric characters and spaces, \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                + \"and it should not be blank\", () -\u003e new NameContainsKeywordsPredicate(new Name(\"\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Chocolate\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 55,
      "eugenetyc": 16
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Name.isValidName(\"apple*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"pineapple black\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"100\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"apple the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"Banana Milk\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"Banana Pineapple Strawberry Grass Mud Juice\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/ProteinTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ProteinTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Protein(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidProtein_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidProtein \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Protein(invalidProtein));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidProtein() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null fat"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Protein.isValidProtein(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid fat"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid fat"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Protein.isValidProtein(\"122\")); // normal fat number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Protein.isValidProtein(\"124293842033123\")); // long fat numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 39
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/UniqueFoodListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UniqueFoodListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final UniqueFoodList uniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(uniqueFoodList.contains(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(uniqueFoodList.contains(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_foodWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(uniqueFoodList.contains(editedApple));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void add_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void add_duplicateFood_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.add(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_nullTargetFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(null, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_nullEditedFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(TypicalFoodItems.APPLE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_targetFoodNotInList_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(FoodNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodIsSameFood_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFood(TypicalFoodItems.APPLE, editedApple);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(editedApple);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodHasNonUniqueIdentity_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.BANANA_MILKSHAKE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void remove_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void remove_foodDoesNotExist_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(FoodNotFoundException.class, () -\u003e uniqueFoodList.remove(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void remove_existingFood_removesFood() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.remove(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_nullUniqueFoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((UniqueFoodList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_uniqueFoodList_replacesOwnListWithProvidedUniqueFoodList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFoods(expectedUniqueFoodList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFoods(foodList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_listWithDuplicateFoodItems_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e listWithDuplicateFoods \u003d Arrays.asList(TypicalFoodItems.APPLE, TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.setFoods(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            -\u003e uniqueFoodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 172
    }
  },
  {
    "path": "src/test/java/life/calgo/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonAdaptedFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.storage.JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.BANANA_MILKSHAKE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@APPLE!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CALORIE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CARBOHYDRATE \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"ABC!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_FAT \u003d \"IAMNOTFAT?!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_TAG \u003d \"# u a dum\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_NAME \u003d BANANA_MILKSHAKE.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CALORIE \u003d BANANA_MILKSHAKE.getCalorie().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_PROTEIN \u003d BANANA_MILKSHAKE.getProtein().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CARBOHYDRATE \u003d BANANA_MILKSHAKE.getFat().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_FAT \u003d BANANA_MILKSHAKE.getFat().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BANANA_MILKSHAKE.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(BANANA_MILKSHAKE, food.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(INVALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidCalorie_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, INVALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Calorie.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullCalorie_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, null, VALID_PROTEIN,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calorie.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidCarbohydrate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        INVALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Carbohydrate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullCarbohydrate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                null, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Carbohydrate.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidProtein_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, INVALID_PROTEIN,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Protein.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullProtein_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Protein.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidFat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, INVALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Fat.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullFat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Fat.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, invalidTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 133
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonFoodRecordStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class JsonFoodRecordStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFoodRecordStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readFoodRecord_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readFoodRecord(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new JsonFoodRecordStorage(Paths.get(filePath)).readFoodRecord(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(readFoodRecord(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readFoodRecord(\"notJsonFormatFoodRecord.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readFoodRecord_invalidFoodFoodRecord_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readFoodRecord(\"invalidFoodItemFoodRecord.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readFoodRecord_invalidAndValidFoodFoodRecord_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                DataConversionException.class, () -\u003e readFoodRecord(\"invalidAndValidFoodItemFoodRecord.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readAndSaveFoodRecord_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFoodRecord.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord original \u003d TypicalFoodItems.getTypicalFoodRecord();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage jsonFoodRecordStorage \u003d new JsonFoodRecordStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        jsonFoodRecordStorage.saveFoodRecord(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ReadOnlyFoodRecord readBack \u003d jsonFoodRecordStorage.readFoodRecord(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        original.addFood(TypicalFoodItems.ZINGER_BURGER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        original.removeFood(TypicalFoodItems.DUCK_RICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        jsonFoodRecordStorage.saveFoodRecord(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        readBack \u003d jsonFoodRecordStorage.readFoodRecord(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        original.addFood(TypicalFoodItems.YELLOW_SAUCE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        jsonFoodRecordStorage.saveFoodRecord(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        readBack \u003d jsonFoodRecordStorage.readFoodRecord().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void saveFoodRecord_nullFoodRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveFoodRecord(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private void saveFoodRecord(ReadOnlyFoodRecord foodRecord, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new JsonFoodRecordStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    .saveFoodRecord(foodRecord, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void saveFoodRecord_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveFoodRecord(new FoodRecord(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 112
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonSerializableFoodRecordTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class JsonSerializableFoodRecordTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFoodRecordTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path TYPICAL_FOOD_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodItemsFoodRecord.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodItemFoodRecord.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoodItemFoodRecord.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_typicalFoodItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonSerializableFoodRecord dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOOD_ITEMS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                JsonSerializableFoodRecord.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord foodRecordFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord typicalFoodItemsFoodRecord \u003d TypicalFoodItems.getTypicalFoodRecord();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(foodRecordFromFile, typicalFoodItemsFoodRecord);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonSerializableFoodRecord dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                JsonSerializableFoodRecord.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonSerializableFoodRecord dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                JsonSerializableFoodRecord.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFoodRecord.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 47
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        userPrefs.setFoodRecordFilePath(Paths.get(\"foodrecord.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.getTypicalFoodRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.ConsumptionRecordBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage foodRecordStorage \u003d new JsonFoodRecordStorage(getTempFilePath(\"fc\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonConsumptionRecordStorage consumptionRecordStorage \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new JsonConsumptionRecordStorage(getTempFilePath(\"cc\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonGoalStorage goalStorage \u003d new JsonGoalStorage(getTempFilePath(\"goal\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        storageManager \u003d new StorageManager(foodRecordStorage, consumptionRecordStorage, userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void foodRecordReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord original \u003d getTypicalFoodRecord();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        storageManager.saveFoodRecord(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ReadOnlyFoodRecord retrieved \u003d storageManager.readFoodRecord().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void consumptionRecordReadSave() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecord original \u003d new ConsumptionRecordBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        storageManager.saveConsumptionRecord(original);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ReadOnlyConsumptionRecord retrieved \u003d storageManager.readConsumptionRecord().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertEquals(original, new ConsumptionRecord(retrieved));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertNotNull(storageManager.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 12,
      "jeremylow97": 16,
      "-": 54
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/ConsumptionRecordBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A utility class to help with building ConsumptionRecord objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class ConsumptionRecordBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private ConsumptionRecord consumptionRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecordBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a {@code ConsumptionRecordBuilder} based on a {@code DailyFoodLog}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecordBuilder withLog(DailyFoodLog dailyFoodLog) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.addLog(dailyFoodLog);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 29
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/FoodBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Food Name\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_CALORIE \u003d \"1230\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_PROTEIN \u003d \"123\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_CARBOHYDRATE \u003d \"456\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_FAT \u003d \"789\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Calorie calorie;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Protein protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Carbohydrate carbohydrate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        calorie \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        protein \u003d new Protein(DEFAULT_PROTEIN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        carbohydrate \u003d new Carbohydrate(DEFAULT_CARBOHYDRATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        calorie \u003d foodToCopy.getCalorie();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        protein \u003d foodToCopy.getProtein();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        carbohydrate \u003d foodToCopy.getCarbohydrate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.calorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Protein} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withProtein(String protein) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.protein \u003d new Protein(protein);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Carbohydrate} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withCarbohydrate(String carbohydrate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.carbohydrate \u003d new Carbohydrate(carbohydrate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withFat(String fat) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.fat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new Food(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 106
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/FoodRecordBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodRecordBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private FoodRecord foodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordBuilder(FoodRecord foodRecord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.foodRecord \u003d foodRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Adds a new {@code Food} to the {@code FoodRecord} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordBuilder withFood(Food food) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.addFood(food);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecord build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return foodRecord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 35
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/FoodUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static String getUpdateCommand(Food food) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return UpdateCommand.COMMAND_WORD + \" \" + getPersonDetails(food);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static String getPersonDetails(Food food) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_CALORIES + food.getCalorie().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_PROTEIN + food.getProtein().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_CARBOHYDRATE + food.getCarbohydrate().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_FAT + food.getFat().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 41
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodRecord().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodRecord().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static Food getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return model.getFilteredFoodRecord().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TypicalDailyFoodLog.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Utility class for DailyFoodLog related tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class TypicalDailyFoodLog {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final LocalDate CURRENT_DATE \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final DailyFoodLog DAILY_FOOD_LOG_TODAY \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new DailyFoodLog(buildFoods(), buildRatings(), CURRENT_DATE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to create food to portion map needed to build DailyFoodLog."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static LinkedHashMap\u003cFood, Double\u003e buildFoods() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.ALMOND, 3.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.BANANA, 6.9);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.BANANA_MILKSHAKE, 1.0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.DUCK_RICE, 1.0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.YELLOW_SAUCE, 2.4);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to create food to ratings map needed to build DailyFoodLog."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e buildRatings() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArrayList\u003cInteger\u003e ratingsArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.ALMOND, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(6);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(9);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.BANANA, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(8);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.BANANA_MILKSHAKE, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(0, 8);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.DUCK_RICE, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.set(1, 10);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.YELLOW_SAUCE, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return ratings;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 62
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TypicalFoodItems.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class TypicalFoodItems {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food ALMOND \u003d new FoodBuilder().withName(\"Almond\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"95\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"20\").withCarbohydrate(\"20\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"10\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"fruit\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food BANANA_MILKSHAKE \u003d new FoodBuilder().withName(\"Banana Milkshake\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"200\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"10\").withCarbohydrate(\"40\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"15\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"dairy\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food CHOCOLATE_BAR \u003d new FoodBuilder().withName(\"Chocolate Bar\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"300\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"12\").withCarbohydrate(\"90\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"30\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"snack\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food DUCK_RICE \u003d new FoodBuilder().withName(\"Duck Rice\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"238\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"20\").withCarbohydrate(\"120\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"20\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"favourite\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food EGG_OMELETTE \u003d new FoodBuilder().withName(\"Egg Omelette\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"233\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"25\").withCarbohydrate(\"10\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"14\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food FISH_AND_CHIPS \u003d new FoodBuilder().withName(\"Fish and Chips\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"400\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"30\").withCarbohydrate(\"20\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"40\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food GRANOLA \u003d new FoodBuilder().withName(\"Granola\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"300\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"10\").withCarbohydrate(\"40\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"3\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food APPLE \u003d new FoodBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"100\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"3\").withCarbohydrate(\"40\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"1\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food BANANA \u003d new FoodBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"200\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"1\").withCarbohydrate(\"50\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"12\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    // Manually added for other testing purposes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food ZINGER_BURGER \u003d new FoodBuilder().withName(\"Zinger Burger\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"1200\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"33\").withCarbohydrate(\"400\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"12\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food YELLOW_SAUCE \u003d new FoodBuilder().withName(\"Yellow Sauce\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"20000\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withProtein(\"111\").withCarbohydrate(\"520\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"132\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private TypicalFoodItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static FoodRecord getTypicalFoodRecord() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord ab \u003d new FoodRecord();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            ab.addFood(food);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns a list with all the typical persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFoodItems() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                ALMOND, BANANA_MILKSHAKE, CHOCOLATE_BAR,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                DUCK_RICE, EGG_OMELETTE, FISH_AND_CHIPS, GRANOLA));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 91
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Index INDEX_FIRST_FOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Index INDEX_SECOND_FOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Index INDEX_THIRD_FOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 12
    }
  },
  {
    "path": "src/test/java/life/calgo/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/life/calgo/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c?import life.calgo.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003cfx:root type\u003d\"life.calgo.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 5
    }
  }
]
