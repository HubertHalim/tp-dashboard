[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 1,
      "-": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.storage.consults.ConsultStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.storage.consults.JsonConsultStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.tutorials.JsonTutorialStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.tutorials.TutorialStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultStorage consultStorage \u003d new JsonConsultStorage(userPrefs.getConsultTAbleFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialStorage tutorialStorage \u003d new JsonTutorialStorage(userPrefs.getTutorialTableFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage, tutorialStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s TAble and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The data from the sample TAble will be used instead if {@code storage}\u0027s TAble is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * or an empty TAble will be used instead if errors occur when reading {@code storage}\u0027s TAble."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Optional\u003cReadOnlyConsult\u003e consultsOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Optional\u003cReadOnlyTutorial\u003e tutorialsOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ReadOnlyConsult initialConsults;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ReadOnlyTutorial initialTutorials;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consultsOptional \u003d storage.readConsults();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            tutorialsOptional \u003d storage.readTutorials();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (!consultsOptional.isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                logger.info(\"Consults file not found. Will be starting with no consults\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (!tutorialsOptional.isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                logger.info(\"Tutorials file not found. Will be starting with no tutorials.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialConsults \u003d consultsOptional.orElseGet(SampleDataUtil::getSampleConsults);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            initialTutorials \u003d tutorialsOptional.orElseGet(SampleDataUtil::getSampleTutorials);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialConsults \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            initialTutorials \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialConsults \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            initialTutorials \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialConsults, initialTutorials);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.info(\"Starting TAble \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TAble ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 176,
      "hanchingyong": 20,
      "suwoons": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_INVALID_CONSULT_DISPLAYED_INDEX \u003d \"The consult index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX \u003d \"The tutorial index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "hanchingyong": 1,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.TAbleParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final TAbleParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        addressBookParser \u003d new TAbleParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "hanchingyong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_REMARK + \"REMARK \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_REMARK + \"Nice \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "hanchingyong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Remark updatedRemark \u003d editPersonDescriptor.getRemarks().orElse(personToEdit.getRemark());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags, updatedRemark);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cRemark\u003e getRemarks() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 215,
      "hanchingyong": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                personToEdit.getTags(), remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/AddConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Adds a consult into TAble."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class AddConsultCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addConsult\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a consultation to TAble. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_BEGIN_DATE_TIME + \"EVENT_BEGIN_DATE_TIME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_END_DATE_TIME + \"EVENT_END_DATE_TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_PLACE + \"PLACE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"STUDENT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_BEGIN_DATE_TIME + \"2020-03-03 10:00 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_END_DATE_TIME + \"2020-03-03 12:00 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_PLACE + \"Outside SR1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"A0123456P\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New consultation added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULT \u003d \"There is already a consultation at that timing.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Consult toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates an AddConsultCommand to add the specified {@code Consult}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public AddConsultCommand(Consult consult) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        toAdd \u003d consult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (model.hasConsult(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONSULT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.addConsult(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof AddConsultCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddConsultCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 54,
      "suwoons": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/DeleteConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Deletes a consult identified using it\u0027s displayed index from the Consult TAble."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DeleteConsultCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteConsult\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \": Deletes the consult identified by the index number used in the displayed Consult TAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_DELETE_CONSULT_SUCCESS \u003d \"Deleted Consult: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public DeleteConsultCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        List\u003cConsult\u003e lastShownList \u003d model.getFilteredConsultList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONSULT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult consultToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.deleteConsult(consultToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CONSULT_SUCCESS, consultToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof DeleteConsultCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteConsultCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 54,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/EditConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONSULTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Edits the details of an existing consult in TAble."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class EditConsultCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editConsult\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the consult identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"by the index number used in the displayed consult list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"[\" + PREFIX_CONSULT_BEGIN_DATE_TIME + \"BEGINDATETIME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"[\" + PREFIX_CONSULT_END_DATE_TIME + \"ENDDATETIME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"[\" + PREFIX_PLACE + \"PLACE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_CONSULT_BEGIN_DATE_TIME + \"2020-03-03 15:00\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_PLACE + \"The Deck\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_EDIT_CONSULT_SUCCESS \u003d \"Edited Consult: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULT \u003d \"There is already a consultation at that timing.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final EditConsultDescriptor editConsultDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index of the consult in the filtered consult list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param editConsultDescriptor details to edit the consult with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public EditConsultCommand(Index index, EditConsultDescriptor editConsultDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(editConsultDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.editConsultDescriptor \u003d new EditConsultDescriptor(editConsultDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        List\u003cConsult\u003e lastShownList \u003d model.getFilteredConsultList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONSULT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult consultToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult editedConsult \u003d createEditedConsult(consultToEdit, editConsultDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!consultToEdit.equals(editedConsult) \u0026\u0026 model.hasConsult(editedConsult)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONSULT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.setConsult(consultToEdit, editedConsult);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.updateFilteredConsultList(PREDICATE_SHOW_ALL_CONSULTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CONSULT_SUCCESS, editedConsult));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates and returns a {@code Consult} with the details of {@code consultToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * edited with {@code editConsultDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static Consult createEditedConsult(Consult consultToEdit, EditConsultDescriptor editConsultDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assert consultToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime updatedBeginStartTime \u003d editConsultDescriptor.getConsultBeginDateTime()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .orElse(consultToEdit.getConsultBeginDateTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime updatedEndStartTime \u003d editConsultDescriptor.getConsultEndDateTime()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .orElse(consultToEdit.getConsultEndDateTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Location updatedLocation \u003d editConsultDescriptor.getLocation().orElse(consultToEdit.getPlace());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Consult(updatedBeginStartTime, updatedEndStartTime, updatedLocation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof EditConsultCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        EditConsultCommand e \u003d (EditConsultCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 editConsultDescriptor.equals(e.editConsultDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Stores the details to edit the consult with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * corresponding field value of the consult."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static class EditConsultDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private LocalDateTime consultBeginDateTime;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private LocalDateTime consultEndDateTime;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public EditConsultDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public EditConsultDescriptor(EditConsultDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setConsultBeginDateTime(toCopy.consultBeginDateTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setConsultEndDateTime(toCopy.consultEndDateTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(consultBeginDateTime,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    consultEndDateTime, location);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setConsultBeginDateTime(LocalDateTime consultBeginDateTime) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.consultBeginDateTime \u003d consultBeginDateTime;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getConsultBeginDateTime() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(consultBeginDateTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setConsultEndDateTime(LocalDateTime consultEndDateTime) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.consultEndDateTime \u003d consultEndDateTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getConsultEndDateTime() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(consultEndDateTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (!(other instanceof EditConsultDescriptor)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            EditConsultDescriptor e \u003d (EditConsultDescriptor) other;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return getConsultBeginDateTime().equals(e.getConsultBeginDateTime())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u0026\u0026 getConsultEndDateTime().equals(e.getConsultEndDateTime())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/ListConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONSULTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Lists all consults in TAble."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ListConsultCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listConsult\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d COMMAND_WORD + \": Listed all consults. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.updateFilteredConsultList(PREDICATE_SHOW_ALL_CONSULTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/AddTutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_BEGIN_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Adds a Tutorial to TAble."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AddTutorialCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTutorial\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tutorial to TAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_MODULE_NAME + \"MODULE_NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKDAY + \"TUTORIAL_WEEKDAY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_BEGIN_TIME + \"TUTORIAL_BEGIN_TIME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_END_TIME + \"TUTORIAL_END_TIME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_PLACE + \"PLACE\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_MODULE_NAME + \"CS2103 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"T03 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKDAY + \"Wednesday \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_BEGIN_TIME + \"15:00 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_END_TIME + \"16:00 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_PLACE + \"COM1-B113 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tutorial added!\\n%1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"This tutorial already exists in TAble.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Tutorial toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates an AddTutorialCommand to add the specified {@code tutorial}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AddTutorialCommand(Tutorial tutorial) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        toAdd \u003d tutorial;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (model.hasTutorial(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model.addTutorial(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof AddTutorialCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTutorialCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/DeleteTutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Deletes an existing Tutorial from TAble."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DeleteTutorialCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTutorial\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \": Deletes the tutorial identified by the index number used in the displayed Tutorial TAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_INDEX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DELETE_TUTORIAL_SUCCESS \u003d \"Deleted Tutorial!\\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DeleteTutorialCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorialToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model.deleteTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TUTORIAL_SUCCESS, tutorialToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof DeleteTutorialCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTutorialCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/ListTutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORIALS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Lists all tutorials in TAble."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class ListTutorialCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTutorial\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d COMMAND_WORD + \": Listed all tutorials\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model.updateFilteredTutorialList(PREDICATE_SHOW_ALL_TUTORIALS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG, PREFIX_REMARK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command cannot add remarks straight away"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person person \u003d new Person(name, phone, email, tagList, remark);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "hanchingyong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_PLACE \u003d new Prefix(\"place/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_STUDENT \u003d new Prefix(\"student/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"INDEX (must be a positive integer)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /* Consult definitions */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_CONSULT_BEGIN_DATE_TIME \u003d new Prefix(\"beginDateTime/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_CONSULT_END_DATE_TIME \u003d new Prefix(\"endDateTime/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /* Tutorial definitions */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_NAME \u003d new Prefix(\"tutorialName/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_WEEKDAY \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_BEGIN_TIME \u003d new Prefix(\"beginTime/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_END_TIME \u003d new Prefix(\"endTime/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /* Module definitions */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NAME \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "hanchingyong": 7,
      "suwoons": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"Format of date and time is not supported.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Format of time is not supported.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY \u003d \"Format of day is not supported.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses {@code \u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static Location parsePlace(String location) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The format of the LocalDateTime will be in the format yyyy-MM-dd HH:mm."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            formattedDateTime \u003d LocalDateTime.parse(trimmedDateTime, formatter);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String time} into a {@code LocalTime}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The format of the LocalTime will be in the format HH:mm."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime formattedTime;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            formattedTime \u003d LocalTime.parse(trimmedTime, formatter);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return formattedTime;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String day} into a {@code DayOfWeek}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static DayOfWeek parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek parsedDay;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            parsedDay \u003d DayOfWeek.of(Integer.parseInt(trimmedDay));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return parsedDay;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String tutorialName} into a {@code TutorialName}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code tutorialName} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static TutorialName parseTutorialName(String tutorialName) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorialName);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedTutorialName \u003d tutorialName.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!TutorialName.isValidTutorialName(trimmedTutorialName)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(TutorialName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new TutorialName(trimmedTutorialName);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "hanchingyong": 32,
      "suwoons": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parses input arguments and creates a new RemarkCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemarkCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns an RemarkCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                PREFIX_REMARK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Remark remark \u003d new Remark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TAbleParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.AddConsultCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.DeleteConsultCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.EditConsultCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.ListConsultCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.AddTutorialCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.DeleteTutorialCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.ListTutorialCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.AddConsultCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.ClearConsultCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.DeleteConsultCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.EditConsultCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.tutorials.AddTutorialCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.tutorials.DeleteTutorialCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class TAbleParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case AddConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new AddConsultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case ListConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new ListConsultCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case DeleteConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new DeleteConsultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case EditConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new EditConsultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case ClearConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new ClearConsultCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case AddTutorialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new AddTutorialCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case DeleteTutorialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new DeleteTutorialCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case ListTutorialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new ListTutorialCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "hanchingyong": 29,
      "suwoons": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/AddConsultCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.AddConsultCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class AddConsultCommandParser implements Parser\u003cAddConsultCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddConsultCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns an AddConsultCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public AddConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONSULT_BEGIN_DATE_TIME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        PREFIX_CONSULT_END_DATE_TIME, PREFIX_PLACE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONSULT_BEGIN_DATE_TIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_CONSULT_END_DATE_TIME, PREFIX_PLACE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    AddConsultCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalDateTime eventBeginDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_CONSULT_BEGIN_DATE_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalDateTime eventEndDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_CONSULT_END_DATE_TIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Location location \u003d ParserUtil.parsePlace(argMultimap.getValue("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_PLACE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONSULT_STUDENT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Consult consult \u003d new Consult(eventBeginDateTime, eventEndDateTime, location);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new AddConsultCommand(consult);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 50,
      "suwoons": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/ClearConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Clears the Consult TAble."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ClearConsultCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearConsults\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Consult TAble has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.clearConsults();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/DeleteConsultCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.DeleteConsultCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parses input arguments and creates a new DeleteConsultCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DeleteConsultCommandParser implements Parser\u003cDeleteConsultCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteConsultCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns a DeleteConsultCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public DeleteConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new DeleteConsultCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 31,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/EditConsultCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.EditConsultCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class EditConsultCommandParser implements Parser\u003cEditConsultCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditConsultCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns an EditConsultCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public EditConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONSULT_BEGIN_DATE_TIME, PREFIX_CONSULT_END_DATE_TIME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        PREFIX_PLACE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    EditConsultCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        EditConsultCommand.EditConsultDescriptor editConsultDescriptor \u003d new EditConsultCommand.EditConsultDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONSULT_BEGIN_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            editConsultDescriptor.setConsultBeginDateTime("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_CONSULT_BEGIN_DATE_TIME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONSULT_END_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            editConsultDescriptor.setConsultEndDateTime("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_CONSULT_END_DATE_TIME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PLACE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            editConsultDescriptor.setLocation(ParserUtil.parsePlace(argMultimap.getValue(PREFIX_PLACE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!editConsultDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(EditConsultCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new EditConsultCommand(index, editConsultDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/AddTutorialCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_BEGIN_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.AddTutorialCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new AddTutorial object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AddTutorialCommandParser implements Parser\u003cAddTutorialCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTutorialCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns an AddTutorialCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AddTutorialCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_NAME, PREFIX_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        PREFIX_TUTORIAL_WEEKDAY, PREFIX_TUTORIAL_BEGIN_TIME, PREFIX_TUTORIAL_END_TIME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        PREFIX_PLACE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_NAME, PREFIX_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_WEEKDAY, PREFIX_TUTORIAL_BEGIN_TIME, PREFIX_TUTORIAL_END_TIME,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_PLACE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    AddTutorialCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // convert to module name after parser module name implemented"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String moduleName \u003d argMultimap.getValue(PREFIX_MODULE_NAME).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialName tutorialName \u003d ParserUtil.parseTutorialName(argMultimap.getValue("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek weekday \u003d ParserUtil.parseDay(argMultimap.getValue("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_WEEKDAY).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime beginTime \u003d ParserUtil.parseTime(argMultimap.getValue("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_BEGIN_TIME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "               PREFIX_TUTORIAL_END_TIME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Location location \u003d ParserUtil.parsePlace(argMultimap.getValue("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_PLACE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorial \u003d new Tutorial(moduleName, tutorialName, weekday, beginTime, endTime, location);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new AddTutorialCommand(tutorial);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 1,
      "suwoons": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/DeleteTutorialCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.DeleteTutorialCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new DeleteTutorialCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DeleteTutorialCommandParser implements Parser\u003cDeleteTutorialCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTutorialCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns a DeleteTutorialCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DeleteTutorialCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new DeleteTutorialCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTutorialCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.UniqueConsultList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.UniqueTutorialList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final UniqueConsultList consults;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final UniqueTutorialList tutorials;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults \u003d new UniqueConsultList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns {@code student} from {@code TAble}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code student} must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Person getStudent(int index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return persons.getStudent(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /// consult-level operations"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if a consult with the same identity as {@code consult} exists in TAble."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consult);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.contains(consult);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds a consult to TAble."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must not already exist in TAble."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.add(consult);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /// tutorial-level operations"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a tutorial with the same identity as {@code tutorial} exists in TAble."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.contains(tutorial);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a tutorial to TAble."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must not already exist in TAble."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.add(tutorial);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "hanchingyong": 32,
      "suwoons": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Predicate\u003cConsult\u003e PREDICATE_SHOW_ALL_CONSULTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Predicate\u003cTutorial\u003e PREDICATE_SHOW_ALL_TUTORIALS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // Consult-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a consult with the same identity as {@code consult} exists in TAble."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    boolean hasConsult(Consult consult);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds the given consult."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consult} must not already exist in TAble."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void addConsult(Consult consult);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Deletes the given consult."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must exist in TAble."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void deleteConsult(Consult target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the given consult {@code consultToEdit} with {@code editedConsult}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consultToEdit} must exist in TAble."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The person identity of {@code editedConsult} must not be the same as another existing consult in TAble."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void setConsult(Consult consultToEdit, Consult editedConsult);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Deletes all consults in the Consult TAble."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void clearConsults();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered consult list */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    ObservableList\u003cConsult\u003e getFilteredConsultList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Updates the filter of the filtered consult list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // Tutorial-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a tutorial with the same identity as {@code tutorial} exists in TAble."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    boolean hasTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds the given tutorial."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorial} must not already exist in TAble."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void addTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Deletes the given tutorial."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must exist in TAble."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void deleteTutorial(Tutorial target);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /** Returns an unmodifiable view of the filtered tutorial list */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    ObservableList\u003cTutorial\u003e getFilteredTutorialList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Updates the filter of the filtered tutorial list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "hanchingyong": 39,
      "suwoons": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final ConsultTAble consultTAble;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final FilteredList\u003cConsult\u003e filteredConsults;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final TutorialTAble tutorialTAble;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final FilteredList\u003cTutorial\u003e filteredTutorials;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyConsult consultTAble,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        ReadOnlyTutorial tutorialTAble) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, consultTAble, tutorialTAble);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" ,user prefs \" + userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \" and \" + consultTAble);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultTAble \u003d new ConsultTAble(consultTAble);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        filteredConsults \u003d new FilteredList\u003c\u003e(this.consultTAble.getAllConsults());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialTAble \u003d new TutorialTAble(tutorialTAble);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        filteredTutorials \u003d new FilteredList\u003c\u003e(this.tutorialTAble.getAllTutorials());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Gets student with specific index number."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param indexNumber Index number of student."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Student with index number specified."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Person getStudent(int indexNumber) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return addressBook.getStudent(indexNumber);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    // Consults section \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consult);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAble.hasConsult(consult);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.addConsult(consult);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void deleteConsult(Consult target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.removeConsult(target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsult(Consult consultToEdit, Consult editedConsult) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(consultToEdit, editedConsult);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.setConsult(consultToEdit, editedConsult);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void clearConsults() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.clearConsults();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return filteredConsults;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        filteredConsults.setPredicate(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // Tutorials section"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return tutorialTAble.hasTutorial(tutorial);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorialTAble.addTutorial(tutorial);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void deleteTutorial(Tutorial target) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialTAble.removeTutorial(target);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return filteredTutorials;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        filteredTutorials.setPredicate(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 146,
      "hanchingyong": 62,
      "suwoons": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Path consultTAbleFilePath \u003d Paths.get(\"data\", \"consults.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Path tutorialTableFilePath \u003d Paths.get(\"data\", \"tutorials.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    // Consults start"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Path getConsultTAbleFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAbleFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsultTAbleFilePath(Path consultTAbleFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consultTAbleFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultTAbleFilePath \u003d consultTAbleFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //end"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // Tutorials start"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Path getTutorialTableFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialTableFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setTutorialTableFilePath(Path tutorialTableFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorialTableFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialTableFilePath \u003d tutorialTableFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // end"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "hanchingyong": 12,
      "suwoons": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Location.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Represents a location in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Represents Location where Consults and Tutorials are held."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \"Locations should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public final String eventLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param eventLocation A valid event location."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Location(String eventLocation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(eventLocation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        checkArgument(isValidLocation(eventLocation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return eventLocation;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 eventLocation.equals(((Location) other).eventLocation)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return eventLocation.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 57,
      "suwoons": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/Consult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a Consultation in TAble."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Consult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private LocalDateTime consultBeginDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private LocalDateTime consultEndDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult(LocalDateTime consultBeginDateTime, LocalDateTime consultEndDateTime,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                 Location location) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(consultBeginDateTime, consultEndDateTime, location);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultBeginDateTime \u003d consultBeginDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultEndDateTime \u003d consultEndDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public LocalDateTime getConsultBeginDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultBeginDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public LocalDateTime getConsultEndDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultEndDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Location getPlace() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if both consults have the same Date and Time, as the TA cannot attend both."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof Consult)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult otherEvent \u003d (Consult) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return otherEvent.getConsultBeginDateTime().equals(getConsultBeginDateTime())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 otherEvent.getConsultEndDateTime().equals(getConsultEndDateTime());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        builder.append(\" Start Time: \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(getConsultBeginDateTime())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(getConsultEndDateTime())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(\" Place: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(getPlace());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 68,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/ConsultTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Wraps all consult data at the Consult TAble level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultTAble implements ReadOnlyConsult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final UniqueConsultList consults;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults \u003d new UniqueConsultList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates a ConsultTAble using the consults in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble(ReadOnlyConsult toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "      * Creates a ConsultTAble using the consults in the {@code consultList}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble(List\u003cConsult\u003e consultList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consults.setConsults(consultList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the contents of the consult list with {@code consults}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consults} must not contain duplicate consults."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsults(List\u003cConsult\u003e consults) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consults.setConsults(consults);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Resets the existing data of this {@code ConsultTAble} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void resetData(ReadOnlyConsult newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        setConsults(newData.getAllConsults());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //// Consult-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if a consult with the same identity as {@code consult} exists in TAble."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consult);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.contains(consult);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds a consult to TAble."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must not already exist in TAble."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.add(consult);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the given consult {@code target} in the list with {@code editedConsult}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code target} must exist in the ConsultTAble."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult identity of {@code editedConsult} must not be the same"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * as another existing person in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsult(Consult target, Consult editedConsult) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(editedConsult);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.setConsult(target, editedConsult);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes {@code key} from this {@code ConsultTAble}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code key} must exist in the Consult TAble."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void removeConsult(Consult key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns {@code consult} from {@code TAble}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consult} must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult getConsult(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.getConsult(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes all {@code consults} from this {@code ConsultTAble}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void clearConsults() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.clearConsults();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.asUnmodifiableObservableList().size() + \" consults\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e getAllConsults() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof ConsultTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 consults.equals(((ConsultTAble) other).consults));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/ReadOnlyConsult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Unmodifiable view of all Consults."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public interface ReadOnlyConsult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns an unmodifiable view of the consults list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * This list will not contain any duplicate consults."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    List\u003cConsult\u003e getAllConsults();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/UniqueConsultList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.exceptions.ConsultNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.exceptions.DuplicateConsultException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A list of consults that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A consult is considered unique by comparing using {@code Consult#equals(Consult)}. As such, adding, updating and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * removal of consult uses Consult#equals(Consult) so as to ensure that the consult being added, updated or removed is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * unique in terms of identity in the UniqueConsultList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * @see Consult#equals(Object)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class UniqueConsultList implements Iterable\u003cConsult\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final ObservableList\u003cConsult\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final ObservableList\u003cConsult\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if the list contains an equivalent consult as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean contains(Consult toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds a consult to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void add(Consult toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DuplicateConsultException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the consult {@code target} in the list with {@code editedConsult}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The person identity of {@code editedConsult} must not be the same as another existing consult in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsult(Consult target, Consult editedConsult) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(target, editedConsult);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ConsultNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!target.equals(editedConsult) \u0026\u0026 contains(editedConsult)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DuplicateConsultException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.set(index, editedConsult);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes the equivalent consult from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void remove(Consult toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ConsultNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsults(UniqueConsultList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the contents of this list with {@code consults}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consults} must not contain duplicate consults."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsults(List\u003cConsult\u003e consults) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(consults);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!consultsAreUnique(consults)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DuplicateConsultException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.setAll(consults);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the consult at the {@code index}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index Index of the student."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Consult at the index."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult getConsult(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes all {@code consults} from this {@code ConsultTAble}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void clearConsults() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.remove(0, internalList.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Iterator\u003cConsult\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof UniqueConsultList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueConsultList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if {@code consults} contains only unique consults."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private boolean consultsAreUnique(List\u003cConsult\u003e consults) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (int i \u003d 0; i \u003c consults.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c consults.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                if (consults.get(i).equals(consults.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e getAllConsults() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 157,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/exceptions/ConsultNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Signals that the operation is unable to find the specified consult."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/exceptions/DuplicateConsultException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Signals that the operation will result in duplicate Consults (Consults are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DuplicateConsultException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public DuplicateConsultException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(\"Operation would result in duplicate consults\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/ReadOnlyTutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Unmodifiable view of all Tutorials."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public interface ReadOnlyTutorial {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns an unmodifiable view of the tutorials list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * This list will not contain any duplicate tutorials."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    List\u003cTutorial\u003e getAllTutorials();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Represents a Tutorial in TAble."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private TutorialName tutorialName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private DayOfWeek weekday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private LocalTime beginTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // ArrayList\u003cStudent\u003e enrolledStudents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // note to self: implement tutorialName object to replace the String, and replace module with Module object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial(String module, TutorialName tutorialName, DayOfWeek weekday,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    LocalTime beginTime, LocalTime endTime, Location location) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(module, tutorialName, weekday, beginTime, endTime, location);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.module \u003d module.toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekday \u003d weekday;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.beginTime \u003d beginTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialName getTutorialName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return weekday;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return beginTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if both tutorials have the same module and tutorial name fields."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!(other instanceof Tutorial)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial otherTutorial \u003d (Tutorial) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return otherTutorial.getModule().equals(getModule())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 otherTutorial.getTutorialName().equals(getTutorialName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        builder.append(\" Module: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getModule())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Tutorial Name: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getTutorialName())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Day: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getDay())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Begin TIme: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getBeginTime())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getLocation());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/TutorialName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a Tutorial\u0027s name in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTutorialName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The first character of the tutorial name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public final String tutorialName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code TutorialName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param tutorialName A valid tutorial name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialName(String tutorialName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorialName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        checkArgument(isValidTutorialName(tutorialName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a given string is a valid tutorial name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static boolean isValidTutorialName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof TutorialName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 tutorialName.equals(((TutorialName) other).tutorialName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 1,
      "suwoons": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/TutorialTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Wraps all tutorial data at the Tutorial TAble level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialTAble implements ReadOnlyTutorial {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final UniqueTutorialList tutorials;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a TutorialTAble using the tutorials in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble(ReadOnlyTutorial toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a TutorialTAble using the tutorials in the {@code consultList}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble(List\u003cTutorial\u003e tutorialList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorials.setTutorials(tutorialList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Replaces the contents of the tutorial list with {@code tutorials}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorials} must not contain duplicate tutorials."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setTutorials(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorials.setTutorials(tutorials);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Resets the existing data of this {@code TutorialTAble} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void resetData(ReadOnlyTutorial newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        setTutorials(newData.getAllTutorials());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    //// Tutorial-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a tutorial with the same identity as {@code tutorial} exists in TAble."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.contains(tutorial);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a tutorial to TAble."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must not already exist in TAble."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.add(tutorial);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Removes {@code key} from this {@code TutorialTAble}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code key} must exist in the Tutorial TAble."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void removeTutorial(Tutorial key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns {@code tutorial} from {@code TAble}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorial} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial getTutorial(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.getTutorial(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.asUnmodifiableObservableList().size() + \" consults\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getAllTutorials() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof TutorialTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 tutorials.equals(((TutorialTAble) other).tutorials));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/UniqueTutorialList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.exceptions.DuplicateTutorialException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.exceptions.TutorialNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A list of tutorials that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A tutorial is considered unique by comparing using {@code Tutorial#equals(Tutorial)}. As such, adding, updating and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * removal of tutorial uses Tutorial#equals(Tutorial) so as to ensure that the tutorial being added, updated or removed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * is unique in terms of identity in the UniqueTutorialList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * @see Tutorial#equals(Object)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class UniqueTutorialList implements Iterable\u003cTutorial\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final ObservableList\u003cTutorial\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final ObservableList\u003cTutorial\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if the list contains an equivalent tutorial as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean contains(Tutorial toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a tutorial to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void add(Tutorial toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Removes the equivalent tutorial from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void remove(Tutorial toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setTutorials(UniqueTutorialList replacement) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Replaces the contents of this list with {@code tutorials}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorials} must not contain duplicate tutorials."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setTutorials(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorials);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!tutorialsAreUnique(tutorials)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        internalList.setAll(tutorials);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Iterator\u003cTutorial\u003e iterator() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof UniqueTutorialList // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTutorialList) other).internalList));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if {@code tutorials} contains only unique tutorials."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private boolean tutorialsAreUnique(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c tutorials.size() - 1; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tutorials.size(); j++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                if (tutorials.get(i).equals(tutorials.get(j))) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns the tutorial at the {@code index}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param index Index of the tutorial."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @return Tutorial at the index."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial getTutorial(int index) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getAllTutorials() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/exceptions/DuplicateTutorialException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Signals that the operation will result in duplicate Tutorials (Tutorials are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * if they have the same module and tutorial name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DuplicateTutorialException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DuplicateTutorialException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        super(\"Operation would result in duplicate consults\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/exceptions/TutorialNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Signals that the operation is unable to find the specified tutorial."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/Mod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Represents a Module in TAble."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Mod {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final Map\u003cString, ModLink\u003e links \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod(ModCode modCode, String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(modCode, description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModCode getModCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns an immutable map of description and links, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Map\u003cString, ModLink\u003e getLinks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Collections.unmodifiableMap(links);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if both modules have the same module code."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean isSameMod(seedu.address.model.mod.Mod otherMod) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (otherMod \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return otherMod !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 otherMod.getModCode().equals(getModCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if both persons have the same module code, description and tags."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!(other instanceof seedu.address.model.mod.Mod)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        seedu.address.model.mod.Mod otherMod \u003d (seedu.address.model.mod.Mod) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return otherMod.getModCode().equals(getModCode())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 otherMod.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 otherMod.getLinks().equals(getLinks());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Objects.hash(modCode, description, links);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        builder.append(getModCode())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .append(\" Links: \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        getLinks().forEach((desc, link) -\u003e builder.append(desc).append(\" \").append(link).append(\"\\n\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ModCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Represents a Module\u0027s module code in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModCode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Modules should be of the format Department0000Subcode \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"1. The department should only contain either two or three capital letters\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"2. This is followed by 4 numbers, with the first not being zero.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"The subcode cannot be more than 2 capital letters long. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The entire string must fit the specifications for it to be valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Z]{2,3}\\\\d{4}[A-Z]{0,2}$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public final String modCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructs a {@code ModCode}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param modCode A valid module code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModCode(String modCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        checkArgument(isValidModCode(modCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if a given string is a valid tutorial name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static boolean isValidModCode(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.ModCode // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 modCode.equals(((seedu.address.model.mod.ModCode) other).modCode)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ModLink.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Represents a Module\u0027s link to a web resource in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModLink(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModLink {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Module links should follow a URL link\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The entire string must fit the specifications for it to be valid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \"^(https?|ftp|file)://[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public final String modLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructs a {@code ModLink}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param modLink A valid module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModLink(String modLink) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modLink);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        checkArgument(isValidModLink(modLink), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modLink \u003d modLink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if a given string is a valid tutorial name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static boolean isValidModLink(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modLink;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.ModLink // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 modLink.equals(((seedu.address.model.mod.ModLink) other).modLink)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modLink.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ModTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Wraps all module data at the ModTAble level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModTAble implements ReadOnlyMod {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final UniqueModList mods;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods \u003d new UniqueModList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModTAble() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates a ModTAble using the modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModTAble(ReadOnlyMod toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates a ModTAble using the tutorials in the {@code modList}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModTAble(List\u003cMod\u003e modList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.mods.setMods(modList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Replaces the contents of the module list with {@code mods}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code tutorials} must not contain duplicate modules."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMods(List\u003cMod\u003e mods) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.mods.setMods(mods);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Resets the existing data of this {@code ModTAble} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void resetData(ReadOnlyMod newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        setMods(newData.getAllMods());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //// Mod-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in TAble."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean hasMod(Mod module) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.contains(module);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Adds a module to TAble."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module must not already exist in TAble."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void addMod(Mod module) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods.add(module);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Removes {@code key} from this {@code ModTAble}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code key} must exist in the ModTAble."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void removeMod(Mod key) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods.remove(key);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns {@code mod} from {@code TAble}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code module} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod getMod(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.getMod(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getAllMods() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.ModTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 mods.equals(((seedu.address.model.mod.ModTAble) other).mods));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ReadOnlyMod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Unmodifiable view of all modules."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public interface ReadOnlyMod {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    List\u003cMod\u003e getAllMods();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/UniqueModList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.exceptions.DuplicateModException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.exceptions.ModNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * A module is considered unique by comparing using {@code Mod#equals(Object)}. As such, adding, updating and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * removal of module uses Mod#equals(Object) so as to ensure that the module being added, updated or removed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * is unique in terms of identity in the UniqueModList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * @see seedu.address.model.mod.Mod#equals(Object)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class UniqueModList implements Iterable\u003cMod\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ObservableList\u003cMod\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ObservableList\u003cMod\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean contains(Mod toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void add(Mod toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new DuplicateModException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void remove(Mod toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMods(UniqueModList replacement) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Replaces the contents of this list with {@code mods}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code mods} must not contain duplicate modules."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMods(List\u003cMod\u003e mods) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(mods);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!modsAreUnique(mods)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new DuplicateModException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        internalList.setAll(mods);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Iterator\u003cMod\u003e iterator() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.UniqueModList // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.mod.UniqueModList) other).internalList));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if {@code mods} contains only unique modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private boolean modsAreUnique(List\u003cMod\u003e mods) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        for (int i \u003d 0; i \u003c mods.size() - 1; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c mods.size(); j++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                if (mods.get(i).equals(mods.get(j))) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns the module at the {@code index}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param index Index of the module."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return Mod at the index."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod getMod(int index) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getAllMods() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/exceptions/DuplicateModException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Signals that the operation will result in duplicate modules (Modules are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * if they have the same module code)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class DuplicateModException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public DuplicateModException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/exceptions/ModNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Signals that the operation is unable to find the specified Module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags, Remark remark) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(\" Tags: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(\" Remarks\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "hanchingyong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the student at the {@code index}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index Index of the student."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Student at the index."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Person getStudent(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "hanchingyong": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"friends\"), new Remark(\"Nice\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Remark(\"Pretty\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"neighbours\"), new Remark(\"Italian\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"family\"), new Remark(\"Handsome\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"classmates\"), new Remark(\"Kind\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"colleagues\"), new Remark(\"Fake\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static ReadOnlyConsult getSampleConsults() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalDateTime endDateTime \u003d LocalDateTime.now().plusHours(3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Location location \u003d new Location(\"SR1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Consult consult \u003d new Consult(startDateTime, endDateTime, location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArrayList\u003cConsult\u003e consultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultList.add(consult);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultTAble sampleConsultTAble \u003d new ConsultTAble(consultList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return sampleConsultTAble;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static ReadOnlyTutorial getSampleTutorials() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String moduleName \u003d \"CS2103\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialName tutorialName \u003d new TutorialName(\"T03\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek weekday \u003d DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime startTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime endTime \u003d LocalTime.now().plusHours(2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Location location \u003d new Location(\"SR1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorial \u003d new Tutorial(moduleName, tutorialName, weekday, startTime, endTime, location);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArrayList\u003cTutorial\u003e tutorialList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialList.add(tutorial);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialTAble sampleTutorialTAble \u003d new TutorialTAble(tutorialList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return sampleTutorialTAble;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "hanchingyong": 19,
      "suwoons": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags, modelRemark);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 96,
      "hanchingyong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.storage.consults.ConsultStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.tutorials.TutorialStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ConsultStorage, TutorialStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "hanchingyong": 1,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.storage.consults.ConsultStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.tutorials.TutorialStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ConsultStorage consultStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private TutorialStorage tutorialStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                          ConsultStorage consultStorage, TutorialStorage tutorialStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultStorage \u003d consultStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialStorage \u003d tutorialStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Consult methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Path getConsultsFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultStorage.getConsultsFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return readConsults(consultStorage.getConsultsFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultStorage.readConsults(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        saveConsults(consults, consultStorage.getConsultsFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultStorage.saveConsults(consults, filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tutorial methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Path getTutorialsFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialStorage.getTutorialsFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return readTutorials(tutorialStorage.getTutorialsFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialStorage.readTutorials(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        saveTutorials(tutorials, tutorialStorage.getTutorialsFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialStorage.saveTutorials(tutorials, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "hanchingyong": 33,
      "suwoons": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/consults/ConsultStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.storage.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.event.consult.Consult}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public interface ConsultStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Path getConsultsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns Consult data as a {@link ReadOnlyConsult}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Optional\u003cReadOnlyConsult\u003e readConsults() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see #getConsultsFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Optional\u003cReadOnlyConsult\u003e readConsults(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Saves the given {@link ReadOnlyConsult} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param consults cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void saveConsults(ReadOnlyConsult consults) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see #saveConsults(ReadOnlyConsult)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void saveConsults(ReadOnlyConsult consults, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/consults/JsonAdaptedConsult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.storage.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Jackson-friendly version of {@link Consult}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "class JsonAdaptedConsult {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Consult\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String INVALID_DATE_FORMAT \u003d \"Invalid date format!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String beginDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String endDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String eventLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructs a {@code JsonAdaptedConsult} with the given consult details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonAdaptedConsult(@JsonProperty(\"beginDateTime\") String beginDateTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                              @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                              @JsonProperty(\"eventLocation\") String eventLocation) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.beginDateTime \u003d beginDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Converts a given {@code Consult} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonAdaptedConsult(Consult source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        beginDateTime \u003d source.getConsultBeginDateTime().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        endDateTime \u003d source.getConsultEndDateTime().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        eventLocation \u003d source.getPlace().eventLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Converts this Jackson-friendly adapted consult object into the model\u0027s {@code Consult} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted consult."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (beginDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"BEGIN DATE TIME\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"END DATE TIME\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime modelBeginDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime modelEndDateTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            modelBeginDateTime \u003d LocalDateTime.parse(this.beginDateTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            modelEndDateTime \u003d LocalDateTime.parse(this.endDateTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (eventLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EVENT LOCATION\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final Location modelLocation \u003d new Location(eventLocation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Consult(modelBeginDateTime, modelEndDateTime, modelLocation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 76,
      "suwoons": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/consults/JsonConsultStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.storage.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A class to access Consults data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class JsonConsultStorage implements ConsultStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonConsultStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonConsultStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Path getConsultsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return readConsults(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Similar to {@link #readConsults()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Optional\u003cJsonSerializableConsults\u003e jsonConsults \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                filePath, JsonSerializableConsults.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!jsonConsults.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.of(jsonConsults.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        saveConsults(consults, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Similar to {@link #saveConsults(ReadOnlyConsult)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consults);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableConsults(consults), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 79,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/consults/JsonSerializableConsults.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.storage.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * An Immutable ConsultTAble that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "@JsonRootName(value \u003d \"consults\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "class JsonSerializableConsults {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULT \u003d \"Consults list contains duplicate consult(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final List\u003cJsonAdaptedConsult\u003e consults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code JsonSerializableConsults} with the given consults."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonSerializableConsults(@JsonProperty(\"consults\") List\u003cJsonAdaptedConsult\u003e consults) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consults.addAll(consults);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts a given {@code ReadOnlyConsult} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableConsults}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonSerializableConsults(ReadOnlyConsult source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.addAll(source.getAllConsults().stream().map(JsonAdaptedConsult::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts this ConsultTAble into the model\u0027s {@code ConsultStorage} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultTAble consultTAble \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (JsonAdaptedConsult jsonAdaptedConsult : consults) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Consult consult \u003d jsonAdaptedConsult.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (consultTAble.hasConsult(consult)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CONSULT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consultTAble.addConsult(consult);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAble;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 53,
      "suwoons": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/tutorials/JsonAdaptedTutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Jackson-friendly version of {@link Tutorial}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class JsonAdaptedTutorial {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tutorial\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String INVALID_TIME_FORMAT \u003d \"Invalid time format!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String INVALID_DAY_FORMAT \u003d \"Invalid day format!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String tutorialName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String weekday;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String beginTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code JsonAdaptedTutorial} with the given tutorial details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonAdaptedTutorial(@JsonProperty(\"moduleName\") String moduleName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"tutorialName\") String tutorialName,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"weekday\") String weekday,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"beginTime\") String beginTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"location\") String location) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekday \u003d weekday;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.beginTime \u003d beginTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts a given {@code Tutorial} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonAdaptedTutorial(Tutorial source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        moduleName \u003d source.getModule();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialName \u003d source.getTutorialName().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        weekday \u003d Integer.toString(source.getDay().getValue());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        beginTime \u003d source.getBeginTime().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        location \u003d source.getLocation().eventLocation;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts this Jackson-friendly adapted tutorial object into the model\u0027s {@code Tutorial} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tutorial."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (moduleName \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"MODULE_NAME\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (tutorialName \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"TUTORIAL_NAME\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String modelModuleName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialName modelTutorialName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        modelModuleName \u003d moduleName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        modelTutorialName \u003d new TutorialName(tutorialName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek modelWeekday;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelWeekday \u003d DayOfWeek.of(Integer.parseInt(weekday));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(INVALID_DAY_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (beginTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"BEGIN_TIME\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"END_TIME\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime modelBeginTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime modelEndTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelBeginTime \u003d LocalTime.parse(this.beginTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelEndTime \u003d LocalTime.parse(this.endTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"PLACE\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new Tutorial(modelModuleName, modelTutorialName, modelWeekday, modelBeginTime, modelEndTime,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                modelLocation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/tutorials/JsonSerializableTutorials.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * An Immutable TutorialTAble that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "@JsonRootName(value \u003d \"tutorials\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class JsonSerializableTutorials {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"Tutorials list contains duplicate tutorial(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final List\u003cJsonAdaptedTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code JsonSerializableTutorials} with the given tutorials."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonSerializableTutorials(@JsonProperty(\"tutorials\") List\u003cJsonAdaptedTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorials.addAll(tutorials);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts a given {@code ReadOnlyTutorial} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTutorials}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonSerializableTutorials(ReadOnlyTutorial source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.addAll(source.getAllTutorials().stream().map(JsonAdaptedTutorial::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts this TutorialTAble into the model\u0027s {@code TutorialStorage} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialTAble tutorialTAble \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (JsonAdaptedTutorial jsonAdaptedTutorial : tutorials) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            Tutorial tutorial \u003d jsonAdaptedTutorial.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (tutorialTAble.hasTutorial(tutorial)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            tutorialTAble.addTutorial(tutorial);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialTAble;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/tutorials/JsonTutorialStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A class to access Tutorials data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class JsonTutorialStorage implements TutorialStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTutorialStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonTutorialStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Path getTutorialsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return readTutorials(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Similar to {@link #readTutorials()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Optional\u003cJsonSerializableTutorials\u003e jsonTutorials \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                filePath, JsonSerializableTutorials.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!jsonTutorials.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return Optional.of(jsonTutorials.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        saveTutorials(tutorials, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Similar to {@link #saveTutorials(ReadOnlyTutorial)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorials);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTutorials(tutorials), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/tutorials/TutorialStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Represents a storage for {@link seedu.address.model.event.tutorial.Tutorial}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public interface TutorialStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Path getTutorialsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns Tutorial data as a {@link ReadOnlyTutorial}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Optional\u003cReadOnlyTutorial\u003e readTutorials() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @see #getTutorialsFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Optional\u003cReadOnlyTutorial\u003e readTutorials(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Saves the given {@link ReadOnlyTutorial} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param tutorials cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void saveTutorials(ReadOnlyTutorial tutorials) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @see #saveTutorials(ReadOnlyTutorial)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void saveTutorials(ReadOnlyTutorial tutorials, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103-w15-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "hanchingyong": 4
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cfx:root minHeight\u003d\"360.0\" minWidth\u003d\"810.0\" onCloseRequest\u003d\"#handleExit\" resizable\u003d\"false\" title\u003d\"TAble\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"130\" minHeight\u003d\"130\" prefHeight\u003d\"130\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.3\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                        \u003cTabPane tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003ctabs\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Students\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" maxHeight\u003d\"300.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"300.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Classes\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                          \u003cStackPane maxHeight\u003d\"300.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"300.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                        \u003cTabPane tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003ctabs\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Module Info\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                          \u003cStackPane minHeight\u003d\"300.0\" minWidth\u003d\"600.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Attendance\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                          \u003cStackPane minHeight\u003d\"300.0\" minWidth\u003d\"600.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003cTab text\u003d\"Consultations\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                          \u003cStackPane minHeight\u003d\"300.0\" minWidth\u003d\"600.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"10.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 69,
      "-": 45,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.storage.consults.JsonConsultStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.tutorials.JsonTutorialStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonConsultStorage consultStorage \u003d new JsonConsultStorage(temporaryFolder.resolve(\"consults.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonTutorialStorage tutorialStorage \u003d new JsonTutorialStorage(temporaryFolder.resolve(\"tutorials.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonConsultStorage consultStorage \u003d new JsonConsultStorage(temporaryFolder.resolve(\"ioExceptionConsults.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonTutorialStorage tutorialStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new JsonTutorialStorage(temporaryFolder.resolve(\"ioExceptionTutorials.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new TutorialTAble());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 156,
      "hanchingyong": 5,
      "suwoons": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new TutorialTAble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "hanchingyong": 1,
      "suwoons": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void deleteConsult(Consult target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setConsult(Consult consultToEdit, Consult editedConsult) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void clearConsults() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteTutorial(Tutorial target) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 193,
      "hanchingyong": 36,
      "suwoons": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new TutorialTAble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new TutorialTAble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "hanchingyong": 1,
      "suwoons": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String VALID_REMARK_NICE \u003d \"nice\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_TAG + VALID_REMARK_NICE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "hanchingyong": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            new TutorialTAble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new TutorialTAble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new TutorialTAble());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "hanchingyong": 1,
      "suwoons": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            new TutorialTAble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 168,
      "hanchingyong": 5,
      "suwoons": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            new TutorialTAble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            new TutorialTAble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "hanchingyong": 1,
      "suwoons": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new TutorialTAble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "hanchingyong": 1,
      "suwoons": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "class RemarkCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Remark test\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            new TutorialTAble());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new UserPrefs(), new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 37,
      "suwoons": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "hanchingyong": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final TAbleParser parser \u003d new TAbleParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 100,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 189,
      "hanchingyong": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String VALID_REMARK \u003d \"Test\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 170,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "//import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultTAble consultTAble \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialTAble tutorialTAble \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, new ConsultTAble(), new TutorialTAble());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, consultTAble, tutorialTAble);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, consultTAble,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialTAble)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, consultTAble, tutorialTAble)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, consultTAble,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialTAble)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 127,
      "hanchingyong": 3,
      "suwoons": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "hanchingyong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 167,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags, VALID_REMARK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "hanchingyong": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.storage.consults.JsonConsultStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.tutorials.JsonTutorialStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonConsultStorage consultStorage \u003d new JsonConsultStorage(getTempFilePath(\"consults\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonTutorialStorage tutorialStorage \u003d new JsonTutorialStorage(getTempFilePath(\"tutorials\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage, tutorialStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "hanchingyong": 2,
      "suwoons": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        remark \u003d personToCopy.getRemark();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Person(name, phone, email, tags, remark);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "hanchingyong": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_NICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).withRemark(VALID_REMARK_NICE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND).withRemark(VALID_REMARK_NICE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "hanchingyong": 11
    }
  }
]
