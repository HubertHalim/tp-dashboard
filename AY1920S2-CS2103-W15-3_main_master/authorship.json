[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveBaseName \u003d \"TAble\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveVersion \u003d \"1.3\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 5,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.ConsultStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonConsultStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonModStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonReminderStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonTutorialStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.ModStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.ReminderStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.TutorialStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing StudentTAble ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultStorage consultStorage \u003d new JsonConsultStorage(userPrefs.getConsultTAbleFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        TutorialStorage tutorialStorage \u003d new JsonTutorialStorage(userPrefs.getTutorialTAbleFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModStorage modStorage \u003d new JsonModStorage(userPrefs.getModTAbleFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ReminderStorage reminderStorage \u003d new JsonReminderStorage(userPrefs.getReminderTableFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialStorage, modStorage, reminderStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s TAble and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The data from the sample TAble will be used instead if {@code storage}\u0027s TAble is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * or an empty TAble will be used instead if errors occur when reading {@code storage}\u0027s TAble."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Optional\u003cReadOnlyStudent\u003e addressBookOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Optional\u003cReadOnlyConsult\u003e consultsOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Optional\u003cReadOnlyTutorial\u003e tutorialsOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cReadOnlyMod\u003e modsOptional;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Optional\u003cReadOnlyReminder\u003e remindersOptional;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ReadOnlyStudent initialData;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ReadOnlyConsult initialConsults;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ReadOnlyTutorial initialTutorials;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ReadOnlyMod initialMods;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ReadOnlyReminder initialReminders;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consultsOptional \u003d storage.readConsults();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            tutorialsOptional \u003d storage.readTutorials();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            modsOptional \u003d storage.readMods();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            remindersOptional \u003d storage.readReminders();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample StudentTAble\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (!consultsOptional.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                logger.info(\"Consults file not found. Will be starting with no consults\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (!tutorialsOptional.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                logger.info(\"Tutorials file not found. Will be starting with no tutorials.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            if (!modsOptional.isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                logger.info(\"Modules file not found. Will be starting with no modules.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            if (!remindersOptional.isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                logger.info(\"Reminders file not found. Will be starting with no reminders\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialConsults \u003d consultsOptional.orElseGet(SampleDataUtil::getSampleConsults);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            initialTutorials \u003d tutorialsOptional.orElseGet(SampleDataUtil::getSampleTutorials);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            initialMods \u003d modsOptional.orElseGet(SampleDataUtil::getSampleMods);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            initialReminders \u003d remindersOptional.orElseGet(SampleDataUtil::getSampleReminders);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty StudentTAble\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialData \u003d new StudentTAble();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialConsults \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            initialTutorials \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            initialMods \u003d new ModTAble();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            initialReminders \u003d new ReminderTAble();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StudentTAble\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialData \u003d new StudentTAble();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            initialConsults \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            initialTutorials \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            initialMods \u003d new ModTAble();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            initialReminders \u003d new ReminderTAble();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialConsults,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                initialTutorials, initialMods, initialReminders);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StudentTAble\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.info(\"Starting TAble \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TAble ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 16,
      "nigelnnk": 14,
      "-": 166,
      "hanchingyong": 28,
      "suwoons": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_INVALID_CONSULT_DISPLAYED_INDEX \u003d \"The consult index provided is invalid.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME \u003d \"The Begin Date Time of the consult is \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"after the End Date Time of the consult.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_CONSULT_TIMING_CLASH \u003d \"This consult\u0027s timing clash with another pre-existing\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \" consult.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_CONSULT_DIFFERENT_DATE \u003d \"The start and end date of the consult is different.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX \u003d \"The tutorial index provided is invalid.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_STUDENT_INDEX \u003d \"The student index provided is invalid.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_TUTORIAL_BEGIN_TIME_BEFORE_END_TIME \u003d \"The Begin Time of the tutorial is before \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"the End Time of the tutorial.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_TUTORIAL_TIMING_CLASH \u003d \"This tutorial\u0027s timing clash with another pre-existing\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \" tutorial.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_WEEK \u003d \"The week specified is invalid. Please enter a value between\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \" 1 and 13 (inclusive).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_MISSING_MOD \u003d \"The module code provided does not exist in TAble.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_INVALID_MODLINK_INDEX \u003d \"This index does not correspond to a ModLink in TAble.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX \u003d \"The reminder index provided is invalid.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_REMINDER_ALREADY_DONE \u003d \"This reminder is already done!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "nigelnnk": 2,
      "-": 11,
      "hanchingyong": 9,
      "shunde97": 1,
      "suwoons": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ConsultUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * ConsultUtil contains methods for manipulating Consults."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Check that {@code beginDateTime} provided is earlier than {@code endDateTime} provided"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return true if beginDateTime is before endDateTime"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static boolean checkStartEndDateTime(LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return startDateTime.isBefore(endDateTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to check that the {@code consultDateTime} is the same date as the {@code calendarDate} in the Calendar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static boolean checkSameDate(LocalDateTime consultDateTime, LocalDate calendarDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(consultDateTime.getYear(), consultDateTime.getMonthValue(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consultDateTime.getDayOfMonth());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return startDate.isEqual(calendarDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to check that the {@code beginConsultDateTime} is the same date as the {@code endConsultDateTime}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static boolean checkSameDate(LocalDateTime beginConsultDateTime, LocalDateTime endConsultDateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return beginConsultDateTime.toLocalDate().equals(endConsultDateTime.toLocalDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/TutorialUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * TutorialUtil contains methods for manipulating Tutorials."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Check that {@code beginTime} provided is earlier than {@code endTime} provided"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @return true if beginTime is before endTime"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static boolean checkStartEndTime(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return startTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Check that {@code beginTime} provided is earlier than {@code endTime} provided"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return true if beginTime is before endTime"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static boolean checkDayOfWeek(DayOfWeek tutorialDay, LocalDate calendarDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return tutorialDay.equals(calendarDate.getDayOfWeek());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 10,
      "suwoons": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the StudentTAble."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see seedu.address.model.Model#getStudentTAble()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    ReadOnlyStudent getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tutorials"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    ObservableList\u003cTutorial\u003e getFilteredTutorialList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of consults"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    ObservableList\u003cConsult\u003e getFilteredConsultList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of consults"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    ObservableList\u003cMod\u003e getFilteredModList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns the currently viewed mod"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    ObservableList\u003cMod\u003e getViewedMod();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of reminders"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 5,
      "nigelnnk": 11,
      "-": 44,
      "hanchingyong": 17,
      "shunde97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.TAbleParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final TAbleParser tableParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tableParser \u003d new TAbleParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Command command \u003d tableParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            storage.saveAddressBook(model.getStudentTAble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            storage.saveConsults(model.getConsultTAble());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            storage.saveTutorials(model.getTutorialTAble());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            storage.saveReminders(model.getReminderTAble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ReadOnlyStudent getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return model.getStudentTAble();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return model.getFilteredConsultList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getFilteredModList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return model.getFilteredModList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getViewedMod() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return model.getViewedMod();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return model.getFilteredReminderList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 5,
      "nigelnnk": 11,
      "-": 69,
      "hanchingyong": 18,
      "shunde97": 3,
      "suwoons": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalendarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Command to show a calendar pop up display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a calendar view of all tutorials and consults.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String SHOWING_CALENDAR_MESSAGE \u003d \"Opened Calendar window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            CommandResult(SHOWING_CALENDAR_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "hanchingyong": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.setStudentTAble(new StudentTAble());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /** The application should show the calendar. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final boolean showCalendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /** The application should show the listed tab. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final boolean showList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /** The application should show the relevant attendance list. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final boolean showAttendace;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /** Information for the application to show the correct attendance list. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Tutorial tutorialToShow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final int weekZeroBased;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code CommandResult} for a command which requires a list to be shown."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showCalendar, boolean showHelp,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                         boolean showList, boolean exit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.showCalendar \u003d showCalendar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.showList \u003d showList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.showAttendace \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialToShow \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekZeroBased \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code CommandResult} for displaying attendance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult(String feedbackToUser, Tutorial tutorial, int weekZeroBased) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.showCalendar \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.showList \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.showAttendace \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialToShow \u003d tutorial;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekZeroBased \u003d weekZeroBased;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.showCalendar \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.showList \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.showAttendace \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialToShow \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekZeroBased \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean isShowCalendar() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return showCalendar;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean isShowList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return showList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean isShowAttendance() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return showAttendace;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial getTutorialToShow() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialToShow;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public int getWeekZeroBased() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return weekZeroBased;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 11,
      "-": 71,
      "hanchingyong": 16,
      "suwoons": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Changes the remark of an existing student in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the student identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            + \"by the index number used in the last student listing. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Student: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Student: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedStudent \u003d new Student(studentToEdit.getName(), studentToEdit.getMatricNumber(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                studentToEdit.getEmail(), studentToEdit.getTags(), remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private String generateSuccessMessage(Student studentToEdit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return String.format(message, studentToEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 70,
      "shunde97": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/AddConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_TIMING_CLASH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Adds a consult into TAble."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class AddConsultCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addConsult\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a consultation to TAble. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_STUDENT + \"STUDENT_INDEX \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_BEGIN_DATE_TIME + \"EVENT_BEGIN_DATE_TIME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_END_DATE_TIME + \"EVENT_END_DATE_TIME \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_PLACE + \"PLACE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_STUDENT + \"1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_BEGIN_DATE_TIME + \"2020-03-03 10:00 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_CONSULT_END_DATE_TIME + \"2020-03-03 12:00 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_PLACE + \"Outside SR1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New consultation added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULT \u003d \"There is already a consultation at that timing!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Consult toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates an AddConsultCommand to add the specified {@code Consult}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public AddConsultCommand(Index index, Consult consult) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(index, consult);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        toAdd \u003d consult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (model.hasConsult(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONSULT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (model.hasSameDateTime(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(MESSAGE_CONSULT_TIMING_CLASH);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        MatricNumber studentMatricNumber \u003d new MatricNumber(studentToEdit.getMatricNumber().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Name studentName \u003d new Name(studentToEdit.getName().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        toAdd.setMatricNumber(studentMatricNumber);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        toAdd.setStudentName(studentName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.addConsult(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof AddConsultCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddConsultCommand) other).toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 85,
      "suwoons": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/DeleteConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Deletes a consult identified using it\u0027s displayed index from the Consult TAble."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DeleteConsultCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteConsult\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \": Deletes the consult identified by the index number used in the displayed Consult TAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_DELETE_CONSULT_SUCCESS \u003d \"Deleted Consult: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public DeleteConsultCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        List\u003cConsult\u003e lastShownList \u003d model.getFilteredConsultList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONSULT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult consultToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.deleteConsult(consultToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CONSULT_SUCCESS, consultToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof DeleteConsultCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteConsultCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 54,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/EditConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_DIFFERENT_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_TIMING_CLASH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.ConsultUtil.checkSameDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.ConsultUtil.checkStartEndDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONSULTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Edits the details of an existing consult in TAble."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class EditConsultCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editConsult\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the consult identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"by the index number used in the displayed consult list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"[\" + PREFIX_CONSULT_BEGIN_DATE_TIME + \"BEGINDATETIME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"[\" + PREFIX_CONSULT_END_DATE_TIME + \"ENDDATETIME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"[\" + PREFIX_PLACE + \"PLACE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_CONSULT_BEGIN_DATE_TIME + \"2020-03-03 15:00\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_PLACE + \"The Deck\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_EDIT_CONSULT_SUCCESS \u003d \"Edited Consult: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULT \u003d \"There is already a consultation at that timing.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final EditConsultDescriptor editConsultDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index of the consult in the filtered consult list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param editConsultDescriptor details to edit the consult with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public EditConsultCommand(Index index, EditConsultDescriptor editConsultDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(editConsultDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.editConsultDescriptor \u003d new EditConsultDescriptor(editConsultDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        List\u003cConsult\u003e lastShownList \u003d model.getFilteredConsultList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONSULT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult consultToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult editedConsult \u003d createEditedConsult(consultToEdit, editConsultDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!consultToEdit.equals(editedConsult) \u0026\u0026 model.hasConsult(editedConsult)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONSULT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (model.hasSameDateTime(editedConsult)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(MESSAGE_CONSULT_TIMING_CLASH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.setConsult(consultToEdit, editedConsult);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.updateFilteredConsultList(PREDICATE_SHOW_ALL_CONSULTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CONSULT_SUCCESS, editedConsult));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates and returns a {@code Consult} with the details of {@code consultToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * edited with {@code editConsultDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static Consult createEditedConsult(Consult consultToEdit, EditConsultDescriptor editConsultDescriptor)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assert consultToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime updatedBeginStartTime \u003d editConsultDescriptor.getBeginDateTime()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .orElse(consultToEdit.getBeginDateTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime updatedEndStartTime \u003d editConsultDescriptor.getEndDateTime()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .orElse(consultToEdit.getEndDateTime());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!checkStartEndDateTime(updatedBeginStartTime, updatedEndStartTime)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!checkSameDate(updatedBeginStartTime, updatedEndStartTime)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new CommandException(MESSAGE_CONSULT_DIFFERENT_DATE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Location updatedLocation \u003d editConsultDescriptor.getLocation().orElse(consultToEdit.getLocation());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        MatricNumber studentMatricNumber \u003d consultToEdit.getMatricNumber();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Name studentName \u003d consultToEdit.getStudentName();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Consult(updatedBeginStartTime, updatedEndStartTime,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            updatedLocation, studentName, studentMatricNumber);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof EditConsultCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        EditConsultCommand e \u003d (EditConsultCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 editConsultDescriptor.equals(e.editConsultDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Stores the details to edit the consult with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * corresponding field value of the consult."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static class EditConsultDescriptor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private LocalDateTime beginDateTime;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public EditConsultDescriptor() {}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public EditConsultDescriptor(EditConsultDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setBeginDateTime(toCopy.beginDateTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setEndDateTime(toCopy.endDateTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(beginDateTime,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    endDateTime, location);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setBeginDateTime(LocalDateTime beginDateTime) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.beginDateTime \u003d beginDateTime;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getBeginDateTime() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(beginDateTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setEndDateTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(endDateTime);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (!(other instanceof EditConsultDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            EditConsultDescriptor e \u003d (EditConsultDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return getBeginDateTime().equals(e.getBeginDateTime())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u0026\u0026 getEndDateTime().equals(e.getEndDateTime())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 214,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/consults/ListConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONSULTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Lists all consults in TAble."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ListConsultCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listConsult\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d COMMAND_WORD + \": Listed all consults. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.updateFilteredConsultList(PREDICATE_SHOW_ALL_CONSULTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "hanchingyong": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/AddModCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Adds a module to TAble. Due to naming conflicts, this is reflected as \"Mod\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class AddModCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addMod\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to TAble.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_NAME + \"MODULE_NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_NAME + \"Software Engineering\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added!\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MOD \u003d \"This module already exists in TAble.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final Mod toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates an AddModCommand to add the specified {@code modCode}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public AddModCommand(ModCode modCode, String modName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        toAdd \u003d new Mod(modCode, modName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (model.hasMod(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MOD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.addMod(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            || (other instanceof AddModCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddModCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/AddModLinkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_LINK_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Adds a corresponding Pair of String, ModLink into the links of a Mod."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class AddModLinkCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addModLink\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module link to a module in TAble.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_LINK + \"MODULE_LINK \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_LINK_NAME + \"MODULE_LINK_NAME\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_LINK + \"http://www.comp.nus.edu.sg/~cs2103 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_LINK_NAME + \"Module Website\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Link has been added to module\\n%1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String linkName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModLink link;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates an AddModCommand to add the specified module corresponding to {@code modCode}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public AddModLinkCommand(ModCode modCode, String modLinkName, ModLink link) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(modCode, modLinkName, link);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.linkName \u003d modLinkName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!model.hasMod(new Mod(modCode, \"\"))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MOD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cMod\u003e optionalMod \u003d model.findMod(modCode);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assert optionalMod.isPresent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod modToEdit \u003d optionalMod.get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod editedMod \u003d new Mod(modToEdit, linkName, link);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.setMod(modToEdit, editedMod);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.updateFilteredModList(PREDICATE_SHOW_ALL_MODS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedMod));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            || (other instanceof AddModLinkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 modCode.equals(((AddModLinkCommand) other).modCode));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/ClearModLinksCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Removes all Pairs of String, ModLink of a Mod in TAble."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ClearModLinksCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearModLink\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all module links of a module in TAble.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All links are cleared from module\\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates an AddModCommand to add the specified {@code mod}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ClearModLinksCommand(ModCode modCode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!model.hasMod(new Mod(modCode, \"\"))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MOD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cMod\u003e optionalMod \u003d model.findMod(modCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assert optionalMod.isPresent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod modToEdit \u003d optionalMod.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod editedMod \u003d modToEdit.clearLinks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.setMod(modToEdit, editedMod);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.updateFilteredModList(PREDICATE_SHOW_ALL_MODS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedMod));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            || (other instanceof ClearModLinksCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 modCode.equals(((ClearModLinksCommand) other).modCode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/CopyModLinkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLinkPair;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Copies a ModLink into the user\u0027s clipboard."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class CopyModLinkCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copyModLink\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \": Copies the URL link of a Mod identified by the index number used, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"which can be viewed using viewModInfo.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_INDEX + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"\\nExample: \" + COMMAND_WORD + \" 2 modCode/CS2103\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_COPIED_LINK_SUCCESS \u003d \"Link copied to clipboard!\\n%1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CopyModLinkCommand(Index targetIndex, ModCode modCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!model.hasMod(new Mod(modCode, \"\"))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cMod\u003e optionalMod \u003d model.findMod(modCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assert optionalMod.isPresent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod modToGet \u003d optionalMod.get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        List\u003cModLinkPair\u003e modLinkPairList \u003d modToGet.getLinks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d modLinkPairList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODLINK_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModLink link \u003d modLinkPairList.get(targetIndex.getZeroBased()).getValue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        url.putString(link.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COPIED_LINK_SUCCESS, link));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            || (other instanceof CopyModLinkCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((CopyModLinkCommand) other).targetIndex)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 modCode.equals(((CopyModLinkCommand) other).modCode));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/DeleteModCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Deletes an existing Mod from TAble."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class DeleteModCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteMod\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \": Deletes the module identified by the index number used in the displayed ModTAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_DELETE_MOD_SUCCESS \u003d \"Deleted module!\\n%1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public DeleteModCommand(ModCode modCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!model.hasMod(new Mod(modCode, \"\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MOD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cMod\u003e optionalMod \u003d model.findMod(modCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assert optionalMod.isPresent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod modToGet \u003d optionalMod.get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.deleteMod(modToGet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MOD_SUCCESS, modToGet));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            || (other instanceof DeleteModCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 modCode.equals(((DeleteModCommand) other).modCode));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/ListModCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Lists all modules in TAble."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ListModCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listMod\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d COMMAND_WORD + \": Listed all modules\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.updateFilteredModList(PREDICATE_SHOW_ALL_MODS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "nigelnnk": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/NoteModCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Edits the note in a Mod."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class NoteModCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"noteMod\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the notes of the module identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"by the module code. Module must exist in TAble.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Parameters: \" + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_NOTE + \"NOTE\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_MODULE_CODE + \"CS2103 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + PREFIX_MODULE_NOTE + \"Fun module!! \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_EDIT_MODNOTE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param modCode module in the filtered module list to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param note details to append the module note with"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public NoteModCommand(ModCode modCode, String note) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(modCode, note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!model.hasMod(new Mod(modCode, \"\"))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MOD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cMod\u003e optionalMod \u003d model.findMod(modCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assert optionalMod.isPresent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod modToEdit \u003d optionalMod.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod editedMod \u003d new Mod(modToEdit, note);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.setMod(modToEdit, editedMod);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.updateFilteredModList(PREDICATE_SHOW_ALL_MODS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODNOTE_SUCCESS, editedMod));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!(other instanceof NoteModCommand)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        NoteModCommand e \u003d (NoteModCommand) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode.equals(e.modCode)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 note.equals(e.note);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mods/ViewModInfoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.commands.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Lists all modules in TAble."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ViewModInfoCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewModInfo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views more detailed information of a module\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \" identified by the module code. Module must exist in TAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Parameters: \" + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_MODULE_CODE + \"CS2103 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_VIEW_MOD_SUCCESS \u003d \"Updating view to module: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates a ViewModInfoCommand object with necessary information."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param modCode module in the filtered module list to edit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ViewModInfoCommand(ModCode modCode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!model.hasMod(new Mod(modCode, \"\"))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MOD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cMod\u003e optionalMod \u003d model.findMod(modCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assert optionalMod.isPresent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod mod \u003d optionalMod.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.setViewedMod(mod);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model.updateFilteredModList(PREDICATE_SHOW_ALL_MODS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_MOD_SUCCESS, mod),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            false, false, true, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!(other instanceof ViewModInfoCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ViewModInfoCommand e \u003d (ViewModInfoCommand) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode.equals(e.modCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminders/AddReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.commands.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Adds a reminder into TAble."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class AddReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addReminder\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder to TAble. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + PREFIX_REMINDER_DESCRIPTION + \"DESC \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + PREFIX_REMINDER_DATE + \"DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + PREFIX_REMINDER_TIME + \"TIME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + PREFIX_REMINDER_DESCRIPTION + \"Mark midterms papers \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + PREFIX_REMINDER_DATE + \"2020-03-05 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                + PREFIX_REMINDER_TIME + \"14:00 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in TAble\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final Reminder toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Creates an AddReminderCommand to add the specified {@code Reminder}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public AddReminderCommand(Reminder reminder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        toAdd \u003d reminder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (model.hasReminder(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        model.addReminder(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                || (other instanceof AddReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddReminderCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminders/DeleteReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.commands.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Deletes a reminder identified using it\u0027s displayed index from the Reminder TAble."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class DeleteReminderCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteReminder\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \": Deletes the reminder identified by the index number used in the displayed Reminder TAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public DeleteReminderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        List\u003cReminder\u003e lastShownList \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder reminderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        model.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                || (other instanceof DeleteReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteReminderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminders/DoneReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.commands.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Marks a identified reminder as done using it\u0027s displayed index from the Reminder TAble."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class DoneReminderCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"doneReminder\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \": Marks the identified reminder as done by the index number used in the displayed Reminder TAble.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_DONE_REMINDER_SUCCESS \u003d \"Reminder Done: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public DoneReminderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        List\u003cReminder\u003e lastShownList \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder reminderToMark \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (reminderToMark.getDone()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_REMINDER_ALREADY_DONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder doneReminder \u003d model.doneReminder(reminderToMark);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_REMINDER_SUCCESS, doneReminder));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                || (other instanceof DoneReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneReminderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminders/EditReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.commands.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Edits the details of an existing reminder in TAble."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class EditReminderCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editReminder\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the reminder identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"by the index number used in the displayed reminder list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"[\" + PREFIX_REMINDER_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"[\" + PREFIX_REMINDER_DATE + \"DATE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"[\" + PREFIX_REMINDER_TIME + \"TIME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + PREFIX_REMINDER_DESCRIPTION + \"Return T02 midterms paper\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + PREFIX_REMINDER_DATE + \"2020-03-15\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            + PREFIX_REMINDER_TIME + \"15:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_EDIT_REMINDER_SUCCESS \u003d \"Edited Reminder: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"Such a reminder already exists in TAble.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final EditReminderDescriptor editReminderDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param index of the reminder in the filtered reminder list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param editReminderDescriptor details to edit the reminder with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public EditReminderCommand(Index index, EditReminderDescriptor editReminderDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(editReminderDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.editReminderDescriptor \u003d new EditReminderDescriptor(editReminderDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        List\u003cReminder\u003e lastShownList \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder reminderToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder editedReminder \u003d createEditedReminder(reminderToEdit, editReminderDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!reminderToEdit.equals(editedReminder) \u0026\u0026 model.hasReminder(editedReminder)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        model.setReminder(reminderToEdit, editedReminder);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Creates and returns a {@code Reminder} with the details of {@code reminderToEdit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * edited with {@code editReminderDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static Reminder createEditedReminder(Reminder reminderToEdit, EditReminderDescriptor"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            editReminderDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assert reminderToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Description updatedDescription \u003d editReminderDescriptor.getDescription()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .orElse(reminderToEdit.getDescription());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalDate updatedDate \u003d editReminderDescriptor.getDate()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .orElse(reminderToEdit.getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalTime updatedTime \u003d editReminderDescriptor.getTime()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .orElse(reminderToEdit.getTime());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        boolean done \u003d reminderToEdit.getDone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new Reminder(updatedDescription, updatedDate, updatedTime, done);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!(other instanceof EditReminderCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        EditReminderCommand e \u003d (EditReminderCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 editReminderDescriptor.equals(e.editReminderDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Stores the details to edit the reminder with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * corresponding field value of the reminder."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static class EditReminderDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        private LocalTime time;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public EditReminderDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public EditReminderDescriptor(EditReminderDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, date, time);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public Optional\u003cLocalTime\u003e getTime() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            if (!(other instanceof EditReminderDescriptor)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            EditReminderDescriptor e \u003d (EditReminderDescriptor) other;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/students/AddStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.logic.commands.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Adds a student to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addStudent\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_MATRIC_NUMBER + \"MATRICNUMBER \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_REMARK + \"REMARK \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_MATRIC_NUMBER + \"A0111111X \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public AddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                || (other instanceof AddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStudentCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "hanchingyong": 5,
      "shunde97": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/students/DeleteStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.logic.commands.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class DeleteStudentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteStudent\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public DeleteStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                || (other instanceof DeleteStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStudentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "shunde97": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/students/EditStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.logic.commands.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Edits the details of an existing student in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class EditStudentCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editStudent\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + \"[\" + PREFIX_MATRIC_NUMBER + \"MATRICNUMBER] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + PREFIX_MATRIC_NUMBER + \"A0222222Y \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        MatricNumber updatedMatricNumber \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                editStudentDescriptor.getMatricNumber().orElse(studentToEdit.getMatricNumber());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Remark updatedRemark \u003d editStudentDescriptor.getRemarks().orElse(studentToEdit.getRemark());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new Student(updatedName, updatedMatricNumber, updatedEmail, updatedTags, updatedRemark);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand e \u003d (EditStudentCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            setMatricNumber(toCopy.matricNumber);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, matricNumber, email, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void setMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public Optional\u003cMatricNumber\u003e getMatricNumber() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return Optional.ofNullable(matricNumber);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Optional\u003cRemark\u003e getRemarks() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    \u0026\u0026 getMatricNumber().equals(e.getMatricNumber())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "hanchingyong": 15,
      "shunde97": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/students/FindStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.logic.commands.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Finds and lists all students in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class FindStudentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findStudent\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public FindStudentCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                || (other instanceof FindStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindStudentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "shunde97": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/students/ListStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.logic.commands.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Lists all students in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class ListStudentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listStudent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "-": 16,
      "shunde97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/AddTutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TUTORIAL_TIMING_CLASH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_BEGIN_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_END_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKDAY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Adds a Tutorial to TAble."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AddTutorialCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTutorial\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tutorial to TAble.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKDAY + \"TUTORIAL_WEEKDAY_VALUE (1-7) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_BEGIN_TIME + \"TUTORIAL_BEGIN_TIME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_END_TIME + \"TUTORIAL_END_TIME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_PLACE + \"PLACE\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"T03 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKDAY + \"3 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_BEGIN_TIME + \"15:00 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_END_TIME + \"16:00 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_PLACE + \"SR3 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tutorial added!\\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"This tutorial already exists in TAble.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Tutorial toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates an AddTutorialCommand to add the specified {@code tutorial}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AddTutorialCommand(Tutorial tutorial) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        toAdd \u003d tutorial;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (model.hasTutorial(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!model.hasMod(new Mod(toAdd.getModCode(), \"\"))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MOD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (model.hasSameTiming(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_TUTORIAL_TIMING_CLASH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model.addTutorial(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof AddTutorialCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTutorialCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 5,
      "suwoons": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/AddTutorialStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Adds an existing student to an existing Tutorial in TAble."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AddTutorialStudentCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTutorialStudent\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing student to an existing tutorial.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"TUTORIAL_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"STUDENT_INDEX\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"3\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student %1$s added to %2$s %3$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL_STUDENT \u003d \"This student already exists in this tutorial\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index tutorialIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates an AddTutorialStudentCommand to add the specified student at {@code studentIndex}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * to tutorial at {@code tutorialIndex}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AddTutorialStudentCommand(Index tutorialIndex, Index studentIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialIndex \u003d tutorialIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cTutorial\u003e lastShownTutorialList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (tutorialIndex.getZeroBased() \u003e\u003d lastShownTutorialList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorialToAddTo \u003d lastShownTutorialList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Student studentToAdd \u003d lastShownStudentList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // check duplicate student"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (model.hasTutorialStudent(tutorialToAddTo, studentToAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TUTORIAL_STUDENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model.addTutorialStudent(tutorialToAddTo, studentToAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, studentToAdd.getName().fullName,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialToAddTo.getModCode().toString(), tutorialToAddTo.getTutorialName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/DeleteTutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Deletes an existing Tutorial from TAble."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DeleteTutorialCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTutorial\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \": Deletes the tutorial identified by the index number used in the displayed Tutorial TAble.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_INDEX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DELETE_TUTORIAL_SUCCESS \u003d \"Deleted Tutorial!\\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DeleteTutorialCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorialToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model.deleteTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TUTORIAL_SUCCESS, tutorialToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof DeleteTutorialCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTutorialCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/DeleteTutorialStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TUTORIAL_STUDENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Deletes an existing student from an existing Tutorial in TAble."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * This does not delete the student from StudentTAble."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DeleteTutorialStudentCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTutorialStudent\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an existing student from \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"an existing tutorial.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"TUTORIAL_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"STUDENT_INDEX (in tutorial)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DELETE_TUTORIAL_STUDENT_SUCCESS \u003d \"Deleted tutorial student %1$s \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"from %2$s %3$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index tutorialIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a DeleteTutorialStudentCommand to delete the specified student at {@code studentIndex} (in the tutorial)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * frm specified tutorial at {@code tutorialIndex}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DeleteTutorialStudentCommand(Index tutorialIndex, Index studentIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialIndex \u003d tutorialIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (tutorialIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorialToDeleteFrom \u003d lastShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            Student toDelete \u003d tutorialToDeleteFrom.getEnrolledStudents().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            model.deleteTutorialStudent(tutorialToDeleteFrom, toDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TUTORIAL_STUDENT_SUCCESS, toDelete.getName().fullName,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    tutorialToDeleteFrom.getModCode(), tutorialToDeleteFrom.getTutorialName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TUTORIAL_STUDENT_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/ListAttendanceCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Lists students and attendance for a particular week for a given Tutorial in TAble."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class ListAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listAttendance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists students and attendance for \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"an existing tutorial in a given week.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"TUTORIAL_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEK + \"SEMESTER_WEEK (between 1 to 13 inclusive)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEK + \"10\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d COMMAND_WORD + \": Listed students and attendance for %1$s %2$s \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"in week %3$s\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index tutorialIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final int weekZeroBased;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a ListAttendanceCommand to list students and attendance of {@code tutorial} in a given {@code week}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ListAttendanceCommand(Index tutorialIndex, int weekZeroBased) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialIndex \u003d tutorialIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekZeroBased \u003d weekZeroBased;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (tutorialIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorialToShow \u003d lastShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tutorialToShow.getModCode(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialToShow.getTutorialName(), weekZeroBased + 1), tutorialToShow, weekZeroBased);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/ListTutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORIALS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Lists all tutorials in TAble."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class ListTutorialCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTutorial\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d COMMAND_WORD + \": Listed all tutorials\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        model.updateFilteredTutorialList(PREDICATE_SHOW_ALL_TUTORIALS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "suwoons": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/MarkAbsentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TUTORIAL_STUDENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Marks a student or all students in a given tutorial in TAble as present."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class MarkAbsentCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markAbsent\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a student as absent in given tutorial.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"TUTORIAL_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEK + \"SEMESTER_WEEK (between 1 to 13 inclusive) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"STUDENT_INDEX (set as \\\"all\\\" to mark all students in tutorial as absent)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEK + \"10 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student %1$s in %2$s %3$s successfully marked as absent for \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"week %4$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_ALL_SUCCESS \u003d \"All students in %1$s %2$s successfully marked as absent for \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"week %3$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index tutorialIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final int week;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final boolean isMarkAll;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a markAbsentCommand to mark attendance of the specified student at {@code studentIndex}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * to tutorial at {@code tutorialIndex} as absent. If {@code isMarkAll} is true, then all students"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * in the tutorial will be marked as absent."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public MarkAbsentCommand(Index tutorialIndex, Index studentIndex, int week, Boolean isMarkAll) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialIndex \u003d tutorialIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.isMarkAll \u003d isMarkAll;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (tutorialIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorialToMark \u003d lastShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (!isMarkAll) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                Student studentToMark \u003d tutorialToMark.getEnrolledStudents().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                model.markAbsent(tutorialToMark, studentToMark, week);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                // Refresh the list to update the GUI attendance"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialToMark \u003d lastShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, studentToMark.getName().fullName,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        tutorialToMark.getModCode(), tutorialToMark.getTutorialName(), week + 1), tutorialToMark,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        week);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                for (Student student : tutorialToMark.getEnrolledStudents()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    model.markAbsent(tutorialToMark, student, week);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                // Refresh the list to update the GUI attendance"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                tutorialToMark \u003d lastShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_ALL_SUCCESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        tutorialToMark.getModCode(), tutorialToMark.getTutorialName(), week + 1), tutorialToMark,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        week);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TUTORIAL_STUDENT_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tutorials/MarkPresentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TUTORIAL_STUDENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Marks a student or all students in a given tutorial in TAble as present."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class MarkPresentCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markPresent\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a student as present in given tutorial.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"TUTORIAL_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEK + \"SEMESTER_WEEK (between 1 to 13 inclusive) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"STUDENT_INDEX (set as \\\"all\\\" to mark all students in tutorial as present)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_INDEX + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_TUTORIAL_WEEK + \"10 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + PREFIX_STUDENT + \"3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student %1$s in %2$s %3$s successfully marked as present for \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"week %4$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_ALL_SUCCESS \u003d \"All students in %1$s %2$s successfully marked as present for \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \"week %3$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index tutorialIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final int week;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final boolean isMarkAll;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a markPresentCommand to mark attendance of the specified student at {@code studentIndex}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * to tutorial at {@code tutorialIndex} as present. If {@code isMarkAll} is true, then all students"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * in the tutorial will be marked as present."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public MarkPresentCommand(Index tutorialIndex, Index studentIndex, int week, Boolean isMarkAll) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialIndex \u003d tutorialIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.isMarkAll \u003d isMarkAll;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (tutorialIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial tutorialToMark \u003d lastShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (!isMarkAll) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                Student studentToMark \u003d tutorialToMark.getEnrolledStudents().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                model.markPresent(tutorialToMark, studentToMark, week);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                // Refresh the list to update the GUI attendance"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                List\u003cTutorial\u003e updatedShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                Tutorial updatedTutorial \u003d updatedShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, studentToMark.getName().fullName,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        tutorialToMark.getModCode(), tutorialToMark.getTutorialName(), week + 1), updatedTutorial,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        week);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                for (Student student : tutorialToMark.getEnrolledStudents()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    model.markPresent(tutorialToMark, student, week);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                // Refresh the list to update the GUI attendance"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                List\u003cTutorial\u003e updatedShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                Tutorial updatedTutorial \u003d updatedShownList.get(tutorialIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                System.out.println(updatedTutorial.getAttendanceWeek(week));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_ALL_SUCCESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        tutorialToMark.getModCode(), tutorialToMark.getTutorialName(), week + 1), updatedTutorial,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        week);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TUTORIAL_STUDENT_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"name/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_MATRIC_NUMBER \u003d new Prefix(\"matric/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"email/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"remark/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_PLACE \u003d new Prefix(\"place/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_STUDENT \u003d new Prefix(\"student/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"INDEX (must be a positive integer)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /* Consult definitions */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_CONSULT_BEGIN_DATE_TIME \u003d new Prefix(\"beginDateTime/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Prefix PREFIX_CONSULT_END_DATE_TIME \u003d new Prefix(\"endDateTime/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /* Tutorial definitions */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_NAME \u003d new Prefix(\"tutorialName/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_WEEKDAY \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_BEGIN_TIME \u003d new Prefix(\"beginTime/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_END_TIME \u003d new Prefix(\"endTime/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_INDEX \u003d new Prefix(\"tutorialIndex/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_WEEK \u003d new Prefix(\"week/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /* Module definitions */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"modCode/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NAME \u003d new Prefix(\"modName/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NOTE \u003d new Prefix(\"modNote/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final Prefix PREFIX_MODULE_LINK \u003d new Prefix(\"modLink/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final Prefix PREFIX_MODULE_LINK_NAME \u003d new Prefix(\"modLinkName/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /* Reminder definitions */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 5,
      "nigelnnk": 5,
      "-": 10,
      "hanchingyong": 11,
      "suwoons": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLink;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_ATTENDANCE_INDEX \u003d \"Index is not a non-zero unsigned integer,\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            + \" or \\\"all\\\".\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"Format of date and time is not supported.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Format of date is not supported.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Format of time is not supported.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY \u003d \"Format of day is not supported.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses {@code studentIndex} into an {@code Index} and returns it. If {@code studentIndex} is \"all\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * a 0 index will be returned. Otherwise, it will be a one-based index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static Index parseAttendanceStudent(String studentIndex) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedIndex \u003d studentIndex.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (trimmedIndex.toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_STUDENT_ATTENDANCE_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Parses a {@code String matricNumber} into a {@code MatricNumber}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * @throws ParseException if the given {@code matricNumber} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static MatricNumber parseMatricNumber(String matricNumber) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String trimmedMatricNumber \u003d matricNumber.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!MatricNumber.isValidMatricNumber(trimmedMatricNumber)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new ParseException(MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new MatricNumber(trimmedMatricNumber);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses {@code \u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static Location parsePlace(String location) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The format of the LocalDateTime will be in the format yyyy-MM-dd HH:mm."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            formattedDateTime \u003d LocalDateTime.parse(trimmedDateTime, formatter);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The format of the LocalDate will be in the format yyyy-MM-dd."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalDate formattedDate;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            formattedDate \u003d LocalDate.parse(trimmedDate, formatter);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return formattedDate;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String time} into a {@code LocalTime}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The format of the LocalTime will be in the format HH:mm."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime formattedTime;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            formattedTime \u003d LocalTime.parse(trimmedTime, formatter);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return formattedTime;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String day} into a {@code DayOfWeek}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static DayOfWeek parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek parsedDay;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            parsedDay \u003d DayOfWeek.of(Integer.parseInt(trimmedDay));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return parsedDay;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String week} into an {@code int} which only accepts values which can be converted to an integer"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and is between 1 and 13 inclusive."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code week} is invalid."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static int parseTutorialWeek(String week) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(week);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedWeek \u003d week.trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int parsedWeek;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            parsedWeek \u003d Integer.parseInt(trimmedWeek);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (parsedWeek \u003c 1 || parsedWeek \u003e 13) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return parsedWeek - 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses a {@code String tutorialName} into a {@code TutorialName}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the given {@code tutorialName} is invalid."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static TutorialName parseTutorialName(String tutorialName) throws ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorialName);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        String trimmedTutorialName \u003d tutorialName.trim();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!TutorialName.isValidTutorialName(trimmedTutorialName)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(TutorialName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new TutorialName(trimmedTutorialName);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses a {@code String modCode} into a {@code ModCode}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the given {@code modCode} is invalid."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static ModCode parseModCode(String modCode) throws ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String trimmedModCode \u003d modCode.trim().toUpperCase();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!ModCode.isValidModCode(trimmedModCode)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(ModCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new ModCode(trimmedModCode);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses a {@code String modLink} into a {@code ModLink}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the given {@code modLink} is invalid."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static ModLink parseModLink(String modLink) throws ParseException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modLink);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String trimmedModLink \u003d modLink.trim();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!ModLink.isValidModLink(trimmedModLink)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(ModLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new ModLink(trimmedModLink);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 36,
      "nigelnnk": 34,
      "-": 96,
      "hanchingyong": 31,
      "suwoons": 113,
      "shunde97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parses input arguments and creates a new RemarkCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemarkCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns an RemarkCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                PREFIX_REMARK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Remark remark \u003d new Remark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 39,
      "shunde97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TAbleParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.AddConsultCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.DeleteConsultCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.EditConsultCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.ListConsultCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.AddModCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.AddModLinkCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.ClearModLinksCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.CopyModLinkCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.DeleteModCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.ListModCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.NoteModCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.ViewModInfoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.AddReminderCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.DeleteReminderCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.DoneReminderCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.EditReminderCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.DeleteStudentCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.FindStudentCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.ListStudentCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.tutorials.AddTutorialCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.AddTutorialStudentCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.tutorials.DeleteTutorialCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.DeleteTutorialStudentCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.ListAttendanceCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.tutorials.ListTutorialCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.MarkAbsentCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.MarkPresentCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.AddConsultCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.ClearConsultCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.DeleteConsultCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.consults.EditConsultCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.mods.AddModCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.mods.AddModLinkCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.mods.ClearModLinksCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.mods.CopyModLinkCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.mods.DeleteModCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.mods.NoteModCommandParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.mods.ViewModInfoCommandParser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.reminders.AddReminderCommandParser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.reminders.DeleteReminderCommandParser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.reminders.DoneReminderCommandParser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.reminders.EditReminderCommandParser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.AddStudentCommandParser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.DeleteStudentCommandParser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.EditStudentCommandParser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.FindStudentCommandParser;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.tutorials.AddTutorialCommandParser;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.tutorials.AddTutorialStudentCommandParser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.tutorials.DeleteTutorialCommandParser;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.tutorials.DeleteTutorialStudentCommandParser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.tutorials.ListAttendanceCommandParser;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.tutorials.MarkAbsentCommandParser;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.tutorials.MarkPresentCommandParser;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class TAbleParser {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        case EditStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new EditStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        case DeleteStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new DeleteStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        case FindStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new FindStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        case ListStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return new ListStudentCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Consult Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case AddConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new AddConsultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case ListConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new ListConsultCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case DeleteConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new DeleteConsultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case EditConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new EditConsultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case ClearConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new ClearConsultCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tutorial Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case AddTutorialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new AddTutorialCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case AddTutorialStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new AddTutorialStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case DeleteTutorialStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new DeleteTutorialStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case MarkPresentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new MarkPresentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case MarkAbsentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new MarkAbsentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case DeleteTutorialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new DeleteTutorialCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case ListTutorialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new ListTutorialCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case ListAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new ListAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mod Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case AddModCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new AddModCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case DeleteModCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new DeleteModCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case ListModCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new ListModCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case NoteModCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new NoteModCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case AddModLinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new AddModLinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case ClearModLinksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new ClearModLinksCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case ViewModInfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new ViewModInfoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case CopyModLinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return new CopyModLinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminder Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        case AddReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return new AddReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        case DeleteReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return new DeleteReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        case DoneReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return new DoneReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        case EditReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return new EditReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new CalendarCommand();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 25,
      "nigelnnk": 49,
      "-": 56,
      "hanchingyong": 44,
      "shunde97": 11,
      "suwoons": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/AddConsultCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_DIFFERENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.ConsultUtil.checkSameDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.ConsultUtil.checkStartEndDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.AddConsultCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class AddConsultCommandParser implements Parser\u003cAddConsultCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddConsultCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns an AddConsultCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public AddConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT, PREFIX_CONSULT_BEGIN_DATE_TIME,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        PREFIX_CONSULT_END_DATE_TIME, PREFIX_PLACE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT, PREFIX_CONSULT_BEGIN_DATE_TIME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                PREFIX_CONSULT_END_DATE_TIME, PREFIX_PLACE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                AddConsultCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime beginDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_CONSULT_BEGIN_DATE_TIME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_CONSULT_END_DATE_TIME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Location location \u003d ParserUtil.parsePlace(argMultimap.getValue("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_PLACE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!checkStartEndDateTime(beginDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!checkSameDate(beginDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(MESSAGE_CONSULT_DIFFERENT_DATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult consult \u003d new Consult(beginDateTime, endDateTime, location);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new AddConsultCommand(index, consult);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "hanchingyong": 66,
      "suwoons": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/ClearConsultCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Clears the Consult TAble."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ClearConsultCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearConsults\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Consult TAble has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        model.clearConsults();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/DeleteConsultCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.DeleteConsultCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.DeleteStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parses input arguments and creates a new DeleteConsultCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DeleteConsultCommandParser implements Parser\u003cDeleteConsultCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteConsultCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns a DeleteConsultCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public DeleteConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new DeleteConsultCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStudentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 29,
      "shunde97": 2,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/consults/EditConsultCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.consults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_BEGIN_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSULT_END_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.EditConsultCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Parses input arguments and creates a new EditStudentCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class EditConsultCommandParser implements Parser\u003cEditConsultCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditConsultCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * and returns an EditConsultCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public EditConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONSULT_BEGIN_DATE_TIME, PREFIX_CONSULT_END_DATE_TIME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        PREFIX_PLACE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    EditConsultCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        EditConsultCommand.EditConsultDescriptor editConsultDescriptor \u003d new EditConsultCommand.EditConsultDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONSULT_BEGIN_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            editConsultDescriptor.setBeginDateTime("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_CONSULT_BEGIN_DATE_TIME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONSULT_END_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            editConsultDescriptor.setEndDateTime("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_CONSULT_END_DATE_TIME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PLACE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            editConsultDescriptor.setLocation(ParserUtil.parsePlace(argMultimap.getValue(PREFIX_PLACE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!editConsultDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ParseException(EditConsultCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new EditConsultCommand(index, editConsultDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 60,
      "shunde97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mods/AddModCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.parser.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.AddModCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Parses input arguments and creates a new AddModCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class AddModCommandParser implements Parser\u003cAddModCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * and returns an AddModCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public AddModCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_MODULE_NAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                AddModCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String modName \u003d argMultimap.getValue(PREFIX_MODULE_NAME).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new AddModCommand(modCode, modName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mods/AddModLinkCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.parser.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_LINK_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.AddModLinkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Parses input arguments and creates a new AddModLinkCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class AddModLinkCommandParser implements Parser\u003cAddModLinkCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModLinkCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * and returns an AddModLinkCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public AddModLinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_MODULE_LINK, PREFIX_MODULE_LINK_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_MODULE_LINK, PREFIX_MODULE_LINK_NAME)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                AddModLinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String modLinkName \u003d argMultimap.getValue(PREFIX_MODULE_LINK_NAME).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModLink link \u003d ParserUtil.parseModLink(argMultimap.getValue(PREFIX_MODULE_LINK).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new AddModLinkCommand(modCode, modLinkName, link);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mods/ClearModLinksCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.parser.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.ClearModLinksCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Parses input arguments and creates a new ClearModLinksCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ClearModLinksCommandParser implements Parser\u003cClearModLinksCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearModLinksCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * and returns a ClearModLinksCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ClearModLinksCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                ClearModLinksCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new ClearModLinksCommand(modCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mods/CopyModLinkCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.parser.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.CopyModLinkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Parses input arguments and creates a new CopyModLinkCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class CopyModLinkCommandParser implements Parser\u003cCopyModLinkCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CopyModLinkCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * and returns a CopyModLinkCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public CopyModLinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyModLinkCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                CopyModLinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d new ModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new CopyModLinkCommand(index, modCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mods/DeleteModCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.parser.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.DeleteModCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Parses input arguments and creates a new DeleteModCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class DeleteModCommandParser implements Parser\u003cDeleteModCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * and returns a DeleteModCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public DeleteModCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                DeleteModCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d new ModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new DeleteModCommand(modCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mods/NoteModCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.parser.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.NoteModCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Parses input arguments and creates a new NoteModCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class NoteModCommandParser implements Parser\u003cNoteModCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NoteModCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * and returns an NoteModCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public NoteModCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_MODULE_NOTE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_MODULE_NOTE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                NoteModCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d new ModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String note \u003d argMultimap.getValue(PREFIX_MODULE_NOTE).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new NoteModCommand(modCode, note);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mods/ViewModInfoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.logic.parser.mods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.commands.mods.ViewModInfoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Parses input arguments and creates a new ViewModInfoCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ViewModInfoCommandParser implements Parser\u003cViewModInfoCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewModInfoCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * and returns a ViewModInfoCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ViewModInfoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                ViewModInfoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d new ModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new ViewModInfoCommand(modCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminders/AddReminderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.parser.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.AddReminderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class AddReminderCommandParser implements Parser\u003cAddReminderCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddReminderCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * and returns an AddReminderCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public AddReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER_DESCRIPTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                        PREFIX_REMINDER_DATE, PREFIX_REMINDER_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                PREFIX_REMINDER_DATE, PREFIX_REMINDER_TIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    AddReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                PREFIX_REMINDER_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                PREFIX_REMINDER_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                PREFIX_REMINDER_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder reminder \u003d new Reminder(description, date, time, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new AddReminderCommand(reminder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminders/DeleteReminderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.parser.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.DeleteReminderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Parses input arguments and creates a new DeleteReminderCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class DeleteReminderCommandParser implements Parser\u003cDeleteReminderCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteReminderCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * and returns a DeleteReminderCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public DeleteReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return new DeleteReminderCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminders/DoneReminderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.parser.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.DoneReminderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Parses input arguments and creates a new DoneReminderCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class DoneReminderCommandParser implements Parser\u003cDoneReminderCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneReminderCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * and returns a DoneReminderCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public DoneReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return new DoneReminderCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/reminders/EditReminderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.parser.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.EditReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Parses input arguments and creates a new EditReminderCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class EditReminderCommandParser implements Parser\u003cEditReminderCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditReminderCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * and returns an EditReminderCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public EditReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER_DESCRIPTION, PREFIX_REMINDER_DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                        PREFIX_REMINDER_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    EditReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        EditReminderCommand.EditReminderDescriptor editReminderDescriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                new EditReminderCommand.EditReminderDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            editReminderDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    argMultimap.getValue(PREFIX_REMINDER_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER_DATE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            editReminderDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_REMINDER_DATE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER_TIME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            editReminderDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_REMINDER_TIME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!editReminderDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ParseException(EditReminderCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new EditReminderCommand(index, editReminderDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/students/AddStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * and returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_EMAIL, PREFIX_TAG,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                        PREFIX_REMARK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command cannot add remarks straight away"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student student \u003d new Student(name, matricNumber, email, tagList, remark);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new AddStudentCommand(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 12,
      "-": 39,
      "shunde97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/students/DeleteStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.DeleteStudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Parses input arguments and creates a new DeleteStudentCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DeleteStudentCommandParser implements Parser\u003cDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * and returns a DeleteStudentCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public DeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return new DeleteStudentCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStudentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 4,
      "-": 20,
      "shunde97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/students/EditStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Parses input arguments and creates a new EditStudentCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class EditStudentCommandParser implements Parser\u003cEditStudentCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStudentCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * and returns an EditStudentCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRIC_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            editStudentDescriptor.setMatricNumber(ParserUtil.parseMatricNumber(argMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    .getValue(PREFIX_MATRIC_NUMBER).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new ParseException(EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new EditStudentCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 10,
      "-": 58,
      "shunde97": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/students/FindStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.parser.students;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.FindStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Parses input arguments and creates a new FindStudentCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class FindStudentCommandParser implements Parser\u003cFindStudentCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindStudentCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * and returns a FindStudentCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public FindStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new FindStudentCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 3,
      "-": 22,
      "shunde97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/AddTutorialCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TUTORIAL_BEGIN_TIME_BEFORE_END_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.TutorialUtil.checkStartEndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_BEGIN_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_END_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKDAY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.AddTutorialCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new AddTutorial object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AddTutorialCommandParser implements Parser\u003cAddTutorialCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTutorialCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns an AddTutorialCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AddTutorialCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        PREFIX_TUTORIAL_WEEKDAY, PREFIX_TUTORIAL_BEGIN_TIME, PREFIX_TUTORIAL_END_TIME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        PREFIX_PLACE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_WEEKDAY, PREFIX_TUTORIAL_BEGIN_TIME, PREFIX_TUTORIAL_END_TIME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_PLACE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    AddTutorialCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode moduleCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialName tutorialName \u003d ParserUtil.parseTutorialName(argMultimap.getValue("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek weekday \u003d ParserUtil.parseDay(argMultimap.getValue("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_WEEKDAY).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime beginTime \u003d ParserUtil.parseTime(argMultimap.getValue("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_TUTORIAL_BEGIN_TIME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "               PREFIX_TUTORIAL_END_TIME).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Location location \u003d ParserUtil.parsePlace(argMultimap.getValue("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                PREFIX_PLACE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!checkStartEndTime(beginTime, endTime)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(MESSAGE_TUTORIAL_BEGIN_TIME_BEFORE_END_TIME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Tutorial tutorial \u003d new Tutorial(moduleCode, tutorialName, weekday, beginTime, endTime, location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new AddTutorialCommand(tutorial);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 6,
      "hanchingyong": 1,
      "suwoons": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/AddTutorialStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.AddTutorialStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new AddTutorialStudentCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AddTutorialStudentCommandParser implements Parser\u003cAddTutorialStudentCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTutorialStudentCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns an AddTutorialStudentCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AddTutorialStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TUTORIAL_INDEX, PREFIX_STUDENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_INDEX, PREFIX_STUDENT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    AddTutorialStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index tutorialIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TUTORIAL_INDEX).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new AddTutorialStudentCommand(tutorialIndex, studentIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/DeleteTutorialCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.DeleteTutorialCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new DeleteTutorialCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DeleteTutorialCommandParser implements Parser\u003cDeleteTutorialCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTutorialCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns a DeleteTutorialCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DeleteTutorialCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new DeleteTutorialCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTutorialCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/DeleteTutorialStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.DeleteTutorialStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new DeleteTutorialStudentCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DeleteTutorialStudentCommandParser implements Parser\u003cDeleteTutorialStudentCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTutorialStudentCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns a DeleteTutorialStudentCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DeleteTutorialStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TUTORIAL_INDEX, PREFIX_STUDENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_INDEX, PREFIX_STUDENT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    DeleteTutorialStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index tutorialIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TUTORIAL_INDEX).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new DeleteTutorialStudentCommand(tutorialIndex, studentIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/ListAttendanceCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.ListAttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input commands and creates a new ListAttendanceCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class ListAttendanceCommandParser implements Parser\u003cListAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListTutorialCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns a ListAttendanceCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ListAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TUTORIAL_INDEX, PREFIX_TUTORIAL_WEEK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_INDEX, PREFIX_TUTORIAL_WEEK)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    ListAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index tutorialIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TUTORIAL_INDEX).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int weekZeroBased \u003d ParserUtil.parseTutorialWeek(argMultimap.getValue(PREFIX_TUTORIAL_WEEK).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new ListAttendanceCommand(tutorialIndex, weekZeroBased);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/MarkAbsentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.MarkAbsentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new MarkAbsentCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class MarkAbsentCommandParser implements Parser\u003cMarkAbsentCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkAbsentCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns a MarkAbsentCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public MarkAbsentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TUTORIAL_INDEX, PREFIX_TUTORIAL_WEEK, PREFIX_STUDENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_INDEX, PREFIX_TUTORIAL_WEEK, PREFIX_STUDENT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    MarkAbsentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index tutorialIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TUTORIAL_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index studentIndex \u003d ParserUtil.parseAttendanceStudent(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int week \u003d ParserUtil.parseTutorialWeek(argMultimap.getValue(PREFIX_TUTORIAL_WEEK).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        boolean isMarkAll \u003d argMultimap.getValue(PREFIX_STUDENT).get().toLowerCase().equals(\"all\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new MarkAbsentCommand(tutorialIndex, studentIndex, week, isMarkAll);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tutorials/MarkPresentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.parser.tutorials;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.MarkPresentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Parses input arguments and creates a new MarkPresentCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class MarkPresentCommandParser implements Parser\u003cMarkPresentCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkPresentCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and returns a MarkPresentCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public MarkPresentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TUTORIAL_INDEX, PREFIX_TUTORIAL_WEEK, PREFIX_STUDENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_INDEX, PREFIX_TUTORIAL_WEEK, PREFIX_STUDENT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    MarkPresentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index tutorialIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TUTORIAL_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Index studentIndex \u003d ParserUtil.parseAttendanceStudent(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int week \u003d ParserUtil.parseTutorialWeek(argMultimap.getValue(PREFIX_TUTORIAL_WEEK).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        boolean isMarkAll \u003d argMultimap.getValue(PREFIX_STUDENT).get().toLowerCase().equals(\"all\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return new MarkPresentCommand(tutorialIndex, studentIndex, week, isMarkAll);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Predicate\u003cConsult\u003e PREDICATE_SHOW_ALL_CONSULTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Predicate\u003cTutorial\u003e PREDICATE_SHOW_ALL_TUTORIALS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    Predicate\u003cMod\u003e PREDICATE_SHOW_ALL_MODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    Predicate\u003cReminder\u003e PREDICATE_SHOW_ALL_REMINDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces address book data with the data in {@code studentTAble}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void setStudentTAble(ReadOnlyStudent studentTAble);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /** Returns the StudentTAble */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    ReadOnlyStudent getStudentTAble();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * {@code student} must not already exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in Table."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // Consult-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a consult with the same identity as {@code consult} exists in TAble."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    boolean hasConsult(Consult consult);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds the given consult."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consult} must not already exist in TAble."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void addConsult(Consult consult);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Deletes the given consult."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must exist in TAble."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void deleteConsult(Consult target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the given consult {@code consultToEdit} with {@code editedConsult}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consultToEdit} must exist in TAble."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student identity of {@code editedConsult} must not be the same as another existing consult in TAble."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void setConsult(Consult consultToEdit, Consult editedConsult);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Deletes all consults in the Consult TAble."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void clearConsults();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered consult list */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    ObservableList\u003cConsult\u003e getFilteredConsultList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Updates the filter of the filtered consult list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a {@code consult}\u0027s timing clashes with another {@code consult}\u0027s timing in TAble."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    boolean hasSameDateTime(Consult consult);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /** Returns the Consult TAble */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    ReadOnlyConsult getConsultTAble();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // Tutorial-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a tutorial with the same identity as {@code tutorial} exists in TAble."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    boolean hasTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a specified tutorial contains the identical {@code student}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    boolean hasTutorialStudent(Tutorial tutorial, Student student);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds the given tutorial."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorial} must not already exist in TAble."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void addTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds the given student to the given tutorial."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorial} and {@code student} must already exist in TAble."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void addTutorialStudent(Tutorial tutorial, Student student);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Deletes the given tutorial."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must exist in TAble."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void deleteTutorial(Tutorial target);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Deletes the given student from  the given tutorial."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code toDeleteFrom} and {@code target} must already exist in TutorialTAble."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void deleteTutorialStudent(Tutorial toDeleteFrom, Student target);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks the given student in the given tutorial as present in {@code week}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorialToMark} and {@code studentToMark} must already exist in TutorialTAble."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void markPresent(Tutorial tutorialToMark, Student studentToMark, int week);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks the given student in the given tutorial as absent in {@code week}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorialToMark} and {@code studentToMark} must already exist in TutorialTAble."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /** Returns an unmodifiable view of the filtered tutorial list */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    ObservableList\u003cTutorial\u003e getFilteredTutorialList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Updates the filter of the filtered tutorial list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a {@code tutorial}\u0027s timing clashes with another {@code tutorial}\u0027s timing in TAble."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    boolean hasSameTiming(Tutorial tutorial);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /** Returns the Tutorial TAble */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    ReadOnlyTutorial getTutorialTAble();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Mod-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if a module with the same identity as {@code mod} exists in TAble."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    boolean hasMod(Mod mod);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code mod} must not already exist in TAble."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void addMod(Mod mod);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module must exist in TAble."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void deleteMod(Mod mod);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Finds the corresponding module given a {@code modCode}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * As the module may not exist in TAble, an optional Mod is returned."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param modCode module code of the module to be found"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    Optional\u003cMod\u003e findMod(ModCode modCode);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedMod}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module identity of {@code editedMod} must not be the same as another existing Mod in Table."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void setMod(Mod target, Mod editedMod);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    ObservableList\u003cMod\u003e getFilteredModList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void updateFilteredModList(Predicate\u003cMod\u003e predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /** Returns the module TAble */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    ReadOnlyMod getModTAble();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns currently viewed Mod."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    ObservableList\u003cMod\u003e getViewedMod();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Sets current view to a different {@code mod}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void setViewedMod(Mod mod);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    // Reminder-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in TAble."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Adds the given reminder."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code reminder} must not already exist in TAble."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Deletes the given reminder."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The reminder must exist in TAble."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    void deleteReminder(Reminder target);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Replaces the given reminder {@code reminderToEdit} with {@code editedReminder}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code reminderToEdit} must exist in TAble."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The identity of {@code editedReminder} must not be the same as another existing reminder in TAble."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    void setReminder(Reminder reminderToEdit, Reminder editedReminder);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Marks the given reminder as done."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The reminder must exist in TAble."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    Reminder doneReminder(Reminder target);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered reminder list */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Updates the filter of the filtered reminder list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /** Returns the Reminder TAble */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    ReadOnlyReminder getReminderTAble();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 48,
      "nigelnnk": 59,
      "-": 66,
      "hanchingyong": 51,
      "suwoons": 72,
      "shunde97": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final StudentTAble studentTAble;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final ConsultTAble consultTAble;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final FilteredList\u003cConsult\u003e filteredConsults;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final TutorialTAble tutorialTAble;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final FilteredList\u003cTutorial\u003e filteredTutorials;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModTAble modTAble;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final FilteredList\u003cMod\u003e filteredMods;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final ReminderTAble reminderTAble;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final FilteredList\u003cReminder\u003e filteredReminders;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Initializes a ModelManager with the given studentTAble and userPrefs."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ModelManager(ReadOnlyStudent addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyConsult consultTAble,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                        ReadOnlyTutorial tutorialTAble, ReadOnlyMod modTAble, ReadOnlyReminder reminderTAble) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, consultTAble, tutorialTAble, modTAble, reminderTAble);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" , user prefs \" + userPrefs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \", with consults \" + consultTAble + \" and modules in \" + modTAble);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.studentTAble \u003d new StudentTAble(addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.studentTAble.getStudentList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultTAble \u003d new ConsultTAble(consultTAble);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        filteredConsults \u003d new FilteredList\u003c\u003e(this.consultTAble.getAllConsults());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialTAble \u003d new TutorialTAble(tutorialTAble);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        filteredTutorials \u003d new FilteredList\u003c\u003e(this.tutorialTAble.getAllTutorials());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modTAble \u003d new ModTAble(modTAble);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        filteredMods \u003d new FilteredList\u003c\u003e(this.modTAble.getAllMods());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.reminderTAble \u003d new ReminderTAble(reminderTAble);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        filteredReminders \u003d new FilteredList\u003c\u003e(this.reminderTAble.getAllReminders());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this(new StudentTAble(), new UserPrefs(), new ConsultTAble(), new TutorialTAble(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentTAble \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setStudentTAble(ReadOnlyStudent studentTAble) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.studentTAble.resetData(studentTAble);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return studentTAble;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return studentTAble.hasStudent(student);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble.removeStudent(target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble.addStudent(student);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Gets student with specific index number."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param indexNumber Index number of student."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Student with index number specified."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Student getStudent(int indexNumber) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return studentTAble.getStudent(indexNumber);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return studentTAble.equals(other.studentTAble)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    // Consults section \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consult);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAble.hasConsult(consult);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.addConsult(consult);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void deleteConsult(Consult target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.removeConsult(target);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsult(Consult consultToEdit, Consult editedConsult) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(consultToEdit, editedConsult);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.setConsult(consultToEdit, editedConsult);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void clearConsults() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultTAble.clearConsults();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return filteredConsults;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        filteredConsults.setPredicate(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(consult, consultTAble);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAble.hasSameDateTime(consult);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ReadOnlyConsult getConsultTAble() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAble;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Tutorials section \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return tutorialTAble.hasTutorial(tutorial);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorial, student);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialTAble.hasTutorialStudent(tutorial, student);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialTAble.addTutorialStudent(tutorial, student);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorialTAble.addTutorial(tutorial);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void deleteTutorial(Tutorial target) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialTAble.removeTutorial(target);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void deleteTutorialStudent(Tutorial toDeleteFrom, Student target) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialTAble.deleteTutorialStudent(toDeleteFrom, target);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markPresent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialTAble.markPresent(tutorialToMark, studentToMark, week);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialTAble.markAbsent(tutorialToMark, studentToMark, week);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return filteredTutorials;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        filteredTutorials.setPredicate(predicate);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorial, tutorialTAble);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialTAble.hasSameTiming(tutorial);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ReadOnlyTutorial getTutorialTAble() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialTAble;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Modules section \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean hasMod(Mod mod) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(mod);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modTAble.hasMod(mod);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void addMod(Mod mod) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modTAble.addMod(mod);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void deleteMod(Mod target) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modTAble.removeMod(target);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Optional\u003cMod\u003e findMod(ModCode modCode) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        List\u003cMod\u003e lastShownList \u003d this.getFilteredModList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod temp \u003d new Mod(modCode, \"\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return lastShownList.stream().filter(x -\u003e x.isSameMod(temp)).findFirst();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMod(Mod target, Mod editedMod) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(target, editedMod);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modTAble.setMod(target, editedMod);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getFilteredModList() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return filteredMods;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void updateFilteredModList(Predicate\u003cMod\u003e predicate) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        filteredMods.setPredicate(predicate);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ReadOnlyMod getModTAble() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modTAble;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getViewedMod() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modTAble.getViewedModSingletonList();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setViewedMod(Mod mod) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modTAble.setViewedModSingletonList(mod);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    // Reminders section \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminderTAble.hasReminder(reminder);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderTAble.addReminder(reminder);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderTAble.removeReminder(target);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setReminder(Reminder reminderToEdit, Reminder editedReminder) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireAllNonNull(reminderToEdit, editedReminder);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderTAble.setReminder(reminderToEdit, editedReminder);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder doneReminder(Reminder target) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminderTAble.markReminderAsDone(target);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return filteredReminders;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        filteredReminders.setPredicate(predicate);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReadOnlyReminder getReminderTAble() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminderTAble;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 56,
      "nigelnnk": 67,
      "-": 121,
      "hanchingyong": 86,
      "suwoons": 70,
      "shunde97": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Path consultTAbleFilePath \u003d Paths.get(\"data\", \"consults.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Path tutorialTAbleFilePath \u003d Paths.get(\"data\", \"tutorials.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Path modTAbleFilePath \u003d Paths.get(\"data\", \"mods.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private Path reminderTableFilePath \u003d Paths.get(\"data\", \"reminders.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Consults start \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Path getConsultTAbleFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAbleFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsultTAbleFilePath(Path consultTAbleFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consultTAbleFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultTAbleFilePath \u003d consultTAbleFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Tutorials start \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Path getTutorialTAbleFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return tutorialTAbleFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setTutorialTAbleFilePath(Path tutorialTAbleFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(tutorialTAbleFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.tutorialTAbleFilePath \u003d tutorialTAbleFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Modules start \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Path getModTAbleFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modTAbleFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setModTAbleFilePath(Path modTAbleFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modTAbleFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modTAbleFilePath \u003d modTAbleFilePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    // Reminders start \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Path getReminderTableFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminderTableFilePath;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setReminderTableFilePath(Path reminderTableFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(reminderTableFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.reminderTableFilePath \u003d reminderTableFilePath;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    //end"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 12,
      "nigelnnk": 21,
      "-": 86,
      "hanchingyong": 10,
      "suwoons": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Location.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Represents a location in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Represents Location where Consults and Tutorials are held."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \"Locations should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public final String eventLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param eventLocation A valid event location."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Location(String eventLocation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(eventLocation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        checkArgument(isValidLocation(eventLocation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return eventLocation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 eventLocation.equals(((Location) other).eventLocation)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return eventLocation.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 56,
      "suwoons": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/Consult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSULT_DIFFERENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.ConsultUtil.checkSameDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.ConsultUtil.checkStartEndDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a Consultation in TAble."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Consult {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private LocalDateTime beginDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Name studentName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult(LocalDateTime beginDateTime, LocalDateTime endDateTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                   Location location, Name studentName, MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(beginDateTime, endDateTime, location, studentName, matricNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        checkArgument(checkStartEndDateTime(beginDateTime, endDateTime),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        checkArgument(checkSameDate(beginDateTime, endDateTime), MESSAGE_CONSULT_DIFFERENT_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.beginDateTime \u003d beginDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructor without MatricNumber and StudentName."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param beginDateTime Start Date Time of the consult."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param endDateTime End Date Time of the consult."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param location Location of the consult."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult(LocalDateTime beginDateTime, LocalDateTime endDateTime, Location location) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(beginDateTime, endDateTime, location);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        checkArgument(checkStartEndDateTime(beginDateTime, endDateTime),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            MESSAGE_CONSULT_BEGIN_TIME_BEFORE_END_TIME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.beginDateTime \u003d beginDateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public MatricNumber getMatricNumber() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return matricNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public LocalDateTime getBeginDateTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return beginDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Name getStudentName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return studentName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setStudentName(Name studentName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if both consults have the same Date and Time, as the TA cannot attend both."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof Consult)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult otherEvent \u003d (Consult) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return otherEvent.getBeginDateTime().equals(getBeginDateTime())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if both consults timing clash, where the beginDateTime of the first consult is after the second"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * consult or vice versa."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean timeClash(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof Consult)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult otherEvent \u003d (Consult) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (!checkStartEndDateTime(otherEvent.getBeginDateTime(), getEndDateTime())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u0026\u0026 !checkStartEndDateTime(getBeginDateTime(), otherEvent.getBeginDateTime()))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (!checkStartEndDateTime(otherEvent.getEndDateTime(), getBeginDateTime())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u0026\u0026 !checkStartEndDateTime(getEndDateTime(), otherEvent.getEndDateTime()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        builder.append(\" Start Time: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(getBeginDateTime())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(getEndDateTime())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(\" Place: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .append(getLocation());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 129,
      "suwoons": 3,
      "shunde97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/ConsultTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Wraps all consult data at the Consult TAble level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultTAble implements ReadOnlyConsult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final UniqueConsultList consults;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults \u003d new UniqueConsultList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates a ConsultTAble using the consults in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble(ReadOnlyConsult toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "      * Creates a ConsultTAble using the consults in the {@code consultList}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble(List\u003cConsult\u003e consultList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consults.setConsults(consultList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the contents of the consult list with {@code consults}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consults} must not contain duplicate consults."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsults(List\u003cConsult\u003e consults) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consults.setConsults(consults);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Resets the existing data of this {@code ConsultTAble} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void resetData(ReadOnlyConsult newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        setConsults(newData.getAllConsults());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //// Consult-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if a consult with the same identity as {@code consult} exists in TAble."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consult);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.contains(consult);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds a consult to TAble."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must not already exist in TAble."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.add(consult);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the given consult {@code target} in the list with {@code editedConsult}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code target} must exist in the ConsultTAble."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult identity of {@code editedConsult} must not be the same"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * as another existing student in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsult(Consult target, Consult editedConsult) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(editedConsult);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.setConsult(target, editedConsult);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes {@code key} from this {@code ConsultTAble}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code key} must exist in the Consult TAble."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void removeConsult(Consult key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns {@code consult} from {@code TAble}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consult} must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult getConsult(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.getConsult(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes all {@code consults} from this {@code ConsultTAble}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void clearConsults() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.clearConsults();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.asUnmodifiableObservableList().size() + \" consults\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e getAllConsults() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof ConsultTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 consults.equals(((ConsultTAble) other).consults));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consults.hasSameDateTime(consult);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 144,
      "shunde97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/ReadOnlyConsult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Unmodifiable view of all Consults."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public interface ReadOnlyConsult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns an unmodifiable view of the consults list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * This list will not contain any duplicate consults."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    List\u003cConsult\u003e getAllConsults();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/UniqueConsultList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.exceptions.ConsultNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.exceptions.DuplicateConsultException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A list of consults that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A consult is considered unique by comparing using {@code Consult#equals(Consult)}. As such, adding, updating and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * removal of consult uses Consult#equals(Consult) so as to ensure that the consult being added, updated or removed is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * unique in terms of identity in the UniqueConsultList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * @see Consult#equals(Object)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class UniqueConsultList implements Iterable\u003cConsult\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final ObservableList\u003cConsult\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final ObservableList\u003cConsult\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if the list contains an equivalent consult as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean contains(Consult toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if the list contains another consult which timing clashes with the argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consult);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.info(\"\" + internalList.stream().filter(consult::timeClash).count());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.stream().filter(consult::timeClash).count() \u003e 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds a consult to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void add(Consult toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DuplicateConsultException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the consult {@code target} in the list with {@code editedConsult}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student identity of {@code editedConsult} must not be the same as another existing consult in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsult(Consult target, Consult editedConsult) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(target, editedConsult);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ConsultNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!target.equals(editedConsult) \u0026\u0026 contains(editedConsult)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DuplicateConsultException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.set(index, editedConsult);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes the equivalent consult from the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * The consult must exist in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void remove(Consult toRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new ConsultNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsults(UniqueConsultList replacement) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Replaces the contents of this list with {@code consults}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code consults} must not contain duplicate consults."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setConsults(List\u003cConsult\u003e consults) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireAllNonNull(consults);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!consultsAreUnique(consults)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DuplicateConsultException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.setAll(consults);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the consult at the {@code index}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index Index of the student."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Consult at the index."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult getConsult(int index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes all {@code consults} from this {@code ConsultTAble}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void clearConsults() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        internalList.remove(0, internalList.size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Iterator\u003cConsult\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof UniqueConsultList // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueConsultList) other).internalList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if {@code consults} contains only unique consults."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private boolean consultsAreUnique(List\u003cConsult\u003e consults) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (int i \u003d 0; i \u003c consults.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c consults.size(); j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                if (consults.get(i).equals(consults.get(j))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ObservableList\u003cConsult\u003e getAllConsults() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 168,
      "shunde97": 2,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/exceptions/ConsultNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Signals that the operation is unable to find the specified consult."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/consult/exceptions/DuplicateConsultException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.event.consult.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Signals that the operation will result in duplicate Consults (Consults are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DuplicateConsultException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public DuplicateConsultException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(\"Operation would result in duplicate consults\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/ReadOnlyTutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Unmodifiable view of all Tutorials."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public interface ReadOnlyTutorial {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns an unmodifiable view of the tutorials list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * This list will not contain any duplicate tutorials."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    List\u003cTutorial\u003e getAllTutorials();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.TutorialUtil.checkStartEndTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Represents a Tutorial in TAble."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final int NUM_OF_WEEKS \u003d 13;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ModCode modCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private TutorialName tutorialName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private DayOfWeek weekday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private LocalTime beginTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ArrayList\u003cStudent\u003e enrolledStudents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ArrayList\u003cArrayList\u003cBoolean\u003e\u003e studentAttendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructor for Tutorial to initialize an empty Tutorial class with no enrolled students, and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * empty attendance sheet."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param modCode Module code of the tutorial"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param tutorialName Name of the tutorial"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param weekday Day of the week that the tutorial takes place"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param beginTime Time that the tutorial begins"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param endTime Time that the tutorial ends"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param location Location of the tutorial"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Tutorial(ModCode modCode, TutorialName tutorialName, DayOfWeek weekday,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    LocalTime beginTime, LocalTime endTime, Location location) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(modCode, tutorialName, weekday, beginTime, endTime, location);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekday \u003d weekday;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.beginTime \u003d beginTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.enrolledStudents \u003d new ArrayList\u003cStudent\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArrayList\u003cArrayList\u003cBoolean\u003e\u003e studentAttendance \u003d new ArrayList\u003cArrayList\u003cBoolean\u003e\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c NUM_OF_WEEKS; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cBoolean\u003e week \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            studentAttendance.add(week);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.studentAttendance \u003d studentAttendance;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructor for Tutorial to initialize a Tutorial class with enrolled students, and attendance sheet."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param modCode Module code of the tutorial"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param tutorialName Name of the tutorial"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param weekday Day of the week that the tutorial takes place"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param beginTime Time that the tutorial begins"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param endTime Time that the tutorial ends"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param location Location of the tutorial"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param enrolledStudents ArrayList of enrolled Students"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param studentAttendance Attendance sheet for enrolled Students"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial(ModCode modCode, TutorialName tutorialName, DayOfWeek weekday,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    LocalTime beginTime, LocalTime endTime, Location location, ArrayList\u003cStudent\u003e enrolledStudents,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    ArrayList\u003cArrayList\u003cBoolean\u003e\u003e studentAttendance) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(modCode, tutorialName, weekday, beginTime, endTime, location, enrolledStudents,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                studentAttendance);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekday \u003d weekday;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.beginTime \u003d beginTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.enrolledStudents \u003d enrolledStudents;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.studentAttendance \u003d studentAttendance;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a new {@code student} to the tutorial,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and adds a new row in the attendance sheet for the student for all the weeks, default as false (ie. absent)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setEnrolledStudents(Student student) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        enrolledStudents.add(student);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cBoolean\u003e week \u003d studentAttendance.get(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            week.add(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Removes given {@code student} from the tutorial"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * and removes the row in the attendance sheet corresponding to the student for all the weeks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void removeEnrolledStudent(Student student) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int targetIndex \u003d enrolledStudents.indexOf(student);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        enrolledStudents.remove(student);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c NUM_OF_WEEKS; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cBoolean\u003e week \u003d studentAttendance.get(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            week.remove(targetIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks the given {@code student} as present in the tutorial for the specified week."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markPresent(Student student, int week) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int targetIndex \u003d enrolledStudents.indexOf(student);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        studentAttendance.get(week).set(targetIndex, true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks the given {@code student} as absent in the tutorial for the specified week."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markAbsent(Student student, int week) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int targetIndex \u003d enrolledStudents.indexOf(student);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        studentAttendance.get(week).set(targetIndex, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModCode getModCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialName getTutorialName() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialName;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return weekday;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return beginTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getDayAndTime() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String day \u003d weekday.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return day + \" \" + beginTime.format(formatter) + \"-\" + endTime.format(formatter);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ArrayList\u003cStudent\u003e getEnrolledStudents() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return enrolledStudents;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Student getEnrolledStudentAt(int index) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this.enrolledStudents.get(index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ArrayList\u003cArrayList\u003cBoolean\u003e\u003e getAttendance() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return studentAttendance;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns the attendance of a tutorial for a specified week"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param week Specified week of attendance to be retrieved"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @return ArrayList of attendance represented by Boolean for the specified week"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getAttendanceWeek(int week) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return studentAttendance.get(week);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns attendance for whole semester of specified student"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getAttendanceofStudent(Student student) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        int index \u003d enrolledStudents.indexOf(student);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArrayList\u003cBoolean\u003e attendanceList \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (ArrayList\u003cBoolean\u003e week : studentAttendance) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            attendanceList.add(week.get(index));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns attendance for whole semester of student at given index in tutorial\u0027s enrolled students."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getAttendanceofStudent(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d enrolledStudents.size()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArrayList\u003cBoolean\u003e attendanceList \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (ArrayList\u003cBoolean\u003e week : studentAttendance) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            attendanceList.add(week.get(index));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if both tutorials have the same module and tutorial name fields."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!(other instanceof Tutorial)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // same tutorial as long as same modCode and tutorialName"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial otherTutorial \u003d (Tutorial) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return otherTutorial.getModCode().equals(getModCode())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 otherTutorial.getTutorialName().equals(getTutorialName());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if both tutorials timing clash, where the tutorials are set in periods"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * which overlap."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean timeClash(Object other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!(other instanceof Tutorial)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial otherTutorial \u003d (Tutorial) other;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!otherTutorial.getDay().equals(getDay())) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return (!checkStartEndTime(otherTutorial.getBeginTime(), getEndTime())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 !checkStartEndTime(getBeginTime(), otherTutorial.getBeginTime()))"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (!checkStartEndTime(otherTutorial.getEndTime(), getBeginTime())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 !checkStartEndTime(getEndTime(), otherTutorial.getEndTime()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if the other tutorial already contains the specified student."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean tutorialStudentClash(Student student) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        boolean hasDuplicateStudent \u003d false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (Student s : this.getEnrolledStudents()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (s.getMatricNumber().equals(student.getMatricNumber())) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                hasDuplicateStudent \u003d true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return hasDuplicateStudent;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        builder.append(\" Module Code: \")"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .append(getModCode())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Tutorial Name: \")"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getTutorialName())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Day: \")"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getDay())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Begin TIme: \")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getBeginTime())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .append(getLocation());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 17,
      "suwoons": 267
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/TutorialName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a Tutorial\u0027s name in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTutorialName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The first character of the tutorial name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public final String tutorialName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code TutorialName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param tutorialName A valid tutorial name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialName(String tutorialName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorialName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        checkArgument(isValidTutorialName(tutorialName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a given string is a valid tutorial name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static boolean isValidTutorialName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String getTutorialName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return tutorialName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof TutorialName // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 tutorialName.equals(((TutorialName) other).tutorialName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 4,
      "suwoons": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/TutorialTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Wraps all tutorial data at the Tutorial TAble level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialTAble implements ReadOnlyTutorial {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final UniqueTutorialList tutorials;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a TutorialTAble using the tutorials in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble(ReadOnlyTutorial toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Creates a TutorialTAble using the tutorials in the {@code consultList}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble(List\u003cTutorial\u003e tutorialList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorials.setTutorials(tutorialList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Replaces the contents of the tutorial list with {@code tutorials}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorials} must not contain duplicate tutorials."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setTutorials(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorials.setTutorials(tutorials);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Resets the existing data of this {@code TutorialTAble} with {@code newData}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void resetData(ReadOnlyTutorial newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        setTutorials(newData.getAllTutorials());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a tutorial with the same identity as {@code tutorial} exists in TAble."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.contains(tutorial);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if a specified tutorial contains the identical {@code student}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorial, student);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.containsTutorialStudent(tutorial, student);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a {@code student} to a tutorial to TAble."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must already exist in TAble."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.addTutorialStudent(tutorial, student);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a tutorial to TAble."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must not already exist in TAble."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.add(tutorial);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Removes {@code key} from this {@code TutorialTAble}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code key} must exist in the Tutorial TAble."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void removeTutorial(Tutorial key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Removes {@code student} from {@code tutorial} in {@code TutorialTAble}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorial} must exist in the Tutorial TAble, and {@code student} must exist in the tutorial."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void deleteTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.deleteTutorialStudent(tutorial, student);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks {@code studentToMark} in {@code tutorialToMark} as present in {@code week}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorialToMark} must exist in the Tutorial TAble, and {@code studentToMark} must exist in the tutorial."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markPresent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.markPresent(tutorialToMark, studentToMark, week);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks {@code studentToMark} in {@code tutorialToMark} as absent in {@code week}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorialToMark} must exist in the Tutorial TAble, and {@code studentToMark} must exist in the tutorial."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.markAbsent(tutorialToMark, studentToMark, week);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns {@code tutorial} from {@code TAble}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorial} must exist in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial getTutorial(int index) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.getTutorial(index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.asUnmodifiableObservableList().size() + \" consults\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getAllTutorials() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof TutorialTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 tutorials.equals(((TutorialTAble) other).tutorials));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.hashCode();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorials.hasSameTiming(tutorial);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/UniqueTutorialList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.exceptions.DuplicateTutorialException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.exceptions.TutorialNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A list of tutorials that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A tutorial is considered unique by comparing using {@code Tutorial#equals(Tutorial)}. As such, adding, updating and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * removal of tutorial uses Tutorial#equals(Tutorial) so as to ensure that the tutorial being added, updated or removed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * is unique in terms of identity in the UniqueTutorialList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * @see Tutorial#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class UniqueTutorialList implements Iterable\u003cTutorial\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final ObservableList\u003cTutorial\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final ObservableList\u003cTutorial\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if the list contains an equivalent tutorial as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean contains(Tutorial toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if the specified tutorial in the given argument contains a student that matches the student"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * in the argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean containsTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorial, student);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorial.tutorialStudentClash(student);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if the list contains another tutorial timing clashes with the argument."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.stream().anyMatch(tutorial::timeClash);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a tutorial to the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must not already exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void add(Tutorial toAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Adds a student to a tutorial to the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must already exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void addTutorialStudent(Tutorial toAddTo, Student student) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(toAddTo, student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        long matchCount \u003d internalList.stream().filter(toAddTo::equals).count();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (matchCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            internalList.stream().filter(toAddTo::equals).forEach(tut -\u003e tut.setEnrolledStudents(student));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else if (matchCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            // matchCount \u003e 1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Removes the equivalent tutorial from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void remove(Tutorial toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Removes the equivalent student from the given tutorial."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must exist in the list, and the student must exist in the tutorial."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void deleteTutorialStudent(Tutorial toDeleteFrom, Student student) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(toDeleteFrom, student);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        long matchCount \u003d internalList.stream().filter(toDeleteFrom::equals).count();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (matchCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            internalList.stream().filter(toDeleteFrom::equals).forEach(tut -\u003e tut.removeEnrolledStudent(student));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else if (matchCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            // matchCount \u003e 1"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks the equivalent student in the given tutorial as present."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must exist in the list, and the student must exist in the tutorial."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markPresent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorialToMark, studentToMark);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        long matchCount \u003d internalList.stream().filter(tutorialToMark::equals).count();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (matchCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            internalList.stream().filter(tutorialToMark::equals).forEach(tut -\u003e tut.markPresent(studentToMark, week));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else if (matchCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            // matchCount \u003e 1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Marks the equivalent student in the given tutorial as absent."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * The tutorial must exist in the list, and the student must exist in the tutorial."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorialToMark, studentToMark);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        long matchCount \u003d internalList.stream().filter(tutorialToMark::equals).count();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (matchCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            internalList.stream().filter(tutorialToMark::equals).forEach(tut -\u003e tut.markAbsent(studentToMark, week));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else if (matchCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            // matchCount \u003e 1"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setTutorials(UniqueTutorialList replacement) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Replaces the contents of this list with {@code tutorials}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code tutorials} must not contain duplicate tutorials."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void setTutorials(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireAllNonNull(tutorials);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!tutorialsAreUnique(tutorials)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        internalList.setAll(tutorials);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Iterator\u003cTutorial\u003e iterator() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                || (other instanceof UniqueTutorialList // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTutorialList) other).internalList));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns true if {@code tutorials} contains only unique tutorials."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private boolean tutorialsAreUnique(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c tutorials.size() - 1; i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tutorials.size(); j++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                if (tutorials.get(i).equals(tutorials.get(j))) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns the tutorial at the {@code index}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param index Index of the tutorial."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @return Tutorial at the index."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial getTutorial(int index) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getAllTutorials() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 221
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/exceptions/DuplicateTutorialException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Signals that the operation will result in duplicate Tutorials (Tutorials are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * if they have the same module and tutorial name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DuplicateTutorialException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DuplicateTutorialException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        super(\"Operation would result in duplicate tutorials\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/exceptions/DuplicateTutorialStudentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Signals that the operation will result in duplicate Students in the same Tutorial (Students are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * considered identical if they have the same matriculation number)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class DuplicateTutorialStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public DuplicateTutorialStudentException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        super(\"Operation would result in duplicate students in the same tutorial\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/exceptions/TutorialNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Signals that the operation is unable to find the specified tutorial."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/tutorial/exceptions/TutorialStudentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.model.event.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Signals that the operation is unable to find the specified student in the tutorial."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialStudentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/Mod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Represents a Module in TAble."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Mod {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ModCode modCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String modName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private List\u003cModLinkPair\u003e links;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ObservableList\u003cModLinkPair\u003e observableLinkList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod(ModCode modCode, String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(modCode, name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modName \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.note \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod(Mod mod, String note) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(mod, note);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d mod.getModCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modName \u003d mod.getModName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.note \u003d mod.getNote() + note;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.links \u003d new ArrayList\u003c\u003e(mod.getLinks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod(Mod mod, String linkName, ModLink link) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(mod, linkName, link);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d mod.getModCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modName \u003d mod.getModName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.note \u003d mod.getNote();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.links \u003d new ArrayList\u003c\u003e(mod.getLinks());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        links.add(new ModLinkPair(linkName, link));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModCode getModCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getModName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getNote() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns an immutable map of description and links, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cModLinkPair\u003e getLinks() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        observableLinkList \u003d FXCollections.observableList(links);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return observableLinkList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Removes all modLinks associated with this module"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod clearLinks() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new Mod(new Mod(this.modCode, this.modName), this.getNote());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if both modules have the same module code."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean isSameMod(Mod otherMod) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (otherMod \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return otherMod !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 otherMod.getModCode().equals(getModCode());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if both modules have the same module code, description and tags."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!(other instanceof seedu.address.model.mod.Mod)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        seedu.address.model.mod.Mod otherMod \u003d (seedu.address.model.mod.Mod) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return otherMod.getModCode().equals(getModCode())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 otherMod.getModName().equals(getModName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 otherMod.getLinks().equals(getLinks());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return Objects.hash(modCode, modName, links);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        builder.append(this.getModCode())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            .append(\" Name: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            .append(getModName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            .append(\" Notes: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            .append(getNote())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            .append(\" Links: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        getLinks().forEach(p -\u003e builder.append(p.getKey()).append(\"\u003d\").append(p.getValue()).append(\"; \"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ModCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Represents a Module\u0027s module code in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModCode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Modules should be of the format Department0000Subcode \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"1. The department should only contain either two or three capital letters\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"2. This is followed by 4 numbers, with the first not being zero.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            + \"The subcode cannot be more than 2 capital letters long. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The entire string must fit the specifications for it to be valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Z]{2,3}\\\\d{4}[A-Z]{0,2}$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public final String modCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructs a {@code ModCode}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param modCode A valid module code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModCode(String modCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        checkArgument(isValidModCode(modCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if a given string is a valid tutorial name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static boolean isValidModCode(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.ModCode // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 modCode.equals(((seedu.address.model.mod.ModCode) other).modCode)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCode.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 61,
      "hanchingyong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ModLink.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Represents a Module\u0027s link to a web resource in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModLink(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModLink {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Module links should follow a URL link (protocol optional)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The entire string must fit the specifications for it to be valid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \"^[a-zA-Z0-9][-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public final String modLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructs a {@code ModLink}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param modLink A valid module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModLink(String modLink) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modLink);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        checkArgument(isValidModLink(modLink), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modLink \u003d modLink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if a given string is a valid tutorial name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static boolean isValidModLink(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modLink;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.ModLink // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 modLink.equals(((seedu.address.model.mod.ModLink) other).modLink)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modLink.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ModLinkPair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Data structure of module link together with its descriptor."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModLinkPair {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ModLink modLink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModLinkPair(String name, ModLink modLink) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modLink \u003d modLink;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModLink getValue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modLink;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ModTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Wraps all module data at the ModTAble level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModTAble implements ReadOnlyMod {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static Mod emptyMod \u003d new Mod(new Mod(new ModCode(\"TA8135\"), \"TAble\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \"Use the viewModInfo command on a module to view it!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final UniqueModList mods;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods \u003d new UniqueModList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ObservableList\u003cMod\u003e viewedModSingletonList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        FXCollections.observableArrayList(Collections.singletonList(emptyMod));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModTAble() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates a ModTAble using the modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModTAble(ReadOnlyMod toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates a ModTAble using the tutorials in the {@code modList}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModTAble(List\u003cMod\u003e modList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.mods.setMods(modList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Replaces the contents of the module list with {@code mods}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code mods} must not contain duplicate modules."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMods(List\u003cMod\u003e mods) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.mods.setMods(mods);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Resets the existing data of this {@code ModTAble} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void resetData(ReadOnlyMod newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        setMods(newData.getAllMods());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //// Mod-level operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in TAble."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean hasMod(Mod module) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.contains(module);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Adds a module to TAble."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module must not already exist in TAble."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void addMod(Mod module) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods.add(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Removes {@code key} from this {@code ModTAble}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code key} must exist in the ModTAble."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void removeMod(Mod key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (viewedModSingletonList.contains(key)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            viewedModSingletonList.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            viewedModSingletonList.add(ModTAble.emptyMod);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns {@code mod} from {@code TAble}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code module} must exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod getMod(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.getMod(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns {@code mod} from {@code TAble}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code module} must exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMod(Mod target, Mod editedMod) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(editedMod);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods.setMod(target, editedMod);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (editedMod.isSameMod(viewedModSingletonList.get(0))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            viewedModSingletonList.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            viewedModSingletonList.add(editedMod);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Gets the currently viewed Mod, and finds the most recent state of the mod in TAble."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return Mod of the current view."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getViewedModSingletonList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!viewedModSingletonList.contains(emptyMod) \u0026\u0026 !mods.contains(viewedModSingletonList.get(0))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Mod temp \u003d viewedModSingletonList.get(0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            assert mods.getAllMods().stream().anyMatch(m -\u003e m.isSameMod(temp));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            viewedModSingletonList.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            viewedModSingletonList.add(mods.getAllMods()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .filter(m -\u003e m.isSameMod(temp))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .findAny().get());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return viewedModSingletonList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Changes viewed mod to {@code mod}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param mod Module to change current view to."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setViewedModSingletonList(Mod mod) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assert mods.contains(mod);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        viewedModSingletonList.clear();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        viewedModSingletonList.add(mod);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getAllMods() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.ModTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 mods.equals(((seedu.address.model.mod.ModTAble) other).mods));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return mods.hashCode();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/ReadOnlyMod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Unmodifiable view of all modules."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public interface ReadOnlyMod {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    List\u003cMod\u003e getAllMods();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/UniqueModList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.exceptions.DuplicateModException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.exceptions.ModNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * A module is considered unique by comparing using {@code Mod#equals(Object)}. As such, adding, updating and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * removal of module uses Mod#equals(Object) so as to ensure that the module being added, updated or removed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * is unique in terms of identity in the UniqueModList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * @see seedu.address.model.mod.Mod#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class UniqueModList implements Iterable\u003cMod\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ObservableList\u003cMod\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final ObservableList\u003cMod\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean contains(Mod toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMod);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void add(Mod toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new DuplicateModException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void remove(Mod toRemove) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedMod}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * The student identity of {@code editedMod} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMod(Mod target, Mod editedMod) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(target, editedMod);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        internalList.set(index, editedMod);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMods(UniqueModList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Replaces the contents of this list with {@code mods}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * {@code mods} must not contain duplicate modules."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setMods(List\u003cMod\u003e mods) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireAllNonNull(mods);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!modsAreUnique(mods)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new DuplicateModException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        internalList.setAll(mods);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Iterator\u003cMod\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                || (other instanceof seedu.address.model.mod.UniqueModList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.mod.UniqueModList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns true if {@code mods} contains only unique modules."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private boolean modsAreUnique(List\u003cMod\u003e mods) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        for (int i \u003d 0; i \u003c mods.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c mods.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                if (mods.get(i).equals(mods.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns the module at the {@code index}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param index Index of the module."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return Mod at the index."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod getMod(int index) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ObservableList\u003cMod\u003e getAllMods() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/exceptions/DuplicateModException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Signals that the operation will result in duplicate modules (Modules are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * if they have the same module code)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class DuplicateModException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public DuplicateModException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mod/exceptions/ModNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.model.mod.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Signals that the operation is unable to find the specified Module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Represents a Reminder\u0027s description in TAble."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9 ]+$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static final int CHAR_LIMIT \u003d 80;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            String.format(\"Description should only contain alphanumeric characters \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    + \"and spaces, and it should not be blank or exceeds %d characters\", CHAR_LIMIT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d CHAR_LIMIT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReadOnlyReminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Unmodifiable view of all Reminders."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public interface ReadOnlyReminder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns an unmodifiable view of the reminder list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * This list will not contain any duplicate reminders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    List\u003cReminder\u003e getAllReminders();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Represents a Reminder in TAble."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final boolean done;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder(Description description, LocalDate date, LocalTime time, boolean done) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireAllNonNull(description, date, time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns true if both reminders have the same identity."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return otherReminder.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 otherReminder.getDate().equals(getDate())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 otherReminder.getTime().equals(getTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return Objects.hash(description, date, time);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .append(\" Done: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .append(getDone() ? \"Yes\" : \"No\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReminderTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Wraps all reminder data at the Reminder TAble level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class ReminderTAble implements ReadOnlyReminder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final UniqueReminderList reminders;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminders \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderTAble() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Creates a ReminderTAble using the reminders in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderTAble(ReadOnlyReminder toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Creates a ReminderTAble using the reminders in the {@code reminderList}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderTAble(List\u003cReminder\u003e reminderList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.reminders.setReminders(reminderList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Replaces the contents of the reminder list with {@code reminders}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Resets the existing data of this {@code ReminderTAble} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void resetData(ReadOnlyReminder newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        setReminders(newData.getAllReminders());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    //// Reminder-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in TAble."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Adds a reminder to TAble."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The reminder must not already exist in TAble."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminders.add(reminder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Replaces the given reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code target} must exist in the ReminderTAble."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The reminder identity of {@code editedReminder} must not be the same"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * as another existing reminder in TAble."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(editedReminder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminders.setReminder(target, editedReminder);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Removes {@code key} from this {@code ReminderTAble}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code key} must exist in the ReminderTAble."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Marks {@code key} from this {@code ReminderTAble} as done."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code key} must exist in the ReminderTAble."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder markReminderAsDone(Reminder key) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminders.markAsDone(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns {@code reminder} from {@code ReminderTAble}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code reminder} must exist in ReminderTAble."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder getReminder(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminders.getReminder(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminders.asUnmodifiableObservableList().size() + \" reminders\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ObservableList\u003cReminder\u003e getAllReminders() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                || (other instanceof ReminderTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 reminders.equals(((ReminderTAble) other).reminders));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminders.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/UniqueReminderList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderIsDoneException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * A list of reminders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * A reminder is considered unique by comparing using {@code Reminder#equals(Reminder)}. As such, adding, updating and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * removal of reminders uses Reminder#equals(Reminder) for equality so as to ensure that the reminder being added,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * updated or removed is unique in terms of identity in the UniqueReminderList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * @see Reminder#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class UniqueReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns true if the list contains an equivalent reminder as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Adds a reminder to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The reminder must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Replaces the reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The identity of {@code editedReminder} must not be the same as another existing reminder in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!target.equals(editedReminder) \u0026\u0026 contains(editedReminder)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        internalList.set(index, editedReminder);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Removes the equivalent reminder from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The reminder must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Marks the equivalent reminder from the list as done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * The reminder must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder markAsDone(Reminder toMark) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(toMark);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        int index \u003d internalList.indexOf(toMark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (toMark.getDone()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new ReminderIsDoneException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder markedReminder \u003d new Reminder(toMark.getDescription(), toMark.getDate(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                toMark.getTime(), true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        internalList.set(index, markedReminder);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return markedReminder;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setReminders(UniqueReminderList replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Replaces the contents of this list with {@code reminders}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns the reminder at the {@code index}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param index Index of the reminder."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @return Reminder at the index."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder getReminder(int index) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                || (other instanceof UniqueReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueReminderList) other).internalList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if {@code reminders} contains only unique reminders."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                if (reminders.get(i).equals(reminders.get(j))) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ObservableList\u003cReminder\u003e getAllReminders() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 171,
      "shunde97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Signals that the operation will result in duplicate Reminders (Reminders are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * if they have the same description, date and time)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class DuplicateReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        super(\"Operation would result in duplicate reminders\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/ReminderIsDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Signals that the target reminder is already done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class ReminderIsDoneException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderIsDoneException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        super(\"Reminder is already done!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Signals that the operation is unable to find the specified reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Represents a Student\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "shunde97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/MatricNumber.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Represents a Student\u0027s matric number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class MatricNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            \"Matric number should be of the format A[Number][Letter], for example A1234567Y.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    + \" And adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    + \"1. Student ID must only be 9 characters long\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    + \"2. The numerical part must be 7 characters long and contain only numbers\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final String INITIAL_REGEX \u003d \"[A]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final String NUMBER_REGEX \u003d \"\\\\d{7}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final String LETTER_REGEX \u003d \"[A-Z]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d INITIAL_REGEX + NUMBER_REGEX + LETTER_REGEX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Constructs a {@code MatricNumber}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * @param matricNumber A valid matric number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public MatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        value \u003d matricNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if a given string is a valid matric number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static boolean isValidMatricNumber(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                || (other instanceof MatricNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 value.equals(((MatricNumber) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Represents a Student\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "shunde97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "shunde97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/ReadOnlyStudent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public interface ReadOnlyStudent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 2,
      "-": 11,
      "shunde97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Represents a Student\u0027s remark in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 28,
      "shunde97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Represents a Student in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final MatricNumber matricNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Student(Name name, MatricNumber matricNumber, Email email, Set\u003cTag\u003e tags, Remark remark) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireAllNonNull(name, matricNumber, email, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public MatricNumber getMatricNumber() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return matricNumber;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 otherStudent.getMatricNumber().equals(getMatricNumber())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 otherStudent.getMatricNumber().equals(getMatricNumber())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return Objects.hash(name, matricNumber, email, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(\" Matric Number: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(getMatricNumber())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(\" Tags: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(\" Remarks\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/StudentTAble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class StudentTAble implements ReadOnlyStudent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public StudentTAble() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates an StudentTAble using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public StudentTAble(ReadOnlyStudent toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Resets the existing data of this {@code StudentTAble} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void resetData(ReadOnlyStudent newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if a student with the same identity as {@code students} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Adds a student to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in TAble."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes {@code key} from this {@code StudentTAble}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns {@code student} from {@code TAble}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * {@code student} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Student getStudent(int index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return students.getStudent(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                || (other instanceof StudentTAble // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 students.equals(((StudentTAble) other).students));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 17,
      "-": 80,
      "shunde97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * or updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns the student at the {@code index}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * @param index Index of the student."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * @return Student at the index."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Student getStudent(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns all the student."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ObservableList\u003cStudent\u003e getAllStudents() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 146,
      "suwoons": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Contains utility methods for populating {@code StudentTAble} with sample data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            new Student(new Name(\"Alex Yeoh\"), new MatricNumber(\"A0187596R\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"friends\"), new Remark(\"Nice\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            new Student(new Name(\"Bernice Yu\"), new MatricNumber(\"A0125875G\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Remark(\"Pretty\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            new Student(new Name(\"Charlotte Oliveiro\"), new MatricNumber(\"A0123456A\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    new Email(\"charlotte@example.com\"), getTagSet(\"neighbours\"), new Remark(\"Italian\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            new Student(new Name(\"David Li\"), new MatricNumber(\"A0356982H\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"family\"), new Remark(\"Handsome\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            new Student(new Name(\"Irfan Ibrahim\"), new MatricNumber(\"A0167954H\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"classmates\"), new Remark(\"Kind\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            new Student(new Name(\"Roy Balakrishnan\"), new MatricNumber(\"A0136975F\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                getTagSet(\"colleagues\"), new Remark(\"Fake\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static ReadOnlyStudent getSampleAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble sampleAb \u003d new StudentTAble();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static ReadOnlyConsult getSampleConsults() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime.parse(\"2020-04-03 10:00\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime endDateTime \u003d startDateTime.plusHours(3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Location location \u003d new Location(\"SR1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Name studentName \u003d new Name(\"Alex Yeoh\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        MatricNumber matricNumber \u003d new MatricNumber(\"A0187596R\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult consult \u003d new Consult(startDateTime, endDateTime, location, studentName, matricNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArrayList\u003cConsult\u003e consultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultList.add(consult);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultTAble sampleConsultTAble \u003d new ConsultTAble(consultList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return sampleConsultTAble;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static ReadOnlyTutorial getSampleTutorials() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d new ModCode(\"CS2103\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialName tutorialName \u003d new TutorialName(\"T03\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek weekday \u003d DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime startTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime endTime \u003d LocalTime.now().plusHours(2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Location location \u003d new Location(\"SR1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Tutorial tutorial \u003d new Tutorial(modCode, tutorialName, weekday, startTime, endTime, location);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Student alex \u003d new Student(new Name(\"Alex Yeoh\"), new MatricNumber(\"A0187596R\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), getTagSet(\"friends\"), new Remark(\"Nice\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Student bernice \u003d new Student(new Name(\"Bernice Yu\"), new MatricNumber(\"A0125875G\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new Email(\"berniceyu@example.com\"), getTagSet(\"colleagues\", \"friends\"), new Remark(\"Pretty\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Student charlotte \u003d new Student(new Name(\"Charlotte Oliveiro\"), new MatricNumber(\"A0123456A\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new Email(\"charlotte@example.com\"), getTagSet(\"neighbours\"), new Remark(\"Italian\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorial.setEnrolledStudents(alex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorial.setEnrolledStudents(bernice);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorial.setEnrolledStudents(charlotte);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArrayList\u003cTutorial\u003e tutorialList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialList.add(tutorial);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialTAble sampleTutorialTAble \u003d new TutorialTAble(tutorialList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return sampleTutorialTAble;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static ReadOnlyMod getSampleMods() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modCode \u003d new ModCode(\"CS2103\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String modName \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Mod mod \u003d new Mod(modCode, modName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mod \u003d new Mod(mod, \"SE is fun!!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mod \u003d new Mod(mod, \"Module Website\", new ModLink(\"http://www.comp.nus.edu.sg/~cs2103\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mod \u003d new Mod(mod, \"Best Student Project\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            new ModLink(\"https://github.com/AY1920S2-CS2103-W15-3/main\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ArrayList\u003cMod\u003e modList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modList.add(mod);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModTAble sampleModTAble \u003d new ModTAble(modList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return sampleModTAble;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static ReadOnlyReminder getSampleReminders() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Description description \u003d new Description(\"Mark T02 midterms papers\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"15:00\", DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder reminder \u003d new Reminder(description, date, time, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ArrayList\u003cReminder\u003e reminderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderList.add(reminder);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ReminderTAble sampleReminderTAble \u003d new ReminderTAble(reminderList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return sampleReminderTAble;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 17,
      "nigelnnk": 21,
      "-": 28,
      "hanchingyong": 29,
      "suwoons": 29,
      "shunde97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a storage for {@link StudentTAble}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns StudentTAble data as a {@link ReadOnlyStudent}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Optional\u003cReadOnlyStudent\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Optional\u003cReadOnlyStudent\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Saves the given {@link ReadOnlyStudent} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void saveAddressBook(ReadOnlyStudent addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyStudent)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void saveAddressBook(ReadOnlyStudent addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "hanchingyong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ConsultStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.event.consult.Consult}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public interface ConsultStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Path getConsultsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns Consult data as a {@link ReadOnlyConsult}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Optional\u003cReadOnlyConsult\u003e readConsults() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see #getConsultsFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Optional\u003cReadOnlyConsult\u003e readConsults(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Saves the given {@link ReadOnlyConsult} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param consults cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void saveConsults(ReadOnlyConsult consults) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see #saveConsults(ReadOnlyConsult)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void saveConsults(ReadOnlyConsult consults, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 43,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAttendanceWeek.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Jackson-friendly version of an attendance week in {@link Tutorial}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "class JsonAdaptedAttendanceWeek {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final List\u003cBoolean\u003e attendanceWeek \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttendanceWeek} with the given tutorial attendance details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonAdaptedAttendanceWeek(@JsonProperty(\"isPresent\") List\u003cBoolean\u003e attendanceWeek) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (attendanceWeek !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            this.attendanceWeek.addAll(attendanceWeek);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts a given {@code ArrayList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonAdaptedAttendanceWeek(ArrayList\u003cBoolean\u003e source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.attendanceWeek.addAll(source);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts this Jackson-friendly adapted tutorial attendance week object into the model\u0027s"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code ArrayList\u003cBoolean\u003e} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ArrayList\u003cBoolean\u003e toModelType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final ArrayList\u003cBoolean\u003e modelAttendanceWeek \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!attendanceWeek.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelAttendanceWeek.addAll(attendanceWeek);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return modelAttendanceWeek;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedConsult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Jackson-friendly version of {@link Consult}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "class JsonAdaptedConsult {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Consult\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String INVALID_DATE_FORMAT \u003d \"Invalid date format!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String beginDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String endDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String eventLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String studentName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String matricNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructs a {@code JsonAdaptedConsult} with the given consult details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonAdaptedConsult(@JsonProperty(\"beginDateTime\") String beginDateTime,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                              @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                              @JsonProperty(\"eventLocation\") String eventLocation,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                              @JsonProperty(\"studentName\") String studentName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                              @JsonProperty(\"matricNumber\") String matricNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.beginDateTime \u003d beginDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.eventLocation \u003d eventLocation;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Converts a given {@code Consult} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonAdaptedConsult(Consult source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        beginDateTime \u003d source.getBeginDateTime().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        endDateTime \u003d source.getEndDateTime().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        eventLocation \u003d source.getLocation().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentName \u003d source.getStudentName().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        matricNumber \u003d source.getMatricNumber().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Converts this Jackson-friendly adapted consult object into the model\u0027s {@code Consult} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted consult."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (beginDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"BEGIN DATE TIME\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"END DATE TIME\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime modelBeginDateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDateTime modelEndDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            modelBeginDateTime \u003d LocalDateTime.parse(this.beginDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            modelEndDateTime \u003d LocalDateTime.parse(this.endDateTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (eventLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EVENT LOCATION\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final Location modelLocation \u003d new Location(eventLocation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        final Name modelName \u003d new Name(studentName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        final MatricNumber modelMatricNum \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Consult(modelBeginDateTime, modelEndDateTime, modelLocation, modelName, modelMatricNum);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 89,
      "suwoons": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Jackson-friendly version of {@link Mod}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class JsonAdaptedMod {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String modCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String modName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructs a {@code JsonAdaptedMod} with the given module details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public JsonAdaptedMod(@JsonProperty(\"modCode\") String modCode,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          @JsonProperty(\"modName\") String modName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modName \u003d modName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Converts a given {@code Mod} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public JsonAdaptedMod(Mod source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modCode \u003d source.getModCode().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modName \u003d source.getModName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Mod} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Mod toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (modCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"MOD_CODE\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (modName \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"MOD_NAME\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modelModCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String modelModName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modelModCode \u003d new ModCode(modCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modelModName \u003d modName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new Mod(modelModCode, modelModName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 62,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static final String INVALID_DATE_TIME_FORMAT \u003d \"Invalid date or time format!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final String done;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                              @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                              @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                              @JsonProperty(\"done\") String done) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public JsonAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        done \u003d source.getDone() ? \"Yes\" : \"No\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Converts this Jackson-friendly adapted reminder object into the model\u0027s {@code Reminder} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"DESCRIPTION\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"DATE\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"TIME\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (done \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"DONE\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalDate modelDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        LocalTime modelTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            modelDate \u003d LocalDate.parse(this.date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            modelTime \u003d LocalTime.parse(this.time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new IllegalValueException(INVALID_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        final boolean modelDone \u003d done.equals(\"Yes\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new Reminder(modelDescription, modelDate, modelTime, modelDone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 88,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final String matricNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"matricNumber\") String matricNumber,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        matricNumber \u003d source.getMatricNumber().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (matricNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                    MatricNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!MatricNumber.isValidMatricNumber(matricNumber)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            throw new IllegalValueException(MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final MatricNumber modelMatricNumber \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new Student(modelName, modelMatricNumber, modelEmail, modelTags, modelRemark);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "hanchingyong": 11,
      "shunde97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Jackson-friendly version of {@link Tutorial}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "class JsonAdaptedTutorial {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tutorial\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String INVALID_TIME_FORMAT \u003d \"Invalid time format!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String INVALID_DAY_FORMAT \u003d \"Invalid day format!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String tutorialName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String weekday;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String beginTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e enrolledStudents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final List\u003cJsonAdaptedAttendanceWeek\u003e studentAttendance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code JsonAdaptedTutorial} with the given tutorial details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public JsonAdaptedTutorial(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"tutorialName\") String tutorialName,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"weekday\") String weekday,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"beginTime\") String beginTime,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                              @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                               @JsonProperty(\"enrolledStudents\") List\u003cJsonAdaptedStudent\u003e enrolledStudents,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                               @JsonProperty(\"studentAttendance\") List\u003cJsonAdaptedAttendanceWeek\u003e studentAttendance) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekday \u003d weekday;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.beginTime \u003d beginTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (enrolledStudents !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            this.enrolledStudents.addAll(enrolledStudents);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (studentAttendance !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            this.studentAttendance.addAll(studentAttendance);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts a given {@code Tutorial} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonAdaptedTutorial(Tutorial source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        moduleCode \u003d source.getModCode().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialName \u003d source.getTutorialName().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        weekday \u003d Integer.toString(source.getDay().getValue());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        beginTime \u003d source.getBeginTime().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        location \u003d source.getLocation().eventLocation;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        enrolledStudents.addAll(source.getEnrolledStudents().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        studentAttendance.addAll(source.getAttendance().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .map(JsonAdaptedAttendanceWeek::new)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts this Jackson-friendly adapted tutorial object into the model\u0027s {@code Tutorial} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tutorial."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"MODULE_CODE\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (tutorialName \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"TUTORIAL_NAME\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCode modelModuleCode;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialName modelTutorialName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modelModuleCode \u003d new ModCode(moduleCode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        modelTutorialName \u003d new TutorialName(tutorialName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DayOfWeek modelWeekday;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelWeekday \u003d DayOfWeek.of(Integer.parseInt(weekday));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(INVALID_DAY_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (beginTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"BEGIN_TIME\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"END_TIME\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime modelBeginTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        LocalTime modelEndTime;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelBeginTime \u003d LocalTime.parse(this.beginTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelEndTime \u003d LocalTime.parse(this.endTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"PLACE\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final ArrayList\u003cStudent\u003e modelEnrolledStudents \u003d new ArrayList\u003cStudent\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final ArrayList\u003cArrayList\u003cBoolean\u003e\u003e modelStudentAttendance \u003d new ArrayList\u003cArrayList\u003cBoolean\u003e\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cBoolean\u003e week \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            modelStudentAttendance.add(week);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!enrolledStudents.isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            for (JsonAdaptedStudent jsonStudent : enrolledStudents) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                Student student \u003d jsonStudent.toModelType();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                modelEnrolledStudents.add(student);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!studentAttendance.isEmpty()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            for (int i \u003d 0; i \u003c studentAttendance.size(); i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                ArrayList\u003cBoolean\u003e week \u003d studentAttendance.get(i).toModelType();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                modelStudentAttendance.set(i, week);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new Tutorial(modelModuleCode, modelTutorialName, modelWeekday, modelBeginTime, modelEndTime,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                modelLocation, modelEnrolledStudents, modelStudentAttendance);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 10,
      "suwoons": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A class to access StudentTAble data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyStudent\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyStudent\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudent addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyStudent)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudent addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "hanchingyong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonConsultStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A class to access Consults data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class JsonConsultStorage implements ConsultStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonConsultStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonConsultStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Path getConsultsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return readConsults(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Similar to {@link #readConsults()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Optional\u003cJsonSerializableConsults\u003e jsonConsults \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                filePath, JsonSerializableConsults.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!jsonConsults.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return Optional.of(jsonConsults.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        saveConsults(consults, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Similar to {@link #saveConsults(ReadOnlyConsult)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(consults);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableConsults(consults), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 79,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * A class to access Mods data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class JsonModStorage implements ModStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.storage.JsonModStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public JsonModStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Path getModsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Optional\u003cReadOnlyMod\u003e readMods() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return readMods(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Similar to {@link #readMods()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Optional\u003cReadOnlyMod\u003e readMods(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Optional\u003cJsonSerializableMods\u003e jsonMods \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            filePath, JsonSerializableMods.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!jsonMods.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return Optional.of(jsonMods.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void saveMods(ReadOnlyMod mods) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        saveMods(mods, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Similar to {@link #saveMods(ReadOnlyMod)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void saveMods(ReadOnlyMod mods, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(mods);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMods(mods), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 78,
      "suwoons": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonReminderStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * A class to access Reminders data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class JsonReminderStorage implements ReminderStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonReminderStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public JsonReminderStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Optional\u003cReadOnlyReminder\u003e readReminders() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return readReminders(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Similar to {@link #readReminders()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Optional\u003cReadOnlyReminder\u003e readReminders(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Optional\u003cJsonSerializableReminders\u003e jsonReminders \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                filePath, JsonSerializableReminders.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!jsonReminders.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return Optional.of(jsonReminders.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void saveReminders(ReadOnlyReminder reminders) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        saveReminders(reminders, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Similar to {@link #saveReminders(ReadOnlyReminder)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void saveReminders(ReadOnlyReminder reminders, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(reminders);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReminders(reminders), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 79,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * An Immutable StudentTAble that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given studentss."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Converts a given {@code ReadOnlyStudent} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyStudent source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Converts this address book into the model\u0027s {@code StudentTAble} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public StudentTAble toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble studentTAble \u003d new StudentTAble();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (studentTAble.hasStudent(student)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            studentTAble.addStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return studentTAble;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "hanchingyong": 11,
      "shunde97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableConsults.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * An Immutable ConsultTAble that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "@JsonRootName(value \u003d \"consults\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "class JsonSerializableConsults {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULT \u003d \"Consults list contains duplicate consult(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final List\u003cJsonAdaptedConsult\u003e consults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code JsonSerializableConsults} with the given consults."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonSerializableConsults(@JsonProperty(\"consults\") List\u003cJsonAdaptedConsult\u003e consults) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consults.addAll(consults);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts a given {@code ReadOnlyConsult} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableConsults}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public JsonSerializableConsults(ReadOnlyConsult source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.addAll(source.getAllConsults().stream().map(JsonAdaptedConsult::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts this ConsultTAble into the model\u0027s {@code ConsultStorage} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultTAble toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultTAble consultTAble \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (JsonAdaptedConsult jsonAdaptedConsult : consults) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Consult consult \u003d jsonAdaptedConsult.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (consultTAble.hasConsult(consult)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CONSULT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consultTAble.addConsult(consult);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultTAble;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 52,
      "suwoons": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMods.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * An Immutable ModTAble that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "@JsonRootName(value \u003d \"mods\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class JsonSerializableMods {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final List\u003cJsonAdaptedMod\u003e mods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructs a {@code JsonSerializableMods} with the given modules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public JsonSerializableMods(@JsonProperty(\"mods\") List\u003cJsonAdaptedMod\u003e mods) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.mods.addAll(mods);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Converts a given {@code ReadOnlyMod} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMods}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public JsonSerializableMods(ReadOnlyMod source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        mods.addAll(source.getAllMods().stream().map(JsonAdaptedMod::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Converts this ModTAble into the model\u0027s {@code ModStorage} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModTAble toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModTAble modTAble \u003d new ModTAble();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        for (JsonAdaptedMod jsonAdaptedMod : mods) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Mod mod \u003d jsonAdaptedMod.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            if (modTAble.hasMod(mod)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            modTAble.addMod(mod);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modTAble;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 60,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableReminders.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * An Immutable ReminderTAble that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "@JsonRootName(value \u003d \"reminders\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "class JsonSerializableReminders {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Constructs a {@code JsonSerializableReminders} with the given reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public JsonSerializableReminders(@JsonProperty(\"reminders\") List\u003cJsonAdaptedReminder\u003e reminders) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.reminders.addAll(reminders);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Converts a given {@code ReadOnlyReminder} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableReminders}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public JsonSerializableReminders(ReadOnlyReminder source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminders.addAll(source.getAllReminders().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Converts this ReminderTAble into the model\u0027s {@code ReminderStorage} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderTAble toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ReminderTAble reminderTAble \u003d new ReminderTAble();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder : reminders) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            if (reminderTAble.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            reminderTAble.addReminder(reminder);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminderTAble;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 59,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTutorials.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * An Immutable TutorialTAble that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "@JsonRootName(value \u003d \"tutorials\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class JsonSerializableTutorials {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"Tutorials list contains duplicate tutorial(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final List\u003cJsonAdaptedTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Constructs a {@code JsonSerializableTutorials} with the given tutorials."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonSerializableTutorials(@JsonProperty(\"tutorials\") List\u003cJsonAdaptedTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorials.addAll(tutorials);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts a given {@code ReadOnlyTutorial} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTutorials}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonSerializableTutorials(ReadOnlyTutorial source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorials.addAll(source.getAllTutorials().stream().map(JsonAdaptedTutorial::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Converts this TutorialTAble into the model\u0027s {@code TutorialStorage} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialTAble toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialTAble tutorialTAble \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (JsonAdaptedTutorial jsonAdaptedTutorial : tutorials) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            Tutorial tutorial \u003d jsonAdaptedTutorial.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (tutorialTAble.hasTutorial(tutorial)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            tutorialTAble.addTutorial(tutorial);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialTAble;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTutorialStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A class to access Tutorials data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class JsonTutorialStorage implements TutorialStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTutorialStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public JsonTutorialStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Path getTutorialsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return readTutorials(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Similar to {@link #readTutorials()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Optional\u003cJsonSerializableTutorials\u003e jsonTutorials \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                filePath, JsonSerializableTutorials.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!jsonTutorials.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return Optional.of(jsonTutorials.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        saveTutorials(tutorials, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Similar to {@link #saveTutorials(ReadOnlyTutorial)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(tutorials);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTutorials(tutorials), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Represents a storage for {@link seedu.address.model.mod.Mod}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public interface ModStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    Path getModsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns Mod data as a {@link ReadOnlyMod}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    Optional\u003cReadOnlyMod\u003e readMods() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @see #getModsFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    Optional\u003cReadOnlyMod\u003e readMods(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Saves the given {@link ReadOnlyMod} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param mods cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void saveMods(ReadOnlyMod mods) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @see #saveMods(ReadOnlyMod)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void saveMods(ReadOnlyMod mods, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 47,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ReminderStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Represents a storage for {@link seedu.address.model.reminder.Reminder}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public interface ReminderStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Returns Reminder data as a {@link ReadOnlyReminder}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    Optional\u003cReadOnlyReminder\u003e readReminders() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @see #getRemindersFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    Optional\u003cReadOnlyReminder\u003e readReminders(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Saves the given {@link ReadOnlyReminder} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @param reminders cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    void saveReminders(ReadOnlyReminder reminders) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @see #saveReminders(ReadOnlyReminder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    void saveReminders(ReadOnlyReminder reminders, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 43,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ConsultStorage,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    TutorialStorage, ModStorage, ReminderStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    Optional\u003cReadOnlyStudent\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void saveAddressBook(ReadOnlyStudent addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 2,
      "-": 28,
      "hanchingyong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Manages storage of StudentTAble data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ConsultStorage consultStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private TutorialStorage tutorialStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ModStorage modStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private ReminderStorage reminderStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                          ConsultStorage consultStorage, TutorialStorage tutorialStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                          ModStorage modStorage, ReminderStorage reminderStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consultStorage \u003d consultStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialStorage \u003d tutorialStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modStorage \u003d modStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.reminderStorage \u003d reminderStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentTAble methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyStudent\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyStudent\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudent addressBook) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveAddressBook(ReadOnlyStudent addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Consult methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Path getConsultsFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultStorage.getConsultsFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return readConsults(consultStorage.getConsultsFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Optional\u003cReadOnlyConsult\u003e readConsults(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consultStorage.readConsults(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        saveConsults(consults, consultStorage.getConsultsFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveConsults(ReadOnlyConsult consults, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultStorage.saveConsults(consults, filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tutorial methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Path getTutorialsFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialStorage.getTutorialsFilePath();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return readTutorials(tutorialStorage.getTutorialsFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Optional\u003cReadOnlyTutorial\u003e readTutorials(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return tutorialStorage.readTutorials(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        saveTutorials(tutorials, tutorialStorage.getTutorialsFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void saveTutorials(ReadOnlyTutorial tutorials, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialStorage.saveTutorials(tutorials, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Path getModsFilePath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modStorage.getModsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Optional\u003cReadOnlyMod\u003e readMods() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return readMods(modStorage.getModsFilePath());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Optional\u003cReadOnlyMod\u003e readMods(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modStorage.readMods(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void saveMods(ReadOnlyMod mods) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        saveMods(mods, modStorage.getModsFilePath());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void saveMods(ReadOnlyMod mods, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modStorage.saveMods(mods, filePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminder methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminderStorage.getRemindersFilePath();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Optional\u003cReadOnlyReminder\u003e readReminders() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return readReminders(reminderStorage.getRemindersFilePath());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Optional\u003cReadOnlyReminder\u003e readReminders(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return reminderStorage.readReminders(filePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void saveReminders(ReadOnlyReminder reminders) throws IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        saveReminders(reminders, reminderStorage.getRemindersFilePath());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void saveReminders(ReadOnlyReminder reminders, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderStorage.saveReminders(reminders, filePath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 34,
      "nigelnnk": 32,
      "-": 68,
      "hanchingyong": 39,
      "suwoons": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TutorialStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Represents a storage for {@link seedu.address.model.event.tutorial.Tutorial}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public interface TutorialStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Path getTutorialsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Returns Tutorial data as a {@link ReadOnlyTutorial}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Optional\u003cReadOnlyTutorial\u003e readTutorials() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @see #getTutorialsFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    Optional\u003cReadOnlyTutorial\u003e readTutorials(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Saves the given {@link ReadOnlyTutorial} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @param tutorials cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void saveTutorials(ReadOnlyTutorial tutorials) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @see #saveTutorials(ReadOnlyTutorial)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    void saveTutorials(ReadOnlyTutorial tutorials, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103-w15-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.consult.ConsultListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.ui.mod.ModInfoPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.mod.ModListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.reminder.ReminderListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.ui.tutorial.AttendanceListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.tutorial.TutorialListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private CalendarWindow calendarWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private TutorialListPanel tutorialListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private AttendanceListPanel attendanceListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ConsultListPanel consultListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ModListPanel modListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ModInfoPanel modInfoPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private StackPane tutorialListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private StackPane attendanceListPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private StackPane consultListPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private StackPane modListPanelPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private StackPane modInfoPanelPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private SplitPane splitPanePlaceholder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private TabPane firstTabPanePlaceholder;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private TabPane secondTabPanePlaceholder;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        calendarWindow \u003d new CalendarWindow(logic.getFilteredConsultList(), logic.getFilteredTutorialList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorialListPanel \u003d new TutorialListPanel(logic.getFilteredTutorialList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorialListPanelPlaceholder.getChildren().add(tutorialListPanel.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultListPanel \u003d new ConsultListPanel(logic.getFilteredConsultList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultListPanelPlaceholder.getChildren().add(consultListPanel.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modListPanel \u003d new ModListPanel(logic.getFilteredModList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modListPanelPlaceholder.getChildren().add(modListPanel.getRoot());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modInfoPanel \u003d new ModInfoPanel(logic.getViewedMod());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modInfoPanelPlaceholder.getChildren().add(modInfoPanel.getRoot());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getFilteredReminderList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    void setSplitPane() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        splitPanePlaceholder.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        primaryStage.setMinHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        primaryStage.setMinWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Selects the corresponding command\u0027s tab based on {@code commandText}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void handleList(String commandText) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (commandText.contains(\" \")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            commandText \u003d commandText.substring(0, commandText.indexOf(\" \"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        switch(commandText) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        case \"listStudent\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            firstTabPanePlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        case \"listTutorial\":"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            firstTabPanePlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        case \"listMod\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            firstTabPanePlaceholder.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        case \"listConsult\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            secondTabPanePlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        case \"viewModInfo\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            secondTabPanePlaceholder.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Opens the Calendar window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void handleCalendar() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!calendarWindow.isShowing()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarWindow.show();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarWindow.focus();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Loads AttendanceListPanel in the GUI with the appropriate data."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private void handleAttendance(Tutorial tutorialToShow, int weekZeroBased) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        attendanceListPanel \u003d new AttendanceListPanel(tutorialToShow, weekZeroBased);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        attendanceListPanelPlaceholder.getChildren().add(attendanceListPanel.getRoot());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        secondTabPanePlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (commandResult.isShowCalendar()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                handleCalendar();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            if (commandResult.isShowList()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                handleList(commandText);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (commandResult.isShowAttendance()) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                handleAttendance(commandResult.getTutorialToShow(), commandResult.getWeekZeroBased());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 50,
      "nigelnnk": 22,
      "-": 189,
      "hanchingyong": 37,
      "suwoons": 21,
      "shunde97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.student.StudentCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 1,
      "shunde97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            mainWindow.setSplitPane();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 1,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/CalendarDay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Represents a calendar date cell in the calendar window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class CalendarDay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String FXML \u003d \"CalendarDay.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ObservableList\u003cConsult\u003e consults;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ObservableList\u003cTutorial\u003e tutorials;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private StackPane calendarDayStackPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates a CalendarDay."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CalendarDay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorials \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public StackPane getCalendarDayStackPane() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Return StackPane\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return calendarDayStackPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Sets the date of this {@code CalendarDay} to the specified date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the date of this {@code CalendarDay}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return The date of this {@code CalendarDay}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds the consult that is happening on this day to the {@Code CalendarDay}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.add(consult);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Remove all consults on this {@Code CalendarDay}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void removeConsults() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consults.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Updates the number of consults on this CalendarDay."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void updateNumConsults() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        int noConsults \u003d consults.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (noConsults \u003e 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Text consultsCount;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (noConsults \u003d\u003d 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                consultsCount \u003d new Text(\"1 consult\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                consultsCount \u003d new Text(noConsults + \" consults\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            StackPane.setAlignment(consultsCount, Pos.BOTTOM_CENTER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDayStackPane.getChildren().add(consultsCount);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds the tutorial that is happening on this day to the {@Code CalendarDay}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorials.add(tutorial);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Removes all tutorials on this {@Code CalendarDay}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void removeTutorials() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorials.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Updates the number of tutorials on this CalendarDay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void updateNumTutorials() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        int noTutorials \u003d tutorials.size();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (noTutorials \u003e 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Text tutorialsCount;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (noTutorials \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                tutorialsCount \u003d new Text(\"1 tutorial\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                tutorialsCount \u003d new Text(noTutorials + \" tutorials\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            StackPane.setAlignment(tutorialsCount, Pos.CENTER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDayStackPane.getChildren().add(tutorialsCount);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/CalendarWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.ConsultUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.util.TutorialUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Controller for a calendar page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Code below adapted from https://github.com/SirGoose3432/javafx-calendar/blob/master/src/FullCalendarView.java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final int MAX_WEEK_OF_MONTH \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final int WEEKDAYS \u003d 7;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private GridPane dateDisplayGrid;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label calendarTitle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private List\u003cCalendarDay\u003e calendarDays;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private List\u003cConsult\u003e consults;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private List\u003cTutorial\u003e tutorials;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructs a calendar window with the current month as reference."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CalendarWindow(Stage root, ObservableList\u003cConsult\u003e consults, ObservableList\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consults \u003d consults;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.tutorials \u003d tutorials;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        calendarDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        currentYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        createUi();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        fillDays();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        fillTitle();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public CalendarWindow(ObservableList\u003cConsult\u003e consults, ObservableList\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this(new Stage(), consults, tutorials);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates the UI elements for the calendar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private void createUi() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_WEEK_OF_MONTH; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            for (int j \u003d 0; j \u003c WEEKDAYS; j++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                CalendarDay calendarDay \u003d new CalendarDay();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                calendarDays.add(calendarDay);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                StackPane calendarDayStackPane \u003d calendarDay.getCalendarDayStackPane();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                dateDisplayGrid.add(calendarDayStackPane, j, i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Fill the calendar based on the created CalendarDays."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private void fillDays() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // Get the date we want to start with on the calendar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(currentYearMonth.getYear(), currentYearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // Dial back the day until it is SUNDAY (unless the month starts on a sunday)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (CalendarDay calendarDay : calendarDays) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            StackPane calendarDayStackPane \u003d calendarDay.getCalendarDayStackPane();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDayStackPane.getChildren().clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Text dateText \u003d new Text(String.format(\"%02d\", calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            StackPane.setAlignment(dateText, Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDayStackPane.getChildren().add(dateText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDay.setDate(calendarDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            addAllConsults(calendarDay, calendarDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            addAllTutorials(calendarDay, calendarDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDay.updateNumConsults();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDay.updateNumTutorials();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Fill the calendar\u0027s title with month and year."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private void fillTitle() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        calendarTitle.setText(currentYearMonth.getMonth().toString() + \" \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            + currentYearMonth.getYear());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.info(currentYearMonth.getMonth().toString() + \" \" + currentYearMonth.getYear());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns true if the Calendar window is currently being shown."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Hides the Calendar window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Shows the Calendar window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Focuses on the Calendar window."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Moves the calendar month forward by 1 and repopulates the calendar with the new CalendarDays."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void nextMonth() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        fillDays();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        fillTitle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * JavaFX function to call the next month."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void nextMonthFx() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        nextMonth();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Moves the calendar month backwards by 1 and repopulates the calendar with the new CalendarDays."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void prevMonth() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        fillDays();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        fillTitle();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * JavaFX function to call the next month."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void prevMonthFx() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        prevMonth();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds all the consultations on the {@Code calendarDate} to the {@Code calendarDay}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addAllConsults(CalendarDay calendarDay, LocalDate calendarDate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Remove all consults to restart the count."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        calendarDay.removeConsults();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (Consult consult : consults) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (ConsultUtil.checkSameDate(consult.getBeginDateTime(), calendarDate)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                calendarDay.addConsult(consult);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                logger.fine(\"Same date detected.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds all the tutorials on the {@Code calendarDate} to the {@Code calendarDay}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addAllTutorials(CalendarDay calendarDay, LocalDate calendarDate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Remove all tutorials to restart the count."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        calendarDay.removeTutorials();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (TutorialUtil.checkDayOfWeek(tutorial.getDay(), calendarDate)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                calendarDay.addTutorial(tutorial);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                logger.fine(\"Same date detected.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 206
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/consult/ConsultCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * An UI component that displays information of a {@code Consult}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String FXML \u003d \"ConsultListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on StudentTAble level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public final Consult consult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label studentName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label beginDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label eventLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultCard(Consult consult) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.consult \u003d consult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm dd-MMM-YY\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        beginDateTime.setText(\"Start: \" + consult.getBeginDateTime().format(formatter));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        endDateTime.setText(\"End: \" + consult.getEndDateTime().format(formatter));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        eventLocation.setText(\"Location: \" + consult.getLocation().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentName.setText(consult.getStudentName().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(consult.getLocation().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        logger.fine(consult.getStudentName().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof ConsultCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultCard card \u003d (ConsultCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return consult.equals(card.consult);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/consult/ConsultListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.consult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Panel containing the list of consults."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String FXML \u003d \"ConsultListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ConsultListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ListView\u003cConsult\u003e consultListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultListPanel(ObservableList\u003cConsult\u003e consultList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultListView.setItems(consultList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        consultListView.setCellFactory(listView -\u003e new ConsultListPanel.ConsultListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Consult} using a {@code ConsultCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    class ConsultListViewCell extends ListCell\u003cConsult\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        protected void updateItem(Consult consult, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            super.updateItem(consult, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (empty || consult \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                setGraphic(new ConsultCard(consult).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/mod/ModCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * An UI component that displays information of a {@code Mod}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static final String FXML \u003d \"ModListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public final Mod mod;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label modName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label modCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    //private FlowPane tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModCard(Mod mod, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.mod \u003d mod;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modCode.setText(mod.getModCode().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modName.setText(mod.getModName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!(other instanceof ModCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModCard card \u003d (ModCard) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u0026\u0026 mod.equals(card.mod);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 55,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/mod/ModInfoCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.ui.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * An UI component that displays information of a {@code Mod}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModInfoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static final String FXML \u003d \"ModInfoCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public final Mod mod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ModLinkPanel modLinkPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label modNoteLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label modCodeLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private StackPane modLinkPanelPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModInfoCard(Mod viewedMod) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.mod \u003d viewedMod;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modCodeLabel.setText(viewedMod.getModCode().toString() + \" \" + viewedMod.getModName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modNoteLabel.setText(viewedMod.getNote());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (viewedMod.getLinks().size() \u003e 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            modLinkPanel \u003d new ModLinkPanel(viewedMod.getLinks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            modLinkPanelPlaceholder.getChildren().add(modLinkPanel.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!(other instanceof ModCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModInfoCard card \u003d (ModInfoCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return modCodeLabel.getText().equals(card.modCodeLabel.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 modNoteLabel.getText().equals(card.modNoteLabel.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 mod.equals(card.mod);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/mod/ModInfoPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.ui.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Panel containing the list of consults."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModInfoPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static final String FXML \u003d \"ModInfoPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModInfoPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ListView\u003cMod\u003e modInfoListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModInfoPanel(ObservableList\u003cMod\u003e viewedModSingletonList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modInfoListView.setItems(viewedModSingletonList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modInfoListView.setCellFactory(listView -\u003e new ModInfoViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Custom {@code ListCell} that displays the info of a {@code Pair\u003cString, ModLink\u003e} using a {@code ModLinkCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    class ModInfoViewCell extends ListCell\u003cMod\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        protected void updateItem(Mod viewedMod, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            super.updateItem(viewedMod, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            if (empty || viewedMod \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setGraphic(new ModInfoCard(viewedMod).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/mod/ModLinkCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.ui.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLinkPair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * An UI component that displays information of a {@code Pair\u003cString, ModLink\u003e}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModLinkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static final String FXML \u003d \"ModLinkCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public final ModLinkPair modLinkPair;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label modLinkName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label modLink;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModLinkCard(ModLinkPair modLinkPair, int displayedIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.modLinkPair \u003d modLinkPair;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modLinkName.setText(modLinkPair.getKey());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modLink.setText(modLinkPair.getValue().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!(other instanceof ModLinkCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModLinkCard card \u003d (ModLinkCard) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u0026\u0026 modLinkPair.equals(card.modLinkPair);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/mod/ModLinkPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "package seedu.address.ui.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModLinkPair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Panel containing the list of consults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModLinkPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static final String FXML \u003d \"ModLinkPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModLinkPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ListView\u003cModLinkPair\u003e modLinkListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModLinkPanel(ObservableList\u003cModLinkPair\u003e modLinkList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        requireNonNull(modLinkList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modLinkListView.setItems(modLinkList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modLinkListView.setCellFactory(modLinkListView -\u003e new ModLinkViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Custom {@code ListCell} that displays the info of a {@code Pair\u003cString, ModLink\u003e} using a {@code ModLinkCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    class ModLinkViewCell extends ListCell\u003cModLinkPair\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        protected void updateItem(ModLinkPair modLinkPair, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            super.updateItem(modLinkPair, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            if (empty || modLinkPair \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setGraphic(new ModLinkCard(modLinkPair, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/mod/ModListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.mod;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Panel containing the list of Mods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class ModListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private static final String FXML \u003d \"ModListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ListView\u003cMod\u003e modListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public ModListPanel(ObservableList\u003cMod\u003e modList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modListView.setItems(modList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        modListView.setCellFactory(listView -\u003e new ModListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Mod} using a {@code ModCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    class ModListViewCell extends ListCell\u003cMod\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        protected void updateItem(Mod mod, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            super.updateItem(mod, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            if (empty || mod \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                setGraphic(new ModCard(mod, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 45,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/reminder/ReminderCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * An UI component that displays information of a {@code Reminder}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on StudentTAble level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public final Reminder reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderCard(Reminder reminder, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        description.setText(reminder.getDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        date.setText(reminder.getDate().format(DateTimeFormatter.ofPattern(\"dd-MMM-YY\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        time.setText(reminder.getTime().format(DateTimeFormatter.ofPattern(\"HH:mm\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        setDone(reminder.getDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        id.setStyle(\"-fx-text-fill: #353535;\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        description.setStyle(\"-fx-text-fill: #353535;\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        date.setStyle(\"-fx-text-fill: #353535;\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        time.setStyle(\"-fx-text-fill: #353535;\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #9fffb1;\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #FFA5AA;\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u0026\u0026 reminder.equals(card.reminder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 77,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/reminder/ReminderListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * Panel containing the list of reminders."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private ListView\u003cReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cReminder\u003e reminderList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderListView.setItems(reminderList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Reminder} using a {@code ReminderCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cReminder\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        protected void updateItem(Reminder reminder, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            super.updateItem(reminder, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            if (empty || reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 45,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/student/StudentCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on StudentTAble level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private Label matricNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        matricNumber.setText(student.getMatricNumber().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        remark.setText(student.getRemark().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 6,
      "-": 54,
      "shunde97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tutorial/AttendanceCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.ui.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A UI component that displays information of a {@code Tutorial}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AttendanceCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String FXML \u003d \"AttendanceListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on StudentTAble level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ArrayList\u003cBoolean\u003e attendanceList \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Label attendanceName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AttendanceCard(Student student, int displayedIndex, ArrayList\u003cBoolean\u003e attendanceList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.attendanceList \u003d attendanceList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        attendanceName.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getAttendanceList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        if (!(other instanceof AttendanceCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AttendanceCard card \u003d (AttendanceCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 student.equals(card.student)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u0026\u0026 attendanceList.equals(card.attendanceList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tutorial/AttendanceListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.ui.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * Panel containing the list of attendance for a particular week and Tutorial."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AttendanceListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String FXML \u003d \"AttendanceListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String PRESENT_CELL_BACKGROUND \u003d \"#2e8140\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private static final String ABSENT_CELL_BACKGROUND \u003d \"#812e2e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AttendanceListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ArrayList\u003cBoolean\u003e attendanceList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Label attendanceHeader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Tutorial tutorial;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private String tutorialCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private String tutorialName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private int weekOneBased;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public AttendanceListPanel(Tutorial tutorialToShow, int weekZeroBased) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArrayList\u003cBoolean\u003e attendanceToShow \u003d tutorialToShow.getAttendanceWeek(weekZeroBased);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ArrayList\u003cStudent\u003e studentsToShow \u003d tutorialToShow.getEnrolledStudents();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ObservableList\u003cStudent\u003e studentsList \u003d FXCollections.observableArrayList(studentsToShow);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorial \u003d tutorialToShow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.attendanceList \u003d attendanceToShow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialCode \u003d tutorialToShow.getModCode().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d tutorialToShow.getTutorialName().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.weekOneBased \u003d weekZeroBased + 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.attendanceHeader.setText(tutorialCode + \" \" + tutorialName + \": Week \" + weekOneBased);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        studentListView.setItems(studentsList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new AttendanceListPanel.AttendanceListViewCell());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a student\u0027s attendance in a {@code Tutorial} using an"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * {@code AttendanceCard}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    class AttendanceListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cBoolean\u003e attendanceToShow \u003d tutorial.getAttendanceWeek(weekOneBased - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cStudent\u003e studentsToShow \u003d tutorial.getEnrolledStudents();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                int index \u003d studentsToShow.indexOf(student);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                boolean isPresent \u003d attendanceToShow.get(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                if (isPresent) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    setStyle(\"-fx-background-color:  \" + PRESENT_CELL_BACKGROUND + \";\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    setStyle(\"-fx-background-color: \" + ABSENT_CELL_BACKGROUND + \";\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                setGraphic(new AttendanceCard(student, getIndex() + 1, attendanceList).getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tutorial/TutorialCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * An UI component that displays information of a {@code Tutorial}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class TutorialCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String FXML \u003d \"TutorialListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on StudentTAble level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public final Tutorial tutorial;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label modCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label tutlocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label tutTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    //private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public TutorialCard(Tutorial tutorial, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.tutorial \u003d tutorial;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        name.setText(tutorial.getTutorialName().getTutorialName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        modCode.setText(tutorial.getModCode().getModCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutlocation.setText(tutorial.getLocation().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        tutTime.setText(tutorial.getDayAndTime());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //startTime.setText(tutorial.getStartTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //endTime.setText(tutorial.getEndTime());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (!(other instanceof TutorialCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        TutorialCard card \u003d (TutorialCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u0026\u0026 tutorial.equals(card.tutorial);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 3,
      "hanchingyong": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tutorial/TutorialListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.ui.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Panel containing the list of tutorials."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class TutorialListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String FXML \u003d \"TutorialListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TutorialListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ListView\u003cTutorial\u003e tutorialListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public TutorialListPanel(ObservableList\u003cTutorial\u003e tutorialList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorialListView.setItems(tutorialList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tutorialListView.setCellFactory(listView -\u003e new TutorialListPanel.TutorialListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Tutorial} using a {@code TutorialCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    class TutorialListViewCell extends ListCell\u003cTutorial\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        protected void updateItem(Tutorial tutorial, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            super.updateItem(tutorial, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (empty || tutorial \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                setGraphic(new TutorialCard(tutorial, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 46
    }
  },
  {
    "path": "src/main/resources/view/AttendanceListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                \u003cLabel fx:id\u003d\"attendanceName\" text\u003d\"\\$attendanceName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "suwoons": 30
    }
  },
  {
    "path": "src/main/resources/view/AttendanceListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    \u003cLabel fx:id\u003d\"attendanceHeader\" text\u003d\"\\$attendanceHeader\" styleClass\u003d\"list-cell-header\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "suwoons": 9
    }
  },
  {
    "path": "src/main/resources/view/CalendarDay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarDayStackPane\" prefHeight\u003d\"60\" prefWidth\u003d\"200\" style\u003d\"-fx-background-color: #F0F8FF; -fx-border-color: black; -fx-border-width: 0.75 0.75 0.75 0.75 ;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 6
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Calendar\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cImage url\u003d\"@/images/calendar.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003cVBox spacing\u003d\"15\" style\u003d\"-fx-background-color: #383838;\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u003cHBox alignment\u003d\"BASELINE_CENTER\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003cButton id\u003d\"btn-prev\" onAction\u003d\"#prevMonthFx\" style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                           \u003cImage url\u003d\"@../images/leftarrow.png\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"calendarTitle\" style\u003d\"-fx-text-fill: white;\" text\u003d\"\\$calenderTitle\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003cButton id\u003d\"btn-next\" onAction\u003d\"#nextMonthFx\" style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                           \u003cImage url\u003d\"@../images/rightarrow.png\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003cGridPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            \u003cText fill\u003d\"white\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"Sunday\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            \u003cText fill\u003d\"white\" style\u003d\"-fx-font-weight: bold;\"  text\u003d\"Monday\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            \u003cText fill\u003d\"white\" style\u003d\"-fx-font-weight: bold;\"  text\u003d\"Tuesday\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            \u003cText fill\u003d\"white\" style\u003d\"-fx-font-weight: bold;\"  text\u003d\"Wednesday\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            \u003cText fill\u003d\"white\" style\u003d\"-fx-font-weight: bold;\"  text\u003d\"Thursday\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            \u003cText fill\u003d\"white\" style\u003d\"-fx-font-weight: bold;\"  text\u003d\"Friday\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            \u003cText fill\u003d\"white\" style\u003d\"-fx-font-weight: bold;\"  text\u003d\"Saturday\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003cGridPane fx:id\u003d\"dateDisplayGrid\" prefHeight\u003d\"400\" prefWidth\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 82
    }
  },
  {
    "path": "src/main/resources/view/ConsultListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentName\" text\u003d\"\\$studentName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"beginDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$beginDateTime\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDateTime\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventLocation\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 33
    }
  },
  {
    "path": "src/main/resources/view/ConsultListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003cListView fx:id\u003d\"consultListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "shunde97": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" title\u003d\"TAble\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"130\" minHeight\u003d\"130\" prefHeight\u003d\"130\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003cSplitPane fx:id\u003d\"splitPanePlaceholder\" dividerPositions\u003d\"0.3, 0.5\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                        \u003cTabPane fx:id\u003d\"firstTabPanePlaceholder\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                            \u003cURL value\u003d\"@FirstTabPane.css\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003ctabs\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Students\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                                          \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" maxHeight\u003d\"300.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"300.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Tutorials\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                                           \u003cStackPane fx:id\u003d\"tutorialListPanelPlaceholder\" maxHeight\u003d\"300.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"300.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003cTab text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                          \u003cStackPane fx:id\u003d\"modListPanelPlaceholder\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" maxHeight\u003d\"300.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"300.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                        \u003cTabPane fx:id\u003d\"secondTabPanePlaceholder\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                                \u003cURL value\u003d\"@SecondTabPane.css\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003ctabs\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003cTab text\u003d\"Consultations\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                                           \u003cStackPane fx:id\u003d\"consultListPanelPlaceholder\" maxHeight\u003d\"300.0\" maxWidth\u003d\"350.0\" minHeight\u003d\"300.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"350.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Attendance\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                                          \u003cStackPane fx:id\u003d\"attendanceListPanelPlaceholder\" minHeight\u003d\"300.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"350.0\" maxHeight\u003d\"300.0\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                            \u003cTab text\u003d\"Module Info\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                          \u003cStackPane fx:id\u003d\"modInfoPanelPlaceholder\" maxHeight\u003d\"300.0\" minHeight\u003d\"300.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"350.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                       \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                  \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                      \u003cVBox\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                              \u003cLabel style\u003d\"-fx-text-fill: white; -fx-font-style: italic; -fx-font-weight: bold; -fx-font-size: 16;\" text\u003d\"Your Reminders\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                                  \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" maxHeight\u003d\"300.0\" maxWidth\u003d\"314.0\" minHeight\u003d\"300.0\" minWidth\u003d\"314.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"314.0\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                          \u003c/children\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"20.0\" minHeight\u003d\"20.0\" prefHeight\u003d\"20.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 26,
      "nigelnnk": 70,
      "-": 44,
      "hanchingyong": 3,
      "shunde97": 1,
      "suwoons": 1
    }
  },
  {
    "path": "src/main/resources/view/ModInfoCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cLabel fx:id\u003d\"modCodeLabel\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$modCode\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cLabel fx:id\u003d\"modNoteLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modNote\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "         \u003cStackPane fx:id\u003d\"modLinkPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 34
    }
  },
  {
    "path": "src/main/resources/view/ModInfoPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cListView fx:id\u003d\"modInfoListView\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 9
    }
  },
  {
    "path": "src/main/resources/view/ModLinkCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cLabel fx:id\u003d\"modLinkName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$modLinkName\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cLabel fx:id\u003d\"modLink\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modLink\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 42
    }
  },
  {
    "path": "src/main/resources/view/ModLinkPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cListView fx:id\u003d\"modLinkListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 7
    }
  },
  {
    "path": "src/main/resources/view/ModListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cLabel fx:id\u003d\"modCode\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$modCode\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cLabel fx:id\u003d\"modName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modName\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 35
    }
  },
  {
    "path": "src/main/resources/view/ModListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cListView fx:id\u003d\"modListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 7
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" style\u003d\"-fx-border-color: #232323;\" \u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 32
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\"   /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 7
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "      \u003cLabel fx:id\u003d\"matricNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matricNumber\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "shunde97": 1
    }
  },
  {
    "path": "src/main/resources/view/TutorialListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "      \u003cLabel fx:id\u003d\"modCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modCode\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "      \u003cLabel fx:id\u003d\"tutlocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tutlocation\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "         \u003cLabel fx:id\u003d\"tutTime\" layoutX\u003d\"25.0\" layoutY\u003d\"71.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tutTime\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 35,
      "hanchingyong": 2
    }
  },
  {
    "path": "src/main/resources/view/TutorialListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "  \u003cListView fx:id\u003d\"tutorialListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 6,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "shunde97": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.ListStudentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonConsultStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonModStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonReminderStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.storage.JsonTutorialStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonConsultStorage consultStorage \u003d new JsonConsultStorage(temporaryFolder.resolve(\"consults.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonTutorialStorage tutorialStorage \u003d new JsonTutorialStorage(temporaryFolder.resolve(\"tutorials.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        JsonModStorage modStorage \u003d new JsonModStorage(temporaryFolder.resolve(\"mods.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        JsonReminderStorage reminderStorage \u003d new JsonReminderStorage(temporaryFolder.resolve(\"reminders.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialStorage, modStorage, reminderStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String deleteStudentCommand \u003d \"deleteStudent 9\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandException(deleteStudentCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String listStudentCommand \u003d ListStudentCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(listStudentCommand, ListStudentCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonConsultStorage consultStorage \u003d new JsonConsultStorage(temporaryFolder.resolve(\"ioExceptionConsults.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonTutorialStorage tutorialStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            new JsonTutorialStorage(temporaryFolder.resolve(\"ioExceptionTutorials.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        //TODO check if this statement is problematic"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        JsonModStorage modStorage \u003d new JsonModStorage(temporaryFolder.resolve(\"ioExceptionMods.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        JsonReminderStorage reminderStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new JsonReminderStorage(temporaryFolder.resolve(\"ioExceptionReminders.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialStorage, modStorage, reminderStorage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String addStudentCommand \u003d AddStudentCommand.COMMAND_WORD + NAME_DESC_AMY + MATRICNUMBER_DESC_AMY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(addStudentCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStudentTAble(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void saveAddressBook(ReadOnlyStudent addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 7,
      "nigelnnk": 4,
      "-": 138,
      "hanchingyong": 6,
      "shunde97": 18,
      "suwoons": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddStudentCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStudentTAble(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(new AddStudentCommand(validStudent), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student studentInList \u003d model.getStudentTAble().getStudentList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(new AddStudentCommand(studentInList), model, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 4,
      "nigelnnk": 1,
      "-": 31,
      "hanchingyong": 3,
      "shunde97": 12,
      "suwoons": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(validStudent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                AddStudentCommand.MESSAGE_DUPLICATE_STUDENT, ()-\u003e addStudentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        AddStudentCommand addAliceCommand \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        AddStudentCommand addBobCommand \u003d new AddStudentCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        AddStudentCommand addAliceCommandCopy \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setStudentTAble(ReadOnlyStudent newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void deleteConsult(Consult target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setConsult(Consult consultToEdit, Consult editedConsult) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void clearConsults() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyConsult getConsultTAble() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorialStudent(Tutorial tutorial, Student matric) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteTutorial(Tutorial target) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteTutorialStudent(Tutorial toDeleteFrom, Student target) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markPresent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyTutorial getTutorialTAble() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public boolean hasMod(Mod mod) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void addMod(Mod mod) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public Optional\u003cMod\u003e findMod(ModCode modCode) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void deleteMod(Mod mod) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setMod(Mod target, Mod editedMod) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ObservableList\u003cMod\u003e getFilteredModList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void updateFilteredModList(Predicate\u003cMod\u003e predicate) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ReadOnlyMod getModTAble() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ObservableList\u003cMod\u003e getViewedMod() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setViewedMod(Mod mod) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public Reminder doneReminder(Reminder target) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setReminder(Reminder reminderToEdit, Reminder editedReminder) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ReadOnlyReminder getReminderTAble() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new StudentTAble();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 41,
      "nigelnnk": 53,
      "-": 144,
      "hanchingyong": 53,
      "shunde97": 47,
      "suwoons": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddConsultCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.getTypicalConsultTAble;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.commands.consults.AddConsultCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.testutil.ConsultBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class AddConsultCommandTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalConsultTAble(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void constructor_nullIndexNullConsult_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddConsultCommand(null, null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void execute_consultAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult validConsult \u003d new ConsultBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AddConsultCommand addConsultCommand \u003d new AddConsultCommand(index, validConsult);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String expectedMessage \u003d String.format(AddConsultCommand.MESSAGE_SUCCESS, validConsult);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StudentTAble(model.getStudentTAble()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            new UserPrefs(), new ConsultTAble(), new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        expectedModel.addConsult(validConsult);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertCommandSuccess(addConsultCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void execute_sameConsult_throwsCommandException() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult firstConsult \u003d model.getFilteredConsultList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AddConsultCommand addConsultCommand \u003d new AddConsultCommand(index, firstConsult);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertCommandFailure(addConsultCommand, model, addConsultCommand.MESSAGE_DUPLICATE_CONSULT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult c1 \u003d new ConsultBuilder().withLocation(\"sr1\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Consult c2 \u003d new ConsultBuilder().withBeginDateTime(\"2020-02-02 12:00\").withEndDateTime(\"2020-02-02 13:00\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AddConsultCommand addC1Command \u003d new AddConsultCommand(index, c1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AddConsultCommand addC2Command \u003d new AddConsultCommand(index, c2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertTrue(addC1Command.equals(addC1Command));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AddConsultCommand addSr1CommandCopy \u003d new AddConsultCommand(index, c1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertTrue(addC1Command.equals(addSr1CommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertFalse(addC1Command.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertFalse(addC1Command.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // different timing -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertFalse(addC1Command.equals(addC2Command));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setStudentTAble(ReadOnlyStudent newData) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void deleteConsult(Consult target) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setConsult(Consult consultToEdit, Consult editedConsult) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void clearConsults() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyConsult getConsultTAble() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorialStudent(Tutorial tutorial, Student matric) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void deleteTutorial(Tutorial target) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteTutorialStudent(Tutorial toDeleteFrom, Student target) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markPresent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyTutorial getTutorialTAble() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasMod(Mod mod) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void addMod(Mod mod) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public Optional\u003cMod\u003e findMod(ModCode modCode) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void deleteMod(Mod mod) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setMod(Mod target, Mod editedMod) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ObservableList\u003cMod\u003e getFilteredModList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void updateFilteredModList(Predicate\u003cMod\u003e predicate) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ReadOnlyMod getModTAble() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ObservableList\u003cMod\u003e getViewedMod() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setViewedMod(Mod mod) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setReminder(Reminder reminderToEdit, Reminder editedReminder) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public Reminder doneReminder(Reminder target) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ReadOnlyReminder getReminderTAble() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * A Model stub that contains a single consult."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private class ModelStubWithConsult extends AddConsultCommandTest.ModelStub {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        private final Consult consult;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ModelStubWithConsult(Consult consult) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            requireAllNonNull(consult);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            this.consult \u003d consult;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            requireNonNull(consult);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return this.consult.equals(consult);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * A Model stub that always accept the consult being added."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private class ModelStubAcceptingConsultAdded extends AddConsultCommandTest.ModelStub {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        final ArrayList\u003cConsult\u003e consultsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            requireNonNull(consult);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return consultsAdded.stream().anyMatch(consult::equals);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            requireNonNull(consult);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consultsAdded.add(consult);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return consultsAdded.stream().anyMatch(consult::timeClash);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new StudentTAble();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 42,
      "nigelnnk": 28,
      "hanchingyong": 312,
      "suwoons": 37,
      "shunde97": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddReminderCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.commands.reminders.AddReminderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class AddReminderCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void constructor_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddReminderCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void execute_reminderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        AddReminderCommandTest.ModelStubAcceptingReminderAdded modelStub \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                new AddReminderCommandTest.ModelStubAcceptingReminderAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        CommandResult commandResult \u003d new AddReminderCommand(validReminder).execute(modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertEquals(String.format(AddReminderCommand.MESSAGE_SUCCESS, validReminder),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertEquals(Arrays.asList(validReminder), modelStub.remindersAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void execute_duplicateReminder_throwsCommandException() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        AddReminderCommand addReminderCommand \u003d new AddReminderCommand(validReminder);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        AddReminderCommandTest.ModelStub modelStub \u003d new AddReminderCommandTest.ModelStubWithReminder(validReminder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertThrows(CommandException.class, AddReminderCommand.MESSAGE_DUPLICATE_REMINDER, ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            -\u003e addReminderCommand.execute(modelStub));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder r1 \u003d new ReminderBuilder().withDescription(new Description(\"Email T03 tutorial 4 solutions\")).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        Reminder r2 \u003d new ReminderBuilder().withDate(\"2020-03-25\").withTime(\"14:00\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        AddReminderCommand addR1Command \u003d new AddReminderCommand(r1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        AddReminderCommand addR2Command \u003d new AddReminderCommand(r2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertTrue(addR1Command.equals(addR1Command));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        AddReminderCommand addR1CommandCopy \u003d new AddReminderCommand(r1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertTrue(addR1Command.equals(addR1CommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertFalse(addR1Command.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertFalse(addR1Command.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        // different information -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        assertFalse(addR1Command.equals(addR2Command));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public void setStudentTAble(ReadOnlyStudent newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void deleteConsult(Consult target) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setConsult(Consult consultToEdit, Consult editedConsult) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void clearConsults() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ReadOnlyConsult getConsultTAble() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorialStudent(Tutorial tutorial, Student matric) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void deleteTutorial(Tutorial target) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteTutorialStudent(Tutorial toDeleteFrom, Student target) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markPresent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ReadOnlyTutorial getTutorialTAble() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasMod(Mod mod) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void addMod(Mod mod) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void deleteMod(Mod mod) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public Optional\u003cMod\u003e findMod(ModCode modCode) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setMod(Mod target, Mod editedMod) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ObservableList\u003cMod\u003e getFilteredModList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void updateFilteredModList(Predicate\u003cMod\u003e predicate) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ReadOnlyMod getModTAble() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ObservableList\u003cMod\u003e getViewedMod() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setViewedMod(Mod mod) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void setReminder(Reminder reminderToEdit, Reminder editedReminder) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public Reminder doneReminder(Reminder target) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public ReadOnlyReminder getReminderTAble() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * A Model stub that contains a single reminder."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private class ModelStubWithReminder extends AddReminderCommandTest.ModelStub {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        private final Reminder reminder;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ModelStubWithReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return this.reminder.equals(reminder);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * A Model stub that always accept the reminder being added."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private class ModelStubAcceptingReminderAdded extends AddReminderCommandTest.ModelStub {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            return remindersAdded.stream().anyMatch(reminder::equals);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            remindersAdded.add(reminder);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return new StudentTAble();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 333,
      "nigelnnk": 28,
      "hanchingyong": 7,
      "shunde97": 7,
      "suwoons": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTutorialCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.commands.tutorials.AddTutorialCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.consult.ReadOnlyConsult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.ReadOnlyTutorial;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.mod.Mod;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ReadOnlyMod;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.testutil.TutorialBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class AddTutorialCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void constructor_nullTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTutorialCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void execute_tutorialAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommandTest.ModelStubAcceptingTutorialAdded modelStub \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                new AddTutorialCommandTest.ModelStubAcceptingTutorialAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        CommandResult commandResult \u003d new AddTutorialCommand(validTutorial).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertEquals(String.format(AddTutorialCommand.MESSAGE_SUCCESS, validTutorial),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertEquals(Arrays.asList(validTutorial), modelStub.tutorialsAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void execute_duplicateTutorial_throwsCommandException() throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addTutorialCommand \u003d new AddTutorialCommand(validTutorial);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommandTest.ModelStub modelStub \u003d new AddTutorialCommandTest.ModelStubWithTutorial(validTutorial);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertThrows(CommandException.class, AddTutorialCommand.MESSAGE_DUPLICATE_TUTORIAL, ()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            -\u003e addTutorialCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // have to add builder for modCode, name, day"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial t1 \u003d new TutorialBuilder().withLocation(\"SR1\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial t2 \u003d new TutorialBuilder().withBeginTime(\"10:00\").withEndTime(\"12:00\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial t3 \u003d new TutorialBuilder().withModCode(\"CS2100\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial t4 \u003d new TutorialBuilder().withTutorialName(\"T01\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial t5 \u003d new TutorialBuilder().withDay(\"1\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial t6 \u003d new TutorialBuilder().withLocation(\"SR3\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addT1Command \u003d new AddTutorialCommand(t1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addT2Command \u003d new AddTutorialCommand(t2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addT3command \u003d new AddTutorialCommand(t3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addT4command \u003d new AddTutorialCommand(t4);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addT5command \u003d new AddTutorialCommand(t5);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addT6command \u003d new AddTutorialCommand(t6);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertTrue(addT1Command.equals(addT1Command));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        AddTutorialCommand addSr1CommandCopy \u003d new AddTutorialCommand(t1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertTrue(addT1Command.equals(addSr1CommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertFalse(addT1Command.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertFalse(addT1Command.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // different timing -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertTrue(addT1Command.equals(addT2Command));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // different location -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertTrue(addT6command.equals(addT1Command));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // different day -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertTrue(addT5command.equals(addT1Command));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertFalse(addT3command.equals(addT1Command));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        // different tutorial name -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        assertFalse(addT4command.equals(addT1Command));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * A default model stub that has all of the methods failing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void setStudentTAble(ReadOnlyStudent newData) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasConsult(Consult consult) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addConsult(Consult consult) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteConsult(Consult target) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void setConsult(Consult consultToEdit, Consult editedConsult) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void clearConsults() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ObservableList\u003cConsult\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void updateFilteredConsultList(Predicate\u003cConsult\u003e predicate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasSameDateTime(Consult consult) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyConsult getConsultTAble() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorialStudent(Tutorial tutorial, Student student) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorialStudent(Tutorial tutorial, Student matric) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteTutorial(Tutorial target) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteTutorialStudent(Tutorial toDeleteFrom, Student target) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markPresent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void markAbsent(Tutorial tutorialToMark, Student studentToMark, int week) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyTutorial getTutorialTAble() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasMod(Mod mod) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addMod(Mod mod) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public Optional\u003cMod\u003e findMod(ModCode modCode) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteMod(Mod mod) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setMod(Mod target, Mod editedMod) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ObservableList\u003cMod\u003e getFilteredModList() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void updateFilteredModList(Predicate\u003cMod\u003e predicate) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ReadOnlyMod getModTAble() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public ObservableList\u003cMod\u003e getViewedMod() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        public void setViewedMod(Mod mod) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void setReminder(Reminder reminderToEdit, Reminder editedReminder) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public Reminder doneReminder(Reminder target) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyReminder getReminderTAble() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * A Model stub that contains a single tutorial."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private class ModelStubWithTutorial extends AddTutorialCommandTest.ModelStub {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        private final Tutorial tutorial;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        ModelStubWithTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            this.tutorial \u003d tutorial;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return this.tutorial.equals(tutorial);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * A Model stub that always accepts the tutorial being added."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private class ModelStubAcceptingTutorialAdded extends AddTutorialCommandTest.ModelStub {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        final ArrayList\u003cTutorial\u003e tutorialsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return tutorialsAdded.stream().anyMatch(tutorial::equals);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            tutorialsAdded.add(tutorial);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasSameTiming(Tutorial tutorial) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return tutorialsAdded.stream().anyMatch(tutorial::timeClash);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public boolean hasMod(Mod mod) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        public ReadOnlyStudent getStudentTAble() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            return new StudentTAble();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 27,
      "hanchingyong": 3,
      "suwoons": 412
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        expectedModel.setStudentTAble(new StudentTAble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 3,
      "nigelnnk": 1,
      "-": 27,
      "hanchingyong": 3,
      "shunde97": 1,
      "suwoons": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String VALID_MATRICNUMBER_AMY \u003d \"A0112675A\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String VALID_MATRICNUMBER_BOB \u003d \"A0125494F\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String VALID_REMARK_NICE \u003d \"nice\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MATRICNUMBER_DESC_AMY \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRICNUMBER_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String MATRICNUMBER_DESC_BOB \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_TAG + VALID_REMARK_NICE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String INVALID_MATRICNUMBER_DESC \u003d \" \" + PREFIX_MATRIC_NUMBER + \"111111\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    // matric numbers is not all numeric"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withMatricNumber(VALID_MATRICNUMBER_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withMatricNumber(VALID_MATRICNUMBER_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * - the address book, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble expectedStudentTAble \u003d new StudentTAble(actualModel.getStudentTAble());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(expectedStudentTAble, actualModel.getStudentTAble());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "hanchingyong": 9,
      "shunde97": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.DeleteStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getStudentTAble(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand deletestudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStudentTAble(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(deletestudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudentTAble().getStudentList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand deleteFirstCommand \u003d new DeleteStudentCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand deleteSecondCommand \u003d new DeleteStudentCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand deleteFirstCommandCopy \u003d new DeleteStudentCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 4,
      "nigelnnk": 1,
      "-": 74,
      "hanchingyong": 11,
      "shunde97": 25,
      "suwoons": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * EditStudentCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StudentTAble(model.getStudentTAble()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new UserPrefs(), new ConsultTAble(), new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withMatricNumber(VALID_MATRICNUMBER_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withMatricNumber(VALID_MATRICNUMBER_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StudentTAble(model.getStudentTAble()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new UserPrefs(), new ConsultTAble(), new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST, new EditStudentDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StudentTAble(model.getStudentTAble()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new UserPrefs(), new ConsultTAble(), new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StudentTAble(model.getStudentTAble()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new UserPrefs(), new ConsultTAble(), new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // edit student in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student studentInList \u003d model.getStudentTAble().getStudentList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudentTAble().getStudentList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        final EditStudentCommand standardCommand \u003d new EditStudentCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand commandWithSameValues \u003d new EditStudentCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 6,
      "nigelnnk": 1,
      "-": 100,
      "hanchingyong": 17,
      "shunde97": 58,
      "suwoons": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different matric number -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withMatricNumber(VALID_MATRICNUMBER_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "shunde97": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.FindStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindStudentCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        FindStudentCommand findFirstCommand \u003d new FindStudentCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        FindStudentCommand findSecondCommand \u003d new FindStudentCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        FindStudentCommand findFirstCommandCopy \u003d new FindStudentCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        FindStudentCommand command \u003d new FindStudentCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        FindStudentCommand command \u003d new FindStudentCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 3,
      "nigelnnk": 1,
      "-": 60,
      "hanchingyong": 1,
      "shunde97": 22,
      "suwoons": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.ListStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for listStudentCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getStudentTAble(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(new ListStudentCommand(), model, ListStudentCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertCommandSuccess(new ListStudentCommand(), model, ListStudentCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 3,
      "nigelnnk": 2,
      "-": 30,
      "hanchingyong": 4,
      "shunde97": 6,
      "suwoons": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "class RemarkCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Remark test\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ConsultTAble(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(firstStudent).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                                        new Remark(editedStudent.getRemark().value));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StudentTAble(model.getStudentTAble()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new UserPrefs(), new ConsultTAble(), new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedModel.setStudent(firstStudent, editedStudent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 3,
      "nigelnnk": 1,
      "hanchingyong": 30,
      "shunde97": 8,
      "suwoons": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRICNUMBER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.AddStudentCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MATRICNUMBER_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + EMAIL_DESC_BOB + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + MATRICNUMBER_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // missing matric number prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRICNUMBER_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_MATRICNUMBER_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // invalid matric number"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MATRICNUMBER_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "hanchingyong": 6,
      "shunde97": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteStudentCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.DeleteStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.DeleteStudentCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * outside of the DeleteStudentCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * same path through the DeleteStudentCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DeleteStudentCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private DeleteStudentCommandParser parser \u003d new DeleteStudentCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteStudentCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                DeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "hanchingyong": 4,
      "shunde97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditStudentCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRICNUMBER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.EditStudentCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class EditStudentCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private EditStudentCommandParser parser \u003d new EditStudentCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\", EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MATRICNUMBER_DESC, MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // invalid matric number"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // invalid matric number followed by valid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MATRICNUMBER_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // valid matric number followed by invalid matric number. The test case for invalid matric number followed by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // valid matric number"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\" + MATRICNUMBER_DESC_BOB + INVALID_MATRICNUMBER_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_MATRICNUMBER_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICNUMBER_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withMatricNumber(VALID_MATRICNUMBER_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICNUMBER_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withMatricNumber(VALID_MATRICNUMBER_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // matric number"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MATRICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withMatricNumber(VALID_MATRICNUMBER_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICNUMBER_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + TAG_DESC_FRIEND + MATRICNUMBER_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + MATRICNUMBER_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withMatricNumber(VALID_MATRICNUMBER_BOB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MATRICNUMBER_DESC + MATRICNUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withMatricNumber(VALID_MATRICNUMBER_BOB).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_MATRICNUMBER_DESC"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                + MATRICNUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withMatricNumber(VALID_MATRICNUMBER_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "hanchingyong": 14,
      "shunde97": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindStudentCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.FindStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.students.FindStudentCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class FindStudentCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private FindStudentCommandParser parser \u003d new FindStudentCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                FindStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        FindStudentCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new FindStudentCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "hanchingyong": 3,
      "shunde97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String INVALID_MATRIC_NUMBER \u003d \"A0251\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String VALID_MATRIC_NUMBER \u003d \"A0123456M\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void parseMatricNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatricNumber(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void parseMatricNumber_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMatricNumber(INVALID_MATRIC_NUMBER));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void parseMatricNumber_validValueWithoutWhitespace_returnsMatricNumber() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        MatricNumber expectedMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(expectedMatricNumber, ParserUtil.parseMatricNumber(VALID_MATRIC_NUMBER));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void parseMatricNumber_validValueWithWhitespace_returnsTrimmedMatricNumber() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String matricNumberWithWhitespace \u003d WHITESPACE + VALID_MATRIC_NUMBER + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        MatricNumber expectedMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedMatricNumber, ParserUtil.parseMatricNumber(matricNumberWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 2,
      "-": 149,
      "hanchingyong": 10,
      "shunde97": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StudentTAbleParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.DeleteStudentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.FindStudentCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.ListStudentCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class StudentTAbleParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final TAbleParser parser \u003d new TAbleParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        AddStudentCommand command \u003d (AddStudentCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(new AddStudentCommand(student), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        DeleteStudentCommand command \u003d (DeleteStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                DeleteStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(new DeleteStudentCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        EditStudentCommand command \u003d (EditStudentCommand) parser.parseCommand(EditStudentCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(new EditStudentCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        FindStudentCommand command \u003d (FindStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                FindStudentCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(new FindStudentCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD) instanceof ListStudentCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD + \" 3\") instanceof ListStudentCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "hanchingyong": 5,
      "shunde97": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialTAble;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import seedu.address.model.mod.ModTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.ReminderTAble;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(new StudentTAble(), new StudentTAble(modelManager.getStudentTAble()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble studentTAble \u003d new AddressBookBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble differentStudentTAble \u003d new StudentTAble();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultTAble consultTAble \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        TutorialTAble tutorialTAble \u003d new TutorialTAble();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ModTAble modTAble \u003d new ModTAble();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        ReminderTAble reminderTAble \u003d new ReminderTAble();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        modelManager \u003d new ModelManager(studentTAble, userPrefs, new ConsultTAble(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            new TutorialTAble(), new ModTAble(), new ReminderTAble());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(studentTAble, userPrefs, consultTAble,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialTAble, modTAble, reminderTAble);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // different studentTAble -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentStudentTAble, userPrefs, consultTAble,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialTAble, modTAble, reminderTAble)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(studentTAble, userPrefs, consultTAble,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialTAble, modTAble, reminderTAble)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(studentTAble, differentUserPrefs, consultTAble,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialTAble, modTAble, reminderTAble)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 7,
      "nigelnnk": 3,
      "-": 108,
      "hanchingyong": 12,
      "shunde97": 15,
      "suwoons": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/StudentTAbleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class StudentTAbleTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private final StudentTAble studentTAble \u003d new StudentTAble();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(Collections.emptyList(), studentTAble.getStudentList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e studentTAble.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(newData, studentTAble);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentStub newData \u003d new StudentStub(newStudents);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e studentTAble.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e studentTAble.hasStudent(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertFalse(studentTAble.hasStudent(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble.addStudent(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertTrue(studentTAble.hasStudent(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble.addStudent(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertTrue(studentTAble.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e studentTAble.getStudentList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * A stub ReadOnlyStudent whose students list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static class StudentStub implements ReadOnlyStudent {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "hanchingyong": 22,
      "shunde97": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/EmailTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "shunde97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/MatricNumberTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class MatricNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MatricNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void constructor_invalidMatricNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String invalidMatricNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MatricNumber(invalidMatricNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void isValidMatricNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // null matric number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MatricNumber.isValidMatricNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // invalid matric numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"A123B\")); // less than 7 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"test\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"A019fbf36H\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"A015 3965H\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"A0151585\")); // must end with an alphabet"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"a0123456b\")); // alphabets must be capitalised"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"A012345678B\")); // more than 7 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"0123456B\")); // does not start with capital A"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // valid matric numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(MatricNumber.isValidMatricNumber(\"A0156986H\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // Keywords match matric number, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"A0123456A\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withMatricNumber(\"A0123456A\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "hanchingyong": 1,
      "shunde97": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "shunde97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different matric number and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withMatricNumber(VALID_MATRICNUMBER_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // same name, same matric number, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // same name, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withMatricNumber(VALID_MATRICNUMBER_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // same name, same matric number, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different matric number -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withMatricNumber(VALID_MATRICNUMBER_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunde97": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final String INVALID_MATRICNUMBER \u003d \"A1234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final String VALID_MATRICNUMBER \u003d BENSON.getMatricNumber().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_MATRICNUMBER, VALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_MATRICNUMBER, VALID_EMAIL, VALID_TAGS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                VALID_REMARK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void toModelType_invalidMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_MATRICNUMBER, VALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d MatricNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void toModelType_nullMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_TAGS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                VALID_REMARK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatricNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_MATRICNUMBER, INVALID_EMAIL, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_MATRICNUMBER, null, VALID_TAGS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                VALID_REMARK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_MATRICNUMBER, VALID_EMAIL, invalidTags, VALID_REMARK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "hanchingyong": 2,
      "shunde97": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableStudentTAbleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class JsonSerializableStudentTAbleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableStudentTAbleTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble studentTAbleFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble typicalStudentsStudentTAble \u003d TypicalStudents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(studentTAbleFromFile, typicalStudentsStudentTAble);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "hanchingyong": 6,
      "shunde97": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonStudentTAbleStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class JsonStudentTAbleStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonStudentTAbleStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private java.util.Optional\u003cReadOnlyStudent\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void readAddressBook_invalidStudentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidStudentAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public void readAddressBook_invalidAndValidStudentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidStudentAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ReadOnlyStudent readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(original, new StudentTAble(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(original, new StudentTAble(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(original, new StudentTAble(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private void saveAddressBook(ReadOnlyStudent addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new StudentTAble(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "hanchingyong": 12,
      "shunde97": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        JsonConsultStorage consultStorage \u003d new JsonConsultStorage(getTempFilePath(\"consults\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        JsonTutorialStorage tutorialStorage \u003d new JsonTutorialStorage(getTempFilePath(\"tutorials\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        JsonModStorage modStorage \u003d new JsonModStorage(getTempFilePath(\"mods\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        JsonReminderStorage reminderStorage \u003d new JsonReminderStorage(getTempFilePath(\"reminders\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, consultStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "            tutorialStorage, modStorage, reminderStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonStudentTAbleStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ReadOnlyStudent retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(original, new StudentTAble(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 2,
      "nigelnnk": 2,
      "-": 60,
      "hanchingyong": 7,
      "shunde97": 1,
      "suwoons": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " *     {@code StudentTAble ab \u003d new AddressBookBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private StudentTAble studentTAble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble \u003d new StudentTAble();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public AddressBookBuilder(StudentTAble studentTAble) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.studentTAble \u003d studentTAble;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Adds a new {@code Student} to the {@code StudentTAble} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public AddressBookBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentTAble.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public StudentTAble build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return studentTAble;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "hanchingyong": 10,
      "shunde97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConsultBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A utility class to help with building Consult objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ConsultBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String DEFAULT_BEGIN_DATE_TIME \u003d \"2020-03-03 15:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String DEFAULT_END_DATE_TIME \u003d \"2020-03-03 17:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"SR1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String DEFAULT_MATRIC_NUMBER \u003d \"A0123456Z\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String DEFAULT_STUDENT_NAME \u003d \"ALICE\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private LocalDateTime beginDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Name studentName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultBuilder() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        beginDateTime \u003d ParserUtil.parseDateTime(DEFAULT_BEGIN_DATE_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        endDateTime \u003d ParserUtil.parseDateTime(DEFAULT_END_DATE_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentName \u003d new Name(DEFAULT_STUDENT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        matricNumber \u003d new MatricNumber(DEFAULT_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Initializes the ConsultBuilder with the data of {@code consultToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultBuilder(Consult consultToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        beginDateTime \u003d consultToCopy.getBeginDateTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        endDateTime \u003d consultToCopy.getEndDateTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        location \u003d consultToCopy.getLocation();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        studentName \u003d consultToCopy.getStudentName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        matricNumber \u003d consultToCopy.getMatricNumber();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Sets the {@code BeginDateTime} of the {@code Consult} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultBuilder withBeginDateTime(String beginDateTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.beginDateTime \u003d LocalDateTime.parse(beginDateTime, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Sets the {@code EndDateTime} of the {@code Consult} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultBuilder withEndDateTime(String endDateTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.endDateTime \u003d LocalDateTime.parse(endDateTime, formatter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Sets the {@code Location} of the {@code Consult} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Sets the {@code MatricNumber} of the {@code Consult} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ConsultBuilder withMatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.matricNumber \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Consult build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Consult(beginDateTime, endDateTime, location, studentName, matricNumber);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor.setMatricNumber(student.getMatricNumber());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Sets the {@code MatricNumber} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptorBuilder withMatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        descriptor.setMatricNumber(new MatricNumber(matricNumber));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "shunde97": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReminderBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " * A utility class to help with building Reminder objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "public class ReminderBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Return midterms paper to T02\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-03-18\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"15:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderBuilder() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        description \u003d ParserUtil.parseDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        date \u003d ParserUtil.parseDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        time \u003d ParserUtil.parseTime(DEFAULT_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderBuilder(Reminder reminderToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        description \u003d reminderToCopy.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        date \u003d reminderToCopy.getDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        time \u003d reminderToCopy.getTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Sets the {@code Description} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderBuilder withDescription(Description description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Sets the {@code Date} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderBuilder withDate(String date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.date \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     * Sets the {@code Time} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public ReminderBuilder withTime(String time) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        this.time \u003d LocalTime.parse(time, formatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    public Reminder build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "        return new Reminder(description, date, time, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CranstonYeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CranstonYeo": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.MatricNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String DEFAULT_MATRICNUMBER \u003d \"A0111111A\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        matricNumber \u003d new MatricNumber(DEFAULT_MATRICNUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        matricNumber \u003d studentToCopy.getMatricNumber();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        remark \u003d studentToCopy.getRemark();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Sets the {@code MatricNumber} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentBuilder withMatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        this.matricNumber \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Sets the {@code Remark} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public StudentBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new Student(name, matricNumber, email, tags, remark);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "hanchingyong": 9,
      "shunde97": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.AddStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.logic.commands.students.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        sb.append(PREFIX_MATRIC_NUMBER + student.getMatricNumber().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        descriptor.getMatricNumber().ifPresent(matricNumber -\u003e sb.append(PREFIX_MATRIC_NUMBER)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "                .append(matricNumber.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "hanchingyong": 4,
      "shunde97": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "shunde97": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TutorialBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suwoons"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.Tutorial;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.event.tutorial.TutorialName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.mod.ModCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suwoons"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suwoons"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suwoons"
        },
        "content": " * A utility class to help with building Tutorial objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suwoons"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suwoons"
        },
        "content": "public class TutorialBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String DEFAULT_MODCODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String DEFAULT_TUTORIAL_NAME \u003d \"T02\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String DEFAULT_DAY \u003d \"3\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String DEFAULT_BEGIN_TIME \u003d \"15:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"17:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"SR1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Student DEFAULT_STUDENT1 \u003d new StudentBuilder().withName(\"John Doe\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            .withMatricNumber(\"A0123456A\").withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public static final Student DEFAULT_STUDENT2 \u003d new StudentBuilder().withName(\"Jane Lee\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            .withMatricNumber(\"A1234567Z\").withEmail(\"jane@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ModCode modCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private TutorialName tutorialName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private LocalTime beginTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ArrayList\u003cStudent\u003e enrolledStudents \u003d new ArrayList\u003cStudent\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    private ArrayList\u003cArrayList\u003cBoolean\u003e\u003e studentAttendance \u003d new ArrayList\u003cArrayList\u003cBoolean\u003e\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        modCode \u003d ParserUtil.parseModCode(DEFAULT_MODCODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialName \u003d ParserUtil.parseTutorialName(DEFAULT_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        day \u003d ParserUtil.parseDay(DEFAULT_DAY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        beginTime \u003d ParserUtil.parseTime(DEFAULT_BEGIN_TIME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        endTime \u003d ParserUtil.parseTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        enrolledStudents.add(DEFAULT_STUDENT1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        enrolledStudents.add(DEFAULT_STUDENT2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cBoolean\u003e week \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            studentAttendance.add(week);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c enrolledStudents.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            for (ArrayList\u003cBoolean\u003e week : studentAttendance) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                week.add(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Initializes the TutorialBuilder with the data of {@code tutorialToCopy}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder(Tutorial tutorialToCopy) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        modCode \u003d tutorialToCopy.getModCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        tutorialName \u003d tutorialToCopy.getTutorialName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        day \u003d tutorialToCopy.getDay();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        beginTime \u003d tutorialToCopy.getBeginTime();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        endTime \u003d tutorialToCopy.getEndTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        location \u003d tutorialToCopy.getLocation();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        enrolledStudents \u003d tutorialToCopy.getEnrolledStudents();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        studentAttendance \u003d tutorialToCopy.getAttendance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Sets the {@code modCode} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder withModCode(String modCode) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.modCode \u003d new ModCode(modCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Sets the {@code tutorialName} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder withTutorialName(String tutorialName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.tutorialName \u003d new TutorialName(tutorialName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Sets the {@code day} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder withDay(String day) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.day \u003d DayOfWeek.of(Integer.parseInt(day));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Sets the {@code BeginTime} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder withBeginTime(String beginTime) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.beginTime \u003d LocalTime.parse(beginTime, formatter);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Sets the {@code EndTime} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.endTime \u003d LocalTime.parse(endTime, formatter);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Sets the {@code Location} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Sets the {@code enrolledStudents} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public TutorialBuilder withEnrolledStudents(ArrayList\u003cStudent\u003e enrolledStudents) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        this.enrolledStudents \u003d enrolledStudents;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            ArrayList\u003cBoolean\u003e week \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            studentAttendance.add(week);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (int i \u003d 0; i \u003c enrolledStudents.size(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            for (ArrayList\u003cBoolean\u003e week : studentAttendance) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "suwoons"
        },
        "content": "                week.add(false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     * Builds and returns a {@code Tutorial} object from a {@code TutorialBuilder} object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suwoons"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    public Tutorial build() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        Tutorial builtTutorial \u003d new Tutorial(modCode, tutorialName, day, beginTime, endTime, location);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        for (Student student : enrolledStudents) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suwoons"
        },
        "content": "            builtTutorial.setEnrolledStudents(student);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suwoons"
        },
        "content": "        return builtTutorial;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suwoons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suwoons"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suwoons"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suwoons": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalConsults.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.Consult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.event.consult.ConsultTAble;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A utility class containing a list of {@code Consults}  to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class TypicalConsults {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static Consult consult1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static Consult consult2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consult1 \u003d new ConsultBuilder().withBeginDateTime(\"2020-03-03 12:00\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    .withEndDateTime(\"2020-03-03 14:00\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    .withMatricNumber(\"A0111111A\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    .withLocation(\"Deck\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            consult2 \u003d new ConsultBuilder().withBeginDateTime(\"2020-03-04 12:00\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    .withEndDateTime(\"2020-03-04 14:00\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    .withMatricNumber(\"A0123456Z\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    .withLocation(\"SR1\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns an {@code ConsultTAble} with all the typical consults."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static ConsultTAble getTypicalConsultTAble() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ConsultTAble st \u003d new ConsultTAble();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (Consult consult : getTypicalConsults()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            st.addConsult(consult);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return st;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static List\u003cConsult\u003e getTypicalConsults() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(consult1, consult2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "hanchingyong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunde97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_NICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunde97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import seedu.address.model.student.StudentTAble;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunde97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunde97"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunde97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunde97"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withMatricNumber(\"A0111111A\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"johnd@example.com\").withMatricNumber(\"A0222222B\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withMatricNumber(\"A3333333C\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withMatricNumber(\"A4444444D\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withMatricNumber(\"A5555555E\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withMatricNumber(\"A6666666F\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withMatricNumber(\"A7777777G\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withMatricNumber(\"A8888888H\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withMatricNumber(\"A9999999I\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withMatricNumber(VALID_MATRICNUMBER_AMY).withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withRemark(VALID_REMARK_NICE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withMatricNumber(VALID_MATRICNUMBER_BOB).withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            .withRemark(VALID_REMARK_NICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns an {@code StudentTAble} with all the typical students."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunde97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static StudentTAble getTypicalAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StudentTAble ab \u003d new StudentTAble();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunde97"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunde97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunde97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunde97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunde97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 4,
      "shunde97": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "hanchingyong": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunde97"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "shunde97": 1
    }
  }
]
